---
title: "Dissecting glial scar formation by spatial point pattern and topological data analysis"
subtitle: "R-Code notebook"
format:
   html:
    code-fold: true
editor: visual
csl: science.csl
bibliography: references.bib
---

This notebook contains the analysis pipeline employed for the article "Dissecting glial scar formation by spatial point pattern and topological data analysis" published in XXX. With this code readers should be able to replicate the experimental results and apply the same type of analysis in other contexts related to glial cell distribution in animal tissue. If the analysis approach is useful for your own experimental purposes, please cite us:

(L) 

## 1. Install and load required packages

The first step is to install the required libraries and load them. To perform a first installation, please uncomment (erase #) in 'install.packages' line in the following code chunk. For subsequent code execution, place again \# at the beginning of the line to avoid repeated installation.

### 1.1 Install required Packages

```{r}
#| label: Install required packages
#| include: true
#| warning: false
#| message: false

# To install packcages uncomment the following line

#install.packages(c("ggplot2","dpylr", "ggridges", "raincloudplots", "cowplot", "data.table", "ggrepel", "sjPlot", "bayesplot", "reshape2", "purrr", "tidyr", "brms", "emmeans", "modelr", "plyr", "pacthwork", "spatstat", "ggdist", "ggpubr", "bayesplot", "RandomFieldsUtils", "RandomFields"))

#library(devtools)
#install_github ("cran/RandomFields")
```

### 1.2 Load required Packages

After installation is done, the libraries should be loaded every time a new R-session is started. We also load `R_rainclouds` and `summarySE.R` functions available on the Github website.

```{r}
#| label: Load required packages
#| include: true
#| warning: false
#| message: false

library(ggplot2)
library(ggridges)
library(dplyr)
library(sjPlot)
library(ggrepel)
library(reshape2)
library(purrr)
library(tidyr)
library(brms)
library(emmeans)
library(modelr)
library(tidybayes)
library(plyr)
library(patchwork)
library(spatstat)
library(data.table)
library(cowplot)
library(ggdist)
library(ggpubr)
library(bayesplot)
library(RandomFieldsUtils)
library(RandomFields)

# The following functions are available on the github site. Please change the root directory if required
source("R_Functions/R_rainclouds.R")
source("R_Functions/summarySE.R")
```

## 2. Load the experimental data

We load the tables generated in the **batch processing script**. This include 1) The **QuPath-generated annotations file** summarizing cell detections in different brain regions as specified in the section of materials and methods in the main article. 2) .csv tables with **cell intensities** and **Tessellation-based cell allocation**. 3) Tables containing **nearest neighbors distance (nnd)** calculations and 4) Tables with **nnd centroids**.

### 2.1 Load data tables

```{r}
#| label: Load data tables
#| include: true
#| warning: false
#| message: false

set.seed(88071)

# 1) Load Qupath-generated annotations file
NeuN_Raw <- read.csv(file = 'ResultsTables/NeuN_CellDetections.csv', header = TRUE)
Gfap_Raw <- read.csv(file = 'ResultsTables/Gfap_CellDetections.csv', header = TRUE)
Iba1_Raw <- read.csv(file = 'ResultsTables/Iba1_CellDetections.csv', header = TRUE)

# 2) Load cells intensity and covariance analysis (Tessellation) results
Cells_Intensity_Raw <- read.csv(file = 'ResultsTables/Cells_Intensity.csv', header = TRUE)
Cells_Tessellation_Raw <- read.csv(file = 'ResultsTables/Cells_Covariance.csv', header = TRUE)

# 3) Load data tables with nnd results (for glial cells)
Astrocytes_nndist <- read.csv(file = 'ResultsTables/Astrocytes_nndist.csv', header = TRUE)
Microglia_nndist <- read.csv(file = 'ResultsTables/Microglia_nndist.csv', header = TRUE)

# 4) Load data tables with centroid results (for glial cells)
Astrocytes_nndist_Centroid <- read.csv(file = 'ResultsTables/Astrocytes_nndist_Centroid.csv', header = TRUE)
Microglia_nndist_Centroid <- read.csv(file = 'ResultsTables/Microglia_nndist_Centroid.csv', header = TRUE)

```

### 2.1 Load Point patterns

We also load **Hyperframes R-objects** containing point patterns and density kernels. The `Point_Patterns_5x` object contains cell in the whole ischemic hemisphere (as shown in supplementary figure 1) and `Point_Patterns_10x` groups detected cells in the lesion site at the level of bregma.

```{r}
#| label: Load hyperframes
#| include: true
#| warning: false
#| message: false
#| 
# 3) Load hyperframes with point patterns
Point_Patterns_5x <- readRDS("Hyperframes/PointPatterns_5x.rds")
Point_Patterns_10x <- readRDS("Hyperframes/PointPatterns_10x.rds")

```

## 3. Analysis of cell ratio (ipsilateral/contralateral)

We used QuPath [@bankhead2017] to quantify the cell number in different brain regions (cortex \[CTX\], cerebral nuclei \[CNU\], midbrin \[MB\], interbrain \[IB\], and fiber tracts) according to theÂ [Allen Reference Atlases](https://atlas.brain-map.org/). We manipulate the data to obtain the total cell ratio (ipsilateral/contralateral) and cell ratio by cerebral regions. We provide the analysis pipeline and graphical results.

### 3.1 Prepare the data sets

#### 3.1.1 Subset relevant columns

We subset the QuPath-generated tables to obtain solely the number of cells. We perform a comparable procedure for NeuN, Iba1 and Gfap-positive data sets.

```{r}
#| label: Subset relevant columns for cell ratio
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells dataset

## We subset the relevant columns
NeuN <- subset(NeuN_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
NeuN <- cbind(NeuN  , do.call(rbind , strsplit(NeuN$Image , "[_\\.]"))[,3:5])
colnames(NeuN) <- c( colnames(NeuN[1:3]), paste0("Name" , 1:3))
NeuN <- cbind(NeuN[c(-2,-3)] , NeuN[c(2,3)])

## We rename the columns
colnames(NeuN) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
NeuN <- subset(NeuN, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
NeuN$Region <- factor(NeuN$Region)
NeuN$DPI <- factor(NeuN$DPI, levels = c("0D", "5D", "15D", "30D"))
NeuN$Section <- factor(NeuN$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Gfap-positive cells dataset

## We subset the relevant columns
Gfap <- subset(Gfap_Raw, select = c(Image, Class, Num.Detections))

## Extract metadata from the image name to generate required factors for data analysis
Gfap <- cbind(Gfap  , do.call(rbind , strsplit(Gfap$Image , "[_\\.]"))[,3:5])
colnames(Gfap) <- c( colnames(Gfap[1:3]), paste0("Name" , 1:3))
Gfap <- cbind(Gfap[c(-2,-3)] , Gfap[c(2,3)])

## We rename the columns
colnames(Gfap) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Gfap <- subset(Gfap, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Gfap$Region <- factor(Gfap$Region)
Gfap$DPI <- factor(Gfap$DPI, levels = c("0D", "5D", "15D", "30D"))
Gfap$Section <- factor(Gfap$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Iba1-positive cells dataset

## We subset the relevant columns
Iba1 <- subset(Iba1_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
Iba1 <- cbind(Iba1  , do.call(rbind , strsplit(Iba1$Image , "[_\\.]"))[,3:5])
colnames(Iba1) <- c( colnames(Iba1[1:3]), paste0("Name" , 1:3))
Iba1 <- cbind(Iba1[c(-2,-3)] , Iba1[c(2,3)])

## We rename the columns
colnames(Iba1) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Iba1 <- subset(Iba1, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Iba1$Region <- factor(Iba1$Region)
Iba1$DPI <- factor(Iba1$DPI, levels = c("0D", "5D", "15D", "30D"))
Iba1$Section <- factor(Iba1$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))
```

We print the head of one of the tables to verify the result:

```{r}
#| label: Print Iba1 cell ratios table
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Iba1)
```

#### 3.1.2 Transform the data tables

We summarize the data by hemispheres (ipsilateral and contralateral) to calculate cell ratios. We transform long format data tables into wide format.

```{r}
#| label: Transform to wide format for cell ratios
#| include: true
#| warning: false
#| message: false

NeuN_Wide <- reshape2::dcast(NeuN, MouseId + DPI ~ Section + Region, value.var="Cells")
Gfap_Wide <- reshape2::dcast(Gfap, MouseId + DPI ~ Section + Region, value.var="Cells")
Iba1_Wide <- reshape2::dcast(Iba1, MouseId + DPI ~ Section + Region, value.var="Cells")

```

We print one of the results to verify the transformation:

```{r}
#| label: Print Gfap table for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Gfap_Wide, c(10, 5))
```

Next, we summarize the information by brain sections as shown in **supplementary table 1** and calculate the respective cell ratios

```{r}
#| label: Summary by section for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(NeuN_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(NeuN_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(NeuN_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(NeuN_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(NeuN_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(NeuN_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(NeuN_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(NeuN_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(NeuN_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(NeuN_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(NeuN_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(NeuN_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(NeuN_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Calculation of cells ratios per brain sections (ipsilateral/Contralateral)

NeuN_Wide$S1_diff <- NeuN_Wide$Scene1_Left_Sum / NeuN_Wide$Scene1_Right_Sum
NeuN_Wide$S2_diff <- NeuN_Wide$Scene2_Left_Sum / NeuN_Wide$Scene2_Right_Sum
NeuN_Wide$S3_diff <- NeuN_Wide$Scene3_Left_Sum / NeuN_Wide$Scene3_Right_Sum
NeuN_Wide$S4_diff <- NeuN_Wide$Scene4_Left_Sum / NeuN_Wide$Scene4_Right_Sum
NeuN_Wide$S5_diff <- NeuN_Wide$Scene5_Left_Sum / NeuN_Wide$Scene5_Right_Sum
NeuN_Wide$S6_diff <- NeuN_Wide$Scene6_Left_Sum / NeuN_Wide$Scene6_Right_Sum
NeuN_Wide$S7_diff <- NeuN_Wide$Scene7_Left_Sum / NeuN_Wide$Scene7_Right_Sum


# For Gfap-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Gfap_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Gfap_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Gfap_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Gfap_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Gfap_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Gfap_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Gfap_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Gfap_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Gfap_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Gfap_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Gfap_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Gfap_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Gfap_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$S1_diff <- Gfap_Wide$Scene1_Left_Sum / Gfap_Wide$Scene1_Right_Sum
Gfap_Wide$S2_diff <- Gfap_Wide$Scene2_Left_Sum / Gfap_Wide$Scene2_Right_Sum
Gfap_Wide$S3_diff <- Gfap_Wide$Scene3_Left_Sum / Gfap_Wide$Scene3_Right_Sum
Gfap_Wide$S4_diff <- Gfap_Wide$Scene4_Left_Sum / Gfap_Wide$Scene4_Right_Sum
Gfap_Wide$S5_diff <- Gfap_Wide$Scene5_Left_Sum / Gfap_Wide$Scene5_Right_Sum
Gfap_Wide$S6_diff <- Gfap_Wide$Scene6_Left_Sum / Gfap_Wide$Scene6_Right_Sum
Gfap_Wide$S7_diff <- Gfap_Wide$Scene7_Left_Sum / Gfap_Wide$Scene7_Right_Sum


# For Iba1-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Iba1_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Iba1_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Iba1_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Iba1_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Iba1_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Iba1_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Iba1_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Iba1_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Iba1_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Iba1_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Iba1_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Iba1_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Iba1_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$S1_diff <- Iba1_Wide$Scene1_Left_Sum / Iba1_Wide$Scene1_Right_Sum
Iba1_Wide$S2_diff <- Iba1_Wide$Scene2_Left_Sum / Iba1_Wide$Scene2_Right_Sum
Iba1_Wide$S3_diff <- Iba1_Wide$Scene3_Left_Sum / Iba1_Wide$Scene3_Right_Sum
Iba1_Wide$S4_diff <- Iba1_Wide$Scene4_Left_Sum / Iba1_Wide$Scene4_Right_Sum
Iba1_Wide$S5_diff <- Iba1_Wide$Scene5_Left_Sum / Iba1_Wide$Scene5_Right_Sum
Iba1_Wide$S6_diff <- Iba1_Wide$Scene6_Left_Sum / Iba1_Wide$Scene6_Right_Sum
Iba1_Wide$S7_diff <- Iba1_Wide$Scene7_Left_Sum / Iba1_Wide$Scene7_Right_Sum
```

Next, we summarize the data by brain region and calculate the respective cell ratio

```{r}
#| label: Summary by region for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(NeuN_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(NeuN_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(NeuN_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(NeuN_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(NeuN_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(NeuN_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(NeuN_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(NeuN_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(NeuN_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for NeuN-positive cells
NeuN_Wide$CTX_diff <- NeuN_Wide$Sum_Left_CTX / NeuN_Wide$Sum_Right_CTX
NeuN_Wide$CNU_diff <- NeuN_Wide$Sum_Left_CNU / NeuN_Wide$Sum_Right_CNU
NeuN_Wide$Fiber_diff <- NeuN_Wide$Sum_Left_Fiber / NeuN_Wide$Sum_Right_Fiber
NeuN_Wide$IB_diff <- NeuN_Wide$Sum_Left_IB / NeuN_Wide$Sum_Right_IB
NeuN_Wide$MB_diff <- NeuN_Wide$Sum_Left_MB / NeuN_Wide$Sum_Right_MB


# For Gfap-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Gfap_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Gfap_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Gfap_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Gfap_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Gfap_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Gfap_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Gfap_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Gfap_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Gfap_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$CTX_diff <- Gfap_Wide$Sum_Left_CTX / Gfap_Wide$Sum_Right_CTX
Gfap_Wide$CNU_diff <- Gfap_Wide$Sum_Left_CNU / Gfap_Wide$Sum_Right_CNU
Gfap_Wide$Fiber_diff <- Gfap_Wide$Sum_Left_Fiber / Gfap_Wide$Sum_Right_Fiber
Gfap_Wide$IB_diff <- Gfap_Wide$Sum_Left_IB / Gfap_Wide$Sum_Right_IB
Gfap_Wide$MB_diff <- Gfap_Wide$Sum_Left_MB / Gfap_Wide$Sum_Right_MB


# For Iba1-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Iba1_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Iba1_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Iba1_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Iba1_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Iba1_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Iba1_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Iba1_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Iba1_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Iba1_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$CTX_diff <- Iba1_Wide$Sum_Left_CTX / Iba1_Wide$Sum_Right_CTX
Iba1_Wide$CNU_diff <- Iba1_Wide$Sum_Left_CNU / Iba1_Wide$Sum_Right_CNU
Iba1_Wide$Fiber_diff <- Iba1_Wide$Sum_Left_Fiber / Iba1_Wide$Sum_Right_Fiber
Iba1_Wide$IB_diff <- Iba1_Wide$Sum_Left_IB / Iba1_Wide$Sum_Right_IB
Iba1_Wide$MB_diff <- Iba1_Wide$Sum_Left_MB / Iba1_Wide$Sum_Right_MB
```

Finally, we subset the data sets to calculate an hemispheric ratio. In particular, as fiber tracts in the NeuN-positive cells data set are ikely a result of small deviations in brain alignment due to brain shrinkage or deformation, we eliminated this region for this cell type.

```{r}

# For NeuN-positive cells

## Eliminate 'fiber tracts' form the data set
NeuN_Wide_Clean <- NeuN_Wide %>% select(-contains(c('fiber tracts')))

## Subset and generate summary by hemisphere
NeuN_Regions <- subset(NeuN_Wide_Clean, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff))

## Add column for hemispheric differences
NeuN_Regions$NeuN_Ratio <- rowMeans(NeuN_Regions[,c(3:6)], na.rm = TRUE)


# For Gfap-positive cells

## Subset and generate summary by hemisphere
Gfap_Regions <- subset(Gfap_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Gfap_Regions$Gfap_Ratio <- rowMeans(Gfap_Regions[,c(3:6)], na.rm = TRUE)


# For Iba1-positive cells

## Subset and generate summary by hemisphere
Iba1_Regions <- subset(Iba1_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Iba1_Regions$Iba1_Ratio <- rowMeans(Iba1_Regions[,c(3:6)], na.rm = TRUE)
```

### 3.2 Plot the cell ratios

#### 3.2.1 Plot total cell ratios (ipsilateral/contralateral)

We plot the data to perform a preliminary exploration. First, we create ggplot graph objects to plot the data by hemispheres using Ridges plots. We save the objects in the indicated folder using `ggsave`.

```{r}
#| label: Create figures for total cell ratio
#| include: true
#| warning: false
#| message: false


# For NeuN-positive cells

NeuN_Hemispheres_Ridges <- ggplot(NeuN_Regions, 
                               aes(x = NeuN_Ratio, 
                                   y = DPI, 
                                   group = DPI)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n NeuN+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.2)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = NeuN_Hemispheres_Ridges, "Plots/NeuN_Hemispheres_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For Gfap-positive cells

Gfap_Hemispheres_Ridges <- ggplot(Gfap_Regions, 
                               aes(x = Gfap_Ratio, 
                                   y = DPI, 
                                   group = DPI)) +  
                                                                                          
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.5, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Gfap+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 7), 
                     breaks=seq(0,7,1)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Gfap_Hemispheres_Ridges, "Plots/Gfap_Hemispheres_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For Iba1-positive cells

Iba1_Hemispheres_Ridges <- ggplot(Iba1_Regions, 
                               aes(x = Iba1_Ratio, 
                                   y = DPI, 
                                   group = DPI)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Iba1+ reactive cells (Ipsilateral / Contralateral) ",
                     limits=c(-2, 15), 
                     breaks=seq(0,15,2)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Iba1_Hemispheres_Ridges, "Plots/Iba1_Hemispheres_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")
```

Next, we plot the objects

```{r}
#| label: plot figures for total cell ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Hemispheres_Ridges, Gfap_Hemispheres_Ridges, Iba1_Hemispheres_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

#### 3.3.2 Plot cell ratios (ipsilateral/contralateral) by brain regions

We can also plot the data considering each brain region. As done previously, we first generate and save the figures.

```{r}
#| label: Create figure for cell ratio per region
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

NeuN_Regions_Long <- subset(NeuN_Regions, select = -c(NeuN_Ratio))
  
NeuN_Regions_Long <-  melt(NeuN_Regions_Long, id.vars = c("MouseId", "DPI"))

names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'variable'] <- 'Region'
names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'value'] <- 'Ratio'


NeuN_Regions_Long$Region <- factor(NeuN_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff"))


NeuN_Regions_Long_sumrepdat <- summarySE(NeuN_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

NeuN_Regions_Rain <- ggplot(NeuN_Regions_Long, 
                               aes(x = Region, 
                                   y = Ratio,
                                   fill = DPI)) +
  
  geom_flat_violin(aes(fill = DPI),
                   position = position_nudge(x = 0.1, y = 0), 
                   adjust = 2, 
                   trim = FALSE, 
                   alpha = .5, 
                   colour = "black")+
  
  geom_point(aes(x = as.numeric(Region)-0.15, 
                 y = Ratio, 
                 colour = DPI),
             position = position_jitter(width = 0.12),
             size = 3,
             alpha = 0.5)+

  
  geom_point(data = NeuN_Regions_Long_sumrepdat, 
             aes(x = as.numeric(Region), 
                 y = Ratio_mean, 
                 color = DPI),
             size = 5,
             shape = 18) +
  
  geom_errorbar(data = NeuN_Regions_Long_sumrepdat, 
                aes(x = as.numeric(Region), 
                    y = Ratio_mean, 
                    group = Region, 
                    colour = DPI, 
                    ymin = Ratio_mean-sd, 
                    ymax = Ratio_mean+sd,),
                size = 0.8,
                width = 0.2)+
  
  scale_x_discrete(name= " Brain Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  scale_y_continuous(name="\n NeuN+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 2), 
                     breaks=seq(0,2,0.5)) +
  
  
  scale_fill_viridis_d() +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="top",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)
  )  +
  
  coord_flip()

ggsave("Plots/NeuN_Regions_Rain.png", width = 16, height = 12, units = "cm")


# For Gfap-positive cells

Gfap_Regions_Long <- subset(Gfap_Regions, select = -c(Gfap_Ratio))
  
Gfap_Regions_Long <-  melt(Gfap_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'variable'] <- 'Region'
names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'value'] <- 'Ratio'


Gfap_Regions_Long$Region <- factor(Gfap_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Gfap_Regions_Long_sumrepdat <- summarySE(Gfap_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

Gfap_Regions_Rain <- ggplot(Gfap_Regions_Long, 
                               aes(x = Region, 
                                   y = Ratio,
                                   fill = DPI)) +
  
  geom_flat_violin(aes(fill = DPI),
                   position = position_nudge(x = 0.1, y = 0), 
                   adjust = 2, 
                   trim = FALSE, 
                   alpha = .5, 
                   colour = "black")+
  
  geom_point(aes(x = as.numeric(Region)-0.15, 
                 y = Ratio, 
                 colour = DPI),
             position = position_jitter(width = 0.12),
             size = 3,
             alpha = 0.5)+

  
  geom_point(data = Gfap_Regions_Long_sumrepdat, 
             aes(x = as.numeric(Region), 
                 y = Ratio_mean, 
                 color = DPI),
             size = 5,
             shape = 18) +
  
  geom_errorbar(data = Gfap_Regions_Long_sumrepdat, 
                aes(x = as.numeric(Region), 
                    y = Ratio_mean, 
                    group = Region, 
                    colour = DPI, 
                    ymin = Ratio_mean-sd, 
                    ymax = Ratio_mean+sd,),
                size = 0.8,
                width = 0.2)+
  
  scale_x_discrete(name= " Brain Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  scale_y_continuous(name="\n Gfap+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 12), 
                     breaks=seq(0,12,2)) +
  
  
  scale_fill_viridis_d() +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="top",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)
  )  +
  
  coord_flip()

ggsave("Plots/Gfap_Regions_Rain.png", width = 16, height = 12, units = "cm")


# For Iba1-positive cells

Iba1_Regions_Long <- subset(Iba1_Regions, select = -c(Iba1_Ratio))
  
Iba1_Regions_Long <-  melt(Iba1_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'variable'] <- 'Region'
names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'value'] <- 'Ratio'


Iba1_Regions_Long$Region <- factor(Iba1_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Iba1_Regions_Long_sumrepdat <- summarySE(Iba1_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

Iba1_Regions_Rain <- ggplot(Iba1_Regions_Long, 
                               aes(x = Region, 
                                   y = Ratio,
                                   fill = DPI)) +
  
  geom_flat_violin(aes(fill = DPI),
                   position = position_nudge(x = 0.1, y = 0), 
                   adjust = 2, 
                   trim = FALSE, 
                   alpha = .5, 
                   colour = "black")+
  
  geom_point(aes(x = as.numeric(Region)-0.15, 
                 y = Ratio, 
                 colour = DPI),
             position = position_jitter(width = 0.12),
             size = 3,
             alpha = 0.5)+

  
  geom_point(data = Iba1_Regions_Long_sumrepdat, 
             aes(x = as.numeric(Region), 
                 y = Ratio_mean, 
                 color = DPI),
             size = 5,
             shape = 18) +
  
  geom_errorbar(data = Iba1_Regions_Long_sumrepdat, 
                aes(x = as.numeric(Region), 
                    y = Ratio_mean, 
                    group = Region, 
                    colour = DPI, 
                    ymin = Ratio_mean-sd, 
                    ymax = Ratio_mean+sd,),
                size = 0.8,
                width = 0.2)+
  
  scale_x_discrete(name= " Brain Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  scale_y_continuous(name="\n Iba1+ cells (Ipsilateral / Contralateral) ",
                     limits=c(-2, 30), 
                     breaks=seq(0,30,5)) +
                 
  
  
  scale_fill_viridis_d() +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="top",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)
  )  +
  
  coord_flip()

ggsave("Plots/Iba1_Regions_Rain.png", width = 16, height = 12, units = "cm")

```

We plot the figures:

```{r}
#| label: plot by brain region
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


ggarrange(NeuN_Regions_Rain, Gfap_Regions_Rain, Iba1_Regions_Rain + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)

```

### 3.3 Bayesian modeling of cell ratios

We employed the `brms` package [@bÃ¼rkner2017; @bÃ¼rkner2018; @brms]to perform Bayesian regression. We established three different models for scientific inference of cell ratios for each cell type. First of all, we established a model (\_Mdl1) regressing just on days post ischemia (DPI). In all the cases, we added 0 on the left-hand to avoid the calculation of a general intercept and obtain estimates for each DPI. The \_Mdl2 models are regressions for heteroskedasticity, allowing the mean and standard deviation be dependent on each DPI. Finally, we propose \_Mdl3 models to examine whether the calculations by brain regions contribute to a better estimation of cell rates. Given the expected heterogeneity in the data due to variations in infarct size and neurological recovery, all the models were fitted with a student distribution (robust regression) to reduce the impact of extreme data (outliers). Also, we limit the exploration of the parameter space by the Markov chain Monte Carlo algorithm using the same user-defined weak informative priors in models 1 and 2 for each cell type, considering the current knowledge of neuronal loss and glial reactivity. Conversely, the third model for each cell type was fitted with default `brms` weak informative priors.

#### 3.3.1 Set formulas and priors

We set the model formula and priors for all cell types with the same seed (8807) to allow reproducibility.

```{r}
#| label: set formulas and priors for cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

# For NeuN-positive cells

## Set model 1 (_Mdl1) formula 
NeuN_Ratio_Mdl1 <- bf(NeuN_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models
NeuN_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 0.3), class = b, coef = DPI0D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI5D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI15D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI30D)
                      
                      )
## Set model 2 (_Mdl2) formula 
NeuN_Ratio_Mdl2 <- bf(NeuN_Ratio ~ 0 + DPI, sigma ~ 0 + DPI) 

## Set model 3 (_Mdl3) formula   
NeuN_Ratio_Mdl3 <- bf(Ratio ~ 0 + Region:DPI, sigma ~ 0 + Region:DPI) 


# For Gfap-positive cells

## Set model 1 (_Mdl1) formula 
Gfap_Ratio_Mdl1 <- bf(Gfap_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models  
Gfap_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 2), class = b, coef = DPI0D),
                      prior(student_t(3, 3, 3), class = b, coef =  DPI5D),
                      prior(student_t(3, 3, 3), class = b, coef =  DPI15D),
                      prior(student_t(3, 3, 3), class = b, coef =  DPI30D))
                                            

## Set model 2 (_Mdl2) formula 
Gfap_Ratio_Mdl2 <- bf(Gfap_Ratio ~ 0 + DPI, sigma ~ 0 + DPI) 

## Set model 3 (_Mdl3) formula 
Gfap_Ratio_Mdl3 <- bf(Ratio ~ 0 + Region:DPI, sigma ~ 0 + Region:DPI)


# For Iba1-positive cells

## Set model 1 (_Mdl1) formula 
Iba1_Ratio_Mdl1 <- bf(Iba1_Ratio ~ 0 + DPI) 
                                                   
## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models 
Iba1_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 2), class = b, coef = DPI0D),
                      prior(student_t(3, 5, 5), class = b, coef =  DPI5D),
                      prior(student_t(3, 5, 5), class = b, coef =  DPI15D),
                      prior(student_t(3, 5, 5), class = b, coef =  DPI30D))
                      
                     
## Set model 1 (_Mdl2) formula 
Iba1_Ratio_Mdl2 <- bf(Iba1_Ratio ~ 0 + DPI, sigma ~ 0 + DPI) 

## Set model 3 (_Mdl3) formula 
Iba1_Ratio_Mdl3 <- bf(Ratio ~ 0 + Region:DPI, sigma ~ 0 + Region:DPI) 
```

#### 3.3.2 Fit models for NeuN

We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. To reduce computation time during subsequent code executions, we employed the argument `file` to generate an .rds containing the model. If refitting is required, erase the .rds file and erase `file_refit` line. Following model fitting, we used the `add_criterion` funtion to incorporate Leave-one-out cross-validation (LOO) to perform model comparison in later stages. The same considerations apply for Gfap and Iba1.

```{r}
#| label: Fit models for NeuN cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# Fit model 1
NeuN_Ratio_Fit1 <- brm(data = NeuN_Regions,
                          family = student,
                          formula = NeuN_Ratio_Mdl1,
                          prior = NeuN_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/NeuN_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
NeuN_Ratio_Fit1 <- add_criterion(NeuN_Ratio_Fit1, "loo")

# Fit model 2
NeuN_Ratio_Fit2 <- brm(data = NeuN_Regions,
                          family = student,
                          formula = NeuN_Ratio_Mdl2,
                          prior = NeuN_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/NeuN_CellRatio_Fit2.rds",
                          file_refit = "never")

# Add loo for model comparison
NeuN_Ratio_Fit2 <- add_criterion(NeuN_Ratio_Fit2, "loo")

   
# Fit model 2
NeuN_Ratio_Fit3 <- brm(data = NeuN_Regions_Long,
                          family = student,
                          formula = NeuN_Ratio_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/NeuN_CellRatio_Fit3.rds",
                          file_refit = "never")

# Add loo for model comparison
NeuN_Ratio_Fit3 <- add_criterion(NeuN_Ratio_Fit3, "loo")

```

#### 3.3.3 Fit models for Gfap

```{r}
#| label: Fit models for Gfap cells ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# Fit model 1
Gfap_Ratio_Fit1 <- brm(data = Gfap_Regions,
                          family = student,
                          formula = Gfap_Ratio_Mdl1,
                          prior = Gfap_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Gfap_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Gfap_Ratio_Fit1 <- add_criterion(Gfap_Ratio_Fit1, "loo")

# Fit model 2
Gfap_Ratio_Fit2 <- brm(data = Gfap_Regions,
                          family = student,
                          formula = Gfap_Ratio_Mdl2,
                          prior = Gfap_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Gfap_CellRatio_Fit2.rds",
                          file_refit = "never")

# Add loo for model comparison
Gfap_Ratio_Fit2 <- add_criterion(Gfap_Ratio_Fit2, "loo")


# Fit model 3
Gfap_Ratio_Fit3 <- brm(data = Gfap_Regions_Long,
                          family = student,
                          formula = Gfap_Ratio_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Gfap_CellRatio_Fit3.rds",
                          file_refit = "never")

# Add loo for model comparison
Gfap_Ratio_Fit3 <- add_criterion(Gfap_Ratio_Fit3, "loo")

```

#### 3.3.4 Fit models for Iba1

```{r}
#| label: Fit models for Iba1 cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Fit model 1
Iba1_Ratio_Fit1 <- brm(data = Iba1_Regions,
                          family = student,
                          formula = Iba1_Ratio_Mdl1,
                          prior = Iba1_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Iba1_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Iba1_Ratio_Fit1 <- add_criterion(Iba1_Ratio_Fit1, "loo")


# Fit model 2
Iba1_Ratio_Fit2 <- brm(data = Iba1_Regions,
                          family = student,
                          formula = Iba1_Ratio_Mdl2,
                          prior = Iba1_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Iba1_CellRatio_Fit2.rds",
                          file_refit = "never")

# Add loo for model comparison
Iba1_Ratio_Fit2 <- add_criterion(Iba1_Ratio_Fit2, "loo")


# Fit model 3
Iba1_Ratio_Fit3 <- brm(data = Iba1_Regions_Long,
                          family = student,
                          formula = Iba1_Ratio_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Iba1_CellRatio_Fit3.rds",
                          file_refit = "never")

# Add loo for model comparison
Iba1_Ratio_Fit3 <- add_criterion(Iba1_Ratio_Fit3, "loo")

save.image("D:/Research/Project_GlialTopology/3.DataAnalysis/Exp2-Gfap,NeuN,Iba1/.RData")
```

### 3.4 Analyse model results for cell ratios

#### 3.4.1 Model comparison

We performed model comparison by Leave-one-out cross-validation (LOO) method [@vehtari2016]to estimate point wise out-of-sample prediction accuracy in our fitted Bayesian models. Using the `loo` function we obtained the the coefficient for prediction accuracy "elpd_loo". Additionally, we calculated the difference between models comprising the same number of observations (models 1 and 2) employing the `loo_compare` function.

```{r}
#| label: Model comparison for cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false

# For NeuN_Ratio models
NeuN_Ratio_Fit1_loo <- loo(NeuN_Ratio_Fit1)
NeuN_Ratio_Fit2_loo <- loo(NeuN_Ratio_Fit2)
NeuN_Ratio_Fit3_loo <- loo(NeuN_Ratio_Fit3)

# For Gfap_Ratio models
Gfap_Ratio_Fit1_loo <- loo(Gfap_Ratio_Fit1)
Gfap_Ratio_Fit2_loo <- loo(Gfap_Ratio_Fit2)
Gfap_Ratio_Fit3_loo <- loo(Gfap_Ratio_Fit3)

# For Iba1_Ratio models
Iba1_Ratio_Fit1_loo <- loo(Iba1_Ratio_Fit1)
Iba1_Ratio_Fit2_loo <- loo(Iba1_Ratio_Fit2)
Iba1_Ratio_Fit3_loo <- loo(Iba1_Ratio_Fit3)
```

We print loo estimates for Gfap-positive cells as an example

```{r}
#| label: Plot loo for cell ratios
#| include: true
#| warning: false
#| message: false

Gfap_Ratio_Fit1_loo
Gfap_Ratio_Fit2_loo
Gfap_Ratio_Fit3_loo
```

We print the comparisons between models 1 and 2

```{r}
#| label: Plot loo comparison for cells ratios
#| include: true
#| warning: false
#| message: false

loo_compare(NeuN_Ratio_Fit1, NeuN_Ratio_Fit2)
loo_compare(Gfap_Ratio_Fit1, Gfap_Ratio_Fit2)
loo_compare(Iba1_Ratio_Fit1, Iba1_Ratio_Fit2)
```

The results indicate that models with heteroskedasticity have a better prediction accuracy for Gfap and Iba1. This is expected given the marked changes in glial numbers during the time course of ischemia compared to control (sham) animals. Although the case is not the same for NeuN-positive cells, we consider this aa valid rationale to perform statistical inference on the heteroskedasticity models (\_Mdl2)

#### 3.4.2 Summary of model results

We print the summary for *Mdl2* of each cell type to appreciate the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **figure 2** of of the research article.

```{r}
#| label: Print model summary for cell ratios 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuN_Ratio_Fit2)
summary(Gfap_Ratio_Fit2)
summary(Iba1_Ratio_Fit2)
```

Then, we save the summary tables in .doc files for further use using the *`tab`*`_model` function from the `sjPlot` package.

```{r}
#| label: Save summary results for cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(NeuN_Ratio_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/NeuN_Ratio_Fit2.doc")

tab_model(Gfap_Ratio_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Gfap_Ratio_Fit2.doc")

tab_model(Iba1_Ratio_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Iba1_Ratio_Fit2.doc")
```

#### 3.4.3 Posterior predictive checks

We performed posterior predictive checks using the `pp_check` function to evaluate major deviations in the predictions considering the actual data. The results denote no severe deviations from the observed data.

```{r}
#| label: plot posterior predictive checks for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

color_scheme_set("darkgray")

pp_check(NeuN_Ratio_Fit2, type = "dens_overlay")
pp_check(Gfap_Ratio_Fit2, type = "dens_overlay")
pp_check(Iba1_Ratio_Fit2, type = "dens_overlay")
```

#### 3 4.4 Calculate contrast between DPI

We compute the contrast between the estimates of different time points for each cell type using the `emmeans` package [@emmeans]. Please not tht this output is only useful for plotting purposes. The estimated diferences between time points of interest are estimated using the `hyphotesis` function in the next segment.

```{r}
#| label: Calculate cell ratios contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For NeuN cell ratios
NeuN_Ratio_Contrast <- NeuN_Ratio_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Gfap cell ratios
Gfap_Ratio_Contrast <- Gfap_Ratio_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Iba1 cell ratios
Iba1_Ratio_Contrast <- Iba1_Ratio_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)
```

#### 3.4.5 Bayesian hypothesis testing for cell ratios

We employ the `hyphotesis` function from `brms` [@brms-2]to obtain estimated differences and their uncertainty between time points of interest. Also, using the posterior distribution, we calculate the probability the estimated difference fall within the (Inside Variance Region) (**IVR**) derived from sigma. The output is described in the results section when pertinent. The same consideration apply for Gfap and Iba-positive cells.

##### 3.4.5.1 For NeuN ratios

```{r}
#| label: Hypotheis testing for NeuN ratio
#| include: true
#| warning: false
#| message: false
#| cache: true

# We convert the fited model into a data frame to perform column-based calculations
NeuN_Ratio_Fit2_DT <- as.data.frame(NeuN_Ratio_Fit2)

# We obtain the estimates for the hypothesis 15 DPI is minor than 5 DPI
NeuN_Ratio_hyp1 <- hypothesis(NeuN_Ratio_Fit2, "DPI15D <
              DPI5D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 15DPI -5DPI falling into the IVR (0.11 for NeuN ratio)
NeuN_Ratio_Contrast_15_5 <- NeuN_Ratio_Contrast[(NeuN_Ratio_Contrast$contrast=="15D - 5D"),]

# We obtain the estimates for the hypothesis 30DPI is major than 15DPI
NeuN_Ratio_hyp2 <- hypothesis(NeuN_Ratio_Fit2, "DPI30D >
              DPI15D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 30DPI -15DPI falling into the IVR (0.11 for NeuN ratio)
NeuN_Ratio_Contrast_30_15 <- NeuN_Ratio_Contrast[(NeuN_Ratio_Contrast$contrast=="30D - 15D"),]


# Results for hypothesis 1
NeuN_Ratio_hyp1
paste("The probability within the IVR for 15D < 5D is:", sum(NeuN_Ratio_Contrast_15_5$.value < -0.11)/100 ) 

# Results for hypothesis 2
NeuN_Ratio_hyp2
paste("The probability within the IVR for 30D < 15D is:", sum(NeuN_Ratio_Contrast_30_15$.value < 0.11)/100)  




```

##### 3.4.5.2 For Gfap ratios

```{r}
#| label: Hypotheis testing for Gfap ratio
#| include: true
#| warning: false
#| message: false
#| cache: true

# We convert the fited model into a data frame to perform column-based calculations
Gfap_Ratio_Fit2_DT <- as.data.frame(Gfap_Ratio_Fit2)

# We obtain the estimates for the hypothesis 15 DPI is major than 5 DPI
Gfap_Ratio_hyp1 <- hypothesis(Gfap_Ratio_Fit2, "DPI15D >
              DPI5D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 15DPI -5DPI falling into the IVR (0.46 for Gfap ratio)
Gfap_Ratio_Contrast_15_5 <- Gfap_Ratio_Contrast[(Gfap_Ratio_Contrast$contrast=="15D - 5D"),]

# We obtain the estimates for the hypothesis 30DPI is minor than 15DPI
Gfap_Ratio_hyp2 <- hypothesis(Gfap_Ratio_Fit1, "DPI30D <
              DPI15D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 30DPI -15DPI falling into the IVR (0.11 for NeuN ratio)
Gfap_Ratio_Contrast_30_15 <- Gfap_Ratio_Contrast[(Gfap_Ratio_Contrast$contrast=="30D - 15D"),]
 


# Results for hypothesis 1
Gfap_Ratio_hyp1
paste("The probability within the IVR for 15D > 5D is:", sum(Gfap_Ratio_Contrast_15_5$.value < 0.46)/100) 

# Results for hypothesis 2
Gfap_Ratio_hyp2
paste("The probability within the IVR for 30D < 15D is:", sum(Gfap_Ratio_Contrast_30_15$.value > -0.46)/100) 

```

##### 3.4.5.3 For Iba1 ratios

```{r}
#| label: Hypotheis testing for Iba1 ratio
#| include: true
#| warning: false
#| message: false
#| cache: true

# We convert the fited model into a data frame to perform column-based calculations
Iba1_Ratio_Fit2_DT <- as.data.frame(Iba1_Ratio_Fit2)

# We obtain the estimates for the hypothesis 15 DPI is major than 5 DPI
Iba1_Ratio_hyp1 <- hypothesis(Iba1_Ratio_Fit2, "DPI15D >
              DPI5D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 15DPI-5DPI falling into the IVR (2.24 for Iba1 ratio)
Iba1_Ratio_Contrast_15_5 <- Iba1_Ratio_Contrast[(Iba1_Ratio_Contrast$contrast=="15D - 5D"),]


# We obtain the estimates for the hypothesis 15 DPI is minor than 5 DPI
Iba1_Ratio_hyp2 <- hypothesis(Iba1_Ratio_Fit2, "DPI30D <
              DPI15D",
              class = "b",
              seed = 8807)

# We obtain the probability of the contrast 15DPI-5DPI falling into the IVR (2.24 for Iba1 ratio)
Iba1_Ratio_Contrast_30_15 <- Iba1_Ratio_Contrast[(Iba1_Ratio_Contrast$contrast=="30D - 15D"),]
  


# Results for hypothesis 1
Iba1_Ratio_hyp1 
paste("The probability within the IVR for 15D > 5D is:", sum(Iba1_Ratio_Contrast_15_5$.value < 2.24)/100)  

# Results for hypothesis 2
Iba1_Ratio_hyp2
paste("The probability within the IVR for 30D < 15D is:", sum(Iba1_Ratio_Contrast_30_15$.value > -2.24)/100)
```

### 3.5 Visualize estimates and uncertainty for cell ratios

#### 3.5.1 Plot estimates and uncertainty per DPI

We generated a composed graph for each cell type. The main graph shows the distribution of the mean of the posterior (0.66, 0.95) and posterior predictions (0.5, 0.8, 0.95; blue brewer scale). Black dots represent the observations. The button-attached graph displays the calculated contrast between relevant DPIs. To improve scientific inference we included a parameter named inside variance region (IVR), which comprises the sigma of model number 1. We considered that estimates falling in that region (light blue) are within the expected variation of the data. Composited graphs are created using the `patchwork` package and save in the indicated route.

This plots are depicted in figure 2 of the main text, signing the animals represented in the microscope panels. Also, please note that the refereed intervals are exclusively for visualization process; contrast and scientific inference was made using the whole posterior distribution.

```{r}
#| label: Create composited graphs for cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# For NeuN ratio

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

NeuN_Ratio_Grid = NeuN_Regions %>%
  data_grid(DPI)

NeuN_Ratio_Means = NeuN_Ratio_Grid %>%
  add_epred_draws(NeuN_Ratio_Fit2)

NeuN_Ratio_Preds = NeuN_Ratio_Grid %>%
  add_predicted_draws(NeuN_Ratio_Fit2)

NeuN_Ratio_Graph <- NeuN_Regions %>%
  ggplot(aes(x = NeuN_Ratio, y = DPI)) +
  stat_pointinterval (aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = NeuN_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = NeuN_Ratio_Preds) +
  geom_point(data = NeuN_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="NeuN+ (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.2)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

ggsave(plot = NeuN_Ratio_Graph, "Plots/NeuN_Eye.png", 
       width = 12, 
       height = 12, 
       units = "cm")


NeuN_Ratio_Contrast_Sub <- NeuN_Ratio_Contrast[(NeuN_Ratio_Contrast$contrast=="30D - 15D" | 
                                       NeuN_Ratio_Contrast$contrast=="15D - 5D" | 
                                       NeuN_Ratio_Contrast$contrast=="5D - 0D" ),]

NeuN_Ratio_Contrast_Sub$contrast <- factor(NeuN_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
NeuN_Ratio_Contrast_Fig1 <- NeuN_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.11))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.11, 0.11), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-0.8, 0.8), 
                     breaks=seq(-0.8,0.8,0.2)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

NeuN_Ratio_Patch <- NeuN_Ratio_Graph + plot_spacer() + NeuN_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.5))
  
ggsave(plot = NeuN_Ratio_Patch, "Plots/NeuN_Ratio_Patch.png", width = 16, height = 12, units = "cm")


# For Gfap ratio

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Gfap_Ratio_Grid = Gfap_Regions %>%
  data_grid(DPI)

Gfap_Ratio_Means = Gfap_Ratio_Grid %>%
  add_epred_draws(Gfap_Ratio_Fit2)

Gfap_Ratio_Preds = Gfap_Ratio_Grid %>%
  add_predicted_draws(Gfap_Ratio_Fit2)

Gfap_Ratio_Graph <- Gfap_Regions %>%
  ggplot(aes(x = Gfap_Ratio, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Gfap_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Gfap_Ratio_Preds) +
  geom_point(data = Gfap_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="Gfap+ (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 6), 
                     breaks=seq(0,6,1)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

ggsave(plot = Gfap_Ratio_Graph, "Plots/Gfap_Eye.png", 
       width = 12, 
       height = 12, 
       units = "cm")


Gfap_Ratio_Contrast_Sub <- Gfap_Ratio_Contrast[(Gfap_Ratio_Contrast$contrast=="30D - 15D" | 
                                       Gfap_Ratio_Contrast$contrast=="15D - 5D" | 
                                       Gfap_Ratio_Contrast$contrast=="5D - 0D" ),]

Gfap_Ratio_Contrast_Sub$contrast <- factor(Gfap_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Gfap_Ratio_Contrast_Fig1 <- Gfap_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.46))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.46, 0.46), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-2, 3), 
                     breaks=seq(-2,3,1)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Gfap_Ratio_Patch <- Gfap_Ratio_Graph + plot_spacer() + Gfap_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))
  
ggsave(plot = Gfap_Ratio_Patch, "Plots/Gfap_Ratio_Patch.png", width = 16, height = 12, units = "cm")


# For Iba1 ratio

Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Iba1_Ratio_Grid = Iba1_Regions %>%
  data_grid(DPI)

Iba1_Ratio_Means = Iba1_Ratio_Grid %>%
  add_epred_draws(Iba1_Ratio_Fit2)

Iba1_Ratio_Preds = Iba1_Ratio_Grid %>%
  add_predicted_draws(Iba1_Ratio_Fit2)

Iba1_Ratio_Graph <- Iba1_Regions %>%
  ggplot(aes(x = Iba1_Ratio, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Iba1_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Iba1_Ratio_Preds) +
  geom_point(data = Iba1_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="Iba1+ (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 20), 
                     breaks=seq(0,20,2)) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

ggsave(plot = Iba1_Ratio_Graph, "Plots/Iba1_Eye.png", 
       width = 12, 
       height = 12, 
       units = "cm")

Iba1_Ratio_Contrast_Sub <- Iba1_Ratio_Contrast[(Iba1_Ratio_Contrast$contrast=="30D - 15D" | 
                                       Iba1_Ratio_Contrast$contrast=="15D - 5D" | 
                                       Iba1_Ratio_Contrast$contrast=="5D - 0D" ),]

Iba1_Ratio_Contrast_Sub$contrast <- factor(Iba1_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Iba1_Ratio_Contrast_Fig1 <- Iba1_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 2.24))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-2.24, 2.24), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-10, 10), 
                     breaks=seq(-10,10,2)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Iba1_Ratio_Patch <- Iba1_Ratio_Graph + plot_spacer() + Iba1_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))
  
ggsave(plot = Iba1_Ratio_Patch, "Plots/Iba1_Ratio_Patch.png", width = 16, height = 12, units = "cm")

```

We plot the graphs

```{r}
#| label: Plot composited graphs fro cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Ratio_Patch, Gfap_Ratio_Patch, Iba1_Ratio_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

The graphs generated in this section of the notebook are displayed in figure 2 of the research article as shown in the following thumbnail.

![Figure 2 of the main research article](images/Fig%202-01.png){width="300"}

#### 3.5.2 Plot all contrasts between DPIs

Additionally, the following code can be used to visualize all the contrast performed by `emmeans` (not shown in the article)

```{r}
#| label: Create all contrast graphs for cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


# For NeuN ratio

## We organize the constrats (factors)
NeuN_Ratio_Contrast$contrast <- factor(NeuN_Ratio_Contrast$contrast, levels = c("5D - 0D", "15D - 0D", "30D - 0D", "15D - 5D", "30D - 5D", "30D - 15D")) 


NeuN_Ratio_Contrast_Fig2 <- NeuN_Ratio_Contrast %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.11))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.11, 0.11), linetype = "dashed") +
  
  ylab("Time point contrast") +
  scale_x_continuous(name="\n NeuN ratio (ipsilateral / contralateral)",
                     limits=c(-0.8, 0.8), 
                     breaks=seq(-0.8,0.8,0.2)) +
  
  scale_fill_manual(values = c("gray80", "skyblue")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
       axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="None",
      legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", size=10),
      legend.text = element_text(colour="black", size=10)
      )

ggsave(plot = NeuN_Ratio_Contrast_Fig2 , "Plots/NeuN_Contrast_Full.png", width = 12, height = 12, units = "cm")


# For Gfap ratio

Gfap_Ratio_Contrast$contrast <- factor(Gfap_Ratio_Contrast$contrast, levels = c("5D - 0D", "15D - 0D", "30D - 0D", "15D - 5D", "30D - 5D", "30D - 15D")) 


Gfap_Ratio_Contrast_Fig2 <- Gfap_Ratio_Contrast %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.46))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.46, 0.46), linetype = "dashed") +
  
  ylab("Time point contrast") +
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-2, 4), 
                     breaks=seq(-2,4,1)) +
  
  scale_fill_manual(values = c("gray80", "skyblue")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
       axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="None",
      legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", size=10),
      legend.text = element_text(colour="black", size=10)
      )

ggsave(plot = Gfap_Ratio_Contrast_Fig2 , "Plots/NeuN_Contrast_Full.png", width = 12, height = 12, units = "cm")


# For Iba1 ratio

Iba1_Ratio_Contrast$contrast <- factor(Iba1_Ratio_Contrast$contrast, levels = c("5D - 0D", "15D - 0D", "30D - 0D", "15D - 5D", "30D - 5D", "30D - 15D")) 


Iba1_Ratio_Contrast_Fig2 <- Iba1_Ratio_Contrast %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 2.24))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-2.24, 2.24), linetype = "dashed") +
  
  ylab("Time point contrast") +
  scale_x_continuous(name="\n Iba1 ratio (ipsilateral / contralateral)",
                     limits=c(-10, 10), 
                     breaks=seq(-10,10,2)) +
  
  scale_fill_manual(values = c("gray80", "skyblue")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
       axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="None",
      legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", size=10),
      legend.text = element_text(colour="black", size=10)
      )

ggsave(plot = Iba1_Ratio_Contrast_Fig2 , "Plots/NeuN_Contrast_Full.png", width = 12, height = 12, units = "cm")

```

We plot the full contrast between time points

```{r}
#| label: plot cell ratio full contrast
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Ratio_Contrast_Fig2, Gfap_Ratio_Contrast_Fig2, Iba1_Ratio_Contrast_Fig2 + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

#### 3.5.3 Plot estimates and uncertainty per brain regions

We also plot the estimates and uncertainty of the posterior distribution for the model 3, considering cell ratios per brain region. This material is included in the supplementary figures 3-5.

```{r}
#| label: Create point estimates per brain region for cell ratios
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# For NeuN ratios per brain region

## We order the brain regions (factors)
NeuN_Regions_Long$Region <- factor(NeuN_Regions_Long$Region , levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff")) 

NeuN_Ratio_Regions_Grid = NeuN_Regions_Long %>%
  data_grid(DPI, Region)

NeuN_Ratio_Regions_Means = NeuN_Ratio_Regions_Grid %>%
  add_epred_draws(NeuN_Ratio_Fit3)

NeuN_Ratio_Regions_Preds = NeuN_Ratio_Regions_Grid %>%
  add_predicted_draws(NeuN_Ratio_Fit3)

NeuN_Ratio_Regions_Graph <- NeuN_Regions_Long %>%
  ggplot(aes(x = Ratio, y = Region)) +
  stat_pointinterval(aes(x = .epred), scale = 0.6, position = position_nudge(y = 0.175), data = NeuN_Ratio_Regions_Means) +
  stat_interval(aes(x = .prediction), data = NeuN_Ratio_Regions_Preds) +
  geom_point(data = NeuN_Regions_Long) +
  
  scale_y_discrete(name= " Region ",
                     labels = c("Cortex", "Nuclei", "Midbrain", "Interbrain")) +
  
  scale_x_continuous(name="\n NeuN+ (Ipsilateral / Contralateral) ",
                     limits=c(0, 1.8), 
                     breaks=seq(0,1.8,0.3)) +
  
  scale_color_brewer(name = "Interval") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.93, 0.85),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=12)) +
  
facet_wrap(~ DPI)

ggsave(plot = NeuN_Ratio_Regions_Graph, "Plots/NeuN_Ratio_Regions_Graph.png", 
       width = 20, 
       height = 15, 
       units = "cm")


# For Gfap ratios per brain region

## We order the brain regions (factors)
Gfap_Regions_Long$Region <- factor(Gfap_Regions_Long$Region , levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff", "Fiber_diff")) 

Gfap_Ratio_Regions_Grid = Gfap_Regions_Long %>%
  data_grid(DPI, Region)

Gfap_Ratio_Regions_Means = Gfap_Ratio_Regions_Grid %>%
  add_epred_draws(Gfap_Ratio_Fit3)

Gfap_Ratio_Regions_Preds = Gfap_Ratio_Regions_Grid %>%
  add_predicted_draws(Gfap_Ratio_Fit3)

Gfap_Ratio_Regions_Graph <- Gfap_Regions_Long %>%
  ggplot(aes(x = Ratio, y = Region)) +
  stat_pointinterval(aes(x = .epred), scale = 0.6, position = position_nudge(y = 0.175), data = Gfap_Ratio_Regions_Means) +
  stat_interval(aes(x = .prediction), data = Gfap_Ratio_Regions_Preds) +
  geom_point(data = Gfap_Regions_Long) +
  
  scale_y_discrete(name= " Region ",
                     labels = c("Cortex", "Nuclei", "Midbrain", "Interbrain", "W.matter")) +
  
  scale_x_continuous(name="\n Gfap+ (Ipsilateral / Contralateral) ",
                     limits=c(0, 8), 
                     breaks=seq(0,8,1)) +
  
  scale_color_brewer(name = "Interval") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.93, 0.85),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=12)) +
  
facet_wrap(~ DPI)

ggsave(plot = Gfap_Ratio_Regions_Graph , "Plots/Gfap_Ratio_Regions_Graph.png", 
       width = 20, 
       height = 15, 
       units = "cm")


# For Gfap ratios per brain region

## We order the brain regions (factors)
Iba1_Regions_Long$Region <- factor(Iba1_Regions_Long$Region , levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff", "Fiber_diff")) 

Iba1_Ratio_Regions_Grid = Iba1_Regions_Long %>%
  data_grid(DPI, Region)

Iba1_Ratio_Regions_Means = Iba1_Ratio_Regions_Grid %>%
  add_epred_draws(Iba1_Ratio_Fit2)

Iba1_Ratio_Regions_Preds = Iba1_Ratio_Regions_Grid %>%
  add_predicted_draws(Iba1_Ratio_Fit3)

Iba1_Ratio_Regions_Graph <- Iba1_Regions_Long %>%
  ggplot(aes(x = Ratio, y = Region)) +
  stat_pointinterval(aes(x = .epred), scale = 0.6, position = position_nudge(y = 0.175), data = Iba1_Ratio_Regions_Means) +
  stat_interval(aes(x = .prediction), data = Iba1_Ratio_Regions_Preds) +
  geom_point(data = Iba1_Regions_Long) +
  
  scale_y_discrete(name= " Region ",
                     labels = c("Cortex", "Nuclei", "Midbrain", "Interbrain", "W.matter")) +
  
  scale_x_continuous(name="\n Iba1+ (Ipsilateral / Contralateral) ",
                     limits=c(0, 20), 
                     breaks=seq(0,20,2)) +
  
  scale_color_brewer(name = "Interval") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.93, 0.85),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=12)) +
  
facet_wrap(~ DPI)

ggsave(plot = Iba1_Ratio_Regions_Graph, "Plots/Iba1_Ratio_Regions_Graph.png", 
       width = 20, 
       height = 15, 
       units = "cm")

```

We plot the figures

```{r}
#| label: Plot posterior intervals per region for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Ratio_Regions_Graph, Gfap_Ratio_Regions_Graph, Iba1_Ratio_Regions_Graph + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 4. Analysis of cell intensity (Spatstat)

We converted into point patterns (ppp) the cells detected in QuPath using the `spatstat` R package [@baddeley2005; @baddeley2015; @spatstat]. All the files were processed in the **batch processing script** and the results exported into .csv files loaded in section 1 as `Cells_Intensity_Raw`. Please note that the intensity analysis comprises exclusively brain sections \# 3 (see supplementary table 1 in the research article). However, given the homologous output with cell ratio calculations, this analysis is relegated to supplementary material and displayed in supplementary figures 3-5.

### 4.1 Prepare the dataset

We subset the intensity data set and save the graphs in designated locations.

```{r}
#| label: Subset data set for cell intensity
#| include: true
#| warning: false
#| message: false

# We subset the relevant columns
Cells_Intensity <- subset(Cells_Intensity_Raw, select = -c(X))

# Extract metadata from the image name and rename columns
Cells_Intensity  <- cbind(Cells_Intensity, do.call(rbind , strsplit(Cells_Intensity$Brain, "[_\\.]"))[,3:4])
colnames(Cells_Intensity) <- c("Brain", "Neurons_Intensity", "Astrocytes_Intensity", "Microglia_Intensity", "MouseID", "DPI")

# We subset the relevant columns
Cells_Intensity <- subset(Cells_Intensity, select = c(MouseID, DPI, Neurons_Intensity, Astrocytes_Intensity, Microglia_Intensity))

# And set factors 
Cells_Intensity$DPI <- factor(Cells_Intensity$DPI, levels = c("0D", "5D", "15D", "30D"))
```

### 4.2 Plot the data for initial visualization

We use `geom_density_ridges` to visualize the data set.

```{r}
#| label: Create graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# For NeuN
NeuN_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Neurons_Intensity, 
                                   y = DPI, 
                                   group = DPI)) + 
                                                                                            
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Neuronal intensity ",
                     limits=c(0, 100), 
                     breaks=seq(0,100,10)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = NeuN_Intensity_Ridges, "Plots/NeuN_Intensity_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For Gfap
Gfap_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Astrocytes_Intensity, 
                                   y = DPI, 
                                   group = DPI)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Astrocytes intensity ",
                     limits=c(0, 100), 
                     breaks=seq(0,100,10)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Gfap_Intensity_Ridges, "Plots/Gfap_Intensity_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For iba1
Iba1_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Microglia_Intensity, 
                                   y = DPI, 
                                   group = DPI)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Microglia intensity ",
                     limits=c(0, 100), 
                     breaks=seq(0,100,10)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Iba1_Intensity_Ridges, "Plots/Iba1_Intensity_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")

```

We plot the Graphs

```{r}
#| label: Plot graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Ridges, Gfap_Intensity_Ridges, Iba1_Intensity_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

### 4.3 Bayesian modeling for cell intensity

As done for cell ratios, we employed the `brms` package [@bÃ¼rkner2017; @bÃ¼rkner2018; @brms]to perform Bayesian regression. We run models 1 and 2 as defined in cell ratios. Likewise, we considered student distributions (robust regression) to reduce the impact of possible extreme data (outliers) and used user-defined weak informative priors.

#### 4.4.1 Set formula and priors

We set formulas and priors for each cell type.

```{r}
#| label: Set formulas and priors for cell intensity
#| include: true
#| warning: false
#| message: false

# For NeuN intensity

## Set model 1 (_Mdl1) formula 
NeuN_Intensity_Mdl1 <- bf(Neurons_Intensity ~ 0 + DPI) 
                                                   
## Set model 1 prior (_Mdl1_Prior). The same prior is used for model 2
NeuN_Intensity_Mdl1_Prior <- c(
                      prior(student_t(3, 80, 20), class = b, coef = DPI0D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI5D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI15D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI30D))
                      

## Set model 2 (_Mdl2) formula 
NeuN_Intensity_Mdl2 <- bf(Neurons_Intensity ~ 0 + DPI, sigma ~ 0 + DPI) 


# For Gfap intensity

## Set model 1 (_Mdl1) formula 
Gfap_Intensity_Mdl1 <- bf(Astrocytes_Intensity ~ 0 + DPI) 

Gfap_Intensity_Mdl1_Prior <- c(
                      prior(student_t(3, 10, 20), class = b, coef = DPI0D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI5D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI15D),
                      prior(student_t(3, 50, 20), class = b, coef =  DPI30D)
                      )

## Set model 2 (_Mdl2) formula 
Gfap_Intensity_Mdl2 <- bf(Astrocytes_Intensity ~ 0 + DPI, sigma ~ 0 + DPI) 




# For Iba1 intensity

## Set model 1 (_Mdl1) formula 
Iba1_Intensity_Mdl1 <- bf(Microglia_Intensity ~ 0 + DPI) 
                                                   
## Set model 1 prior (_Mdl1_Prior). The same prior is used for model 2
Iba1_Intensity_Mdl1_Prior <- c(
                      prior(student_t(3, 10, 30), class = b, coef = DPI0D),
                      prior(student_t(3, 50, 30), class = b, coef =  DPI5D),
                      prior(student_t(3, 50, 30), class = b, coef =  DPI15D),
                      prior(student_t(3, 50, 30), class = b, coef =  DPI30D)
                      
                      )

## Set model 2 (_Mdl2) formula 
Iba1_Intensity_Mdl2 <- bf(Microglia_Intensity ~ 0 + DPI, sigma ~ 0 + DPI) 



```

#### 4.4.2 Fit models for NeuN

We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. As exposed for cell ratios, we generated a .rds file containing the model and incorporate Leave-one-out cross-validation (LOO) for model comparison. To re fit, erase the .rds file and `file_refit` line. The same considerations apply for Gfap and Iba1.

```{r}
#| label: Fit models for NeuN intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Fit model 1
NeuN_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = NeuN_Intensity_Mdl1,
                          prior = NeuN_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuN_Intensity_Fit1.rds",
                          file_refit = "never")


# Add loo for model comparison
NeuN_Intensity_Fit1 <- add_criterion(NeuN_Intensity_Fit1, "loo")

# Fit model 2
NeuN_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = NeuN_Intensity_Mdl2,
                          prior = NeuN_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuN_Intensity_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
NeuN_Intensity_Fit2 <- add_criterion(NeuN_Intensity_Fit2, "loo")

```

#### 4.4.3 Fit models for Gfap

```{r}
#| label: Fit models for Gfap Intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Fit model 1
Gfap_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Gfap_Intensity_Mdl1,
                          prior = Gfap_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Gfap_Intensity_Fit1.rds",
                          file_refit = "never")


# Add loo for model comparison
Gfap_Intensity_Fit1 <- add_criterion(Gfap_Intensity_Fit1, "loo")

# Fit model 2
Gfap_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Gfap_Intensity_Mdl2,
                          prior = Gfap_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Gfap_Intensity_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
Gfap_Intensity_Fit2 <- add_criterion(Gfap_Intensity_Fit2, "loo")
```

#### 4.4.4 Fit models for Iba1

```{r}
#| label: Fit models for Iba1 intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Fit model 1
Iba1_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Iba1_Intensity_Mdl1,
                          prior = Iba1_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1_Intensity_Fit1.rds",
                          file_refit = "never")


# Add loo for model comparison
Iba1_Intensity_Fit1 <- add_criterion(Iba1_Intensity_Fit1, "loo")

# Fit model 2
Iba1_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Iba1_Intensity_Mdl2,
                          prior = Iba1_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1_Intensity_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
Iba1_Intensity_Fit2 <- add_criterion(Iba1_Intensity_Fit2, "loo")
```

### 4.4 Analyse model results for cell intensity

#### 4.4.1 Model comparison

As done previously, we performed model comparison with the LOO method

```{r}
#| label: Model comparisons for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false

# For NeuN_Ratio models
NeuN_Intensity_Fit1_loo <- loo(NeuN_Intensity_Fit1)
NeuN_Intensity_Fit2_loo <- loo(NeuN_Intensity_Fit2)

# For Gfap_Intensity models
Gfap_Intensity_Fit1_loo <- loo(Gfap_Intensity_Fit1)
Gfap_Intensity_Fit2_loo <- loo(Gfap_Intensity_Fit2)

# For Iba1_Intensity models
Iba1_Intensity_Fit1_loo <- loo(Iba1_Intensity_Fit1)
Iba1_Intensity_Fit2_loo <- loo(Iba1_Intensity_Fit2)
```

And print the comparison

```{r}
#| label: Plot ratios loo comparison for intensity
#| include: true
#| warning: false
#| message: false

loo_compare(NeuN_Intensity_Fit1, NeuN_Intensity_Fit2)
loo_compare(Gfap_Intensity_Fit1, Gfap_Intensity_Fit2)
loo_compare(Iba1_Intensity_Fit1, Iba1_Intensity_Fit2)
```

Considering the estimates and standard errors, the results indicate both models have similar prediction accuracy. For consistency, we continue exploring heteroskedasticity models (\_Mdl2) as done for cell ratios.

#### 4.4.2 Summary of model results

We print the summary for *Mdl2* to visualize the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 5** of the research article.

```{r}
#| label: Print summary for cell intensity
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuN_Intensity_Fit2)
summary(Gfap_Intensity_Fit2)
summary(Iba1_Intensity_Fit2)
```

We create a .doc files with the main output:

```{r}
#| label: Save summary for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(NeuN_Intensity_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/NeuN_Intensity_Fit2.doc")

tab_model(Gfap_Intensity_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Gfap_Intensity_Fit2.doc")

tab_model(Iba1_Intensity_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Iba1_Intensity_Fit2.doc")
```

#### 4.4.3 Posterior predictive checks

We generate posterior predictive checks to verify major deviance from the observed data

```{r}
#| label: plot posterior predictive checks for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

color_scheme_set("darkgray")
pp_check(NeuN_Intensity_Fit2, type = "dens_overlay")
pp_check(Gfap_Intensity_Fit2, type = "dens_overlay")
pp_check(Iba1_Intensity_Fit2, type = "dens_overlay")
```

The graphical output suggest there are not major deviance in the posterior.

#### 4.4.4 Calculate contrast between DPI for cell ratios

Here we compute the contrast between the estimates of different time points using the `emmeans` package [@emmeans]. Given that results are relegated to supplementary material, we did not perform specific hypothesis testing for this data set.

```{r}
#| label: Calculate contrast for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For NeuN cell ratios
NeuN_Intensity_Contrast <- NeuN_Intensity_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Gfap cell Intensitys
Gfap_Intensity_Contrast <- Gfap_Intensity_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Iba1 cell Intensitys
Iba1_Intensity_Contrast <- Iba1_Intensity_Fit2%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)
```

### 4.5 Visualize estimates and uncertainty for cell ratios

We generate graphs in the same way as done in **section 3.6**. This plots are depicted in supplementary figures 3-5 in the main research article.

```{r}
#| label: Create composited graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false

# For NeuN intensity

Intensity_Grid = Cells_Intensity %>%
  data_grid(DPI)

NeuN_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(NeuN_Intensity_Fit2)

NeuN_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(NeuN_Intensity_Fit2)


Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))


NeuN_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Neurons_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = NeuN_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = NeuN_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Neurons intensity ",
                     position = "top",
                     limits=c(0, 100), 
                     breaks=seq(0,100,20)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 5, hjust = -3.5, vjust = -1) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


NeuN_Intensity_Contrast_Sub <- NeuN_Intensity_Contrast[
  (NeuN_Intensity_Contrast$contrast=="30D - 15D"|
   NeuN_Intensity_Contrast$contrast=="15D - 5D" |
   NeuN_Intensity_Contrast$contrast=="5D - 0D"),]

NeuN_Intensity_Contrast_Sub$contrast <- factor(NeuN_Intensity_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
NeuN_Intensity_Contrast_Graph <- NeuN_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 12.65))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-12.65, 12.65), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-60, 60), 
                     breaks=seq(-60,60, 20)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

NeuN_Intensity_Patch <- NeuN_Intensity_Graph +  
                           plot_spacer() + 
                           NeuN_Intensity_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), 
                           heights = c(1, 0.3))

ggsave(plot = NeuN_Intensity_Patch, 
       "Plots/NeuN_Intensity_Patch.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For Gfap intensity

Gfap_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(Gfap_Intensity_Fit2)

Gfap_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(Gfap_Intensity_Fit2)

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))


# Plot the main graph

Gfap_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Astrocytes_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Gfap_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = Gfap_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Astrocytes intensity ",
                     position = "top",
                     limits=c(0, 100), 
                     breaks=seq(0,100,20)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 5, hjust = -3.5, vjust = -1) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


# Plot the contrast graph

## Define contrast to plot

Gfap_Intensity_Contrast_Sub <- Gfap_Intensity_Contrast[
  (Gfap_Intensity_Contrast$contrast=="30D - 15D"|
   Gfap_Intensity_Contrast$contrast=="15D - 5D" |
   Gfap_Intensity_Contrast$contrast=="5D - 0D"),]

Gfap_Intensity_Contrast_Sub$contrast <- factor(Gfap_Intensity_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
# Plot the graph

Gfap_Intensity_Contrast_Fig <- Gfap_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 8.47))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-8.47, 8.47), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-20, 60), 
                     breaks=seq(-20,60, 20)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Gfap_Intensity_Patch <- Gfap_Intensity_Graph +  
                           plot_spacer() + 
                           Gfap_Intensity_Contrast_Fig + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), 
                           heights = c(1, 0.3))

ggsave(plot = Gfap_Intensity_Patch, 
       "Plots/Gfap_Intensity_Patch.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For Iba1 intensity

Iba1_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(Iba1_Intensity_Fit2)

Iba1_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(Iba1_Intensity_Fit2)


Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))


Iba1_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Microglia_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Iba1_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = Iba1_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Microglia intensity ",
                     position = "top",
                     limits=c(0, 100), 
                     breaks=seq(0,100,20)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 5, hjust = -3.5, vjust = -1) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


# Plot the contrast graph

## Define contrast to plot

Iba1_Intensity_Contrast_Sub <- Iba1_Intensity_Contrast[
  (Iba1_Intensity_Contrast$contrast=="30D - 15D"|
   Iba1_Intensity_Contrast$contrast=="15D - 5D" |
   Iba1_Intensity_Contrast$contrast=="5D - 0D"),]

Iba1_Intensity_Contrast_Sub$contrast <- factor(Iba1_Intensity_Contrast_Sub$contrast, 
                                              levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
# Plot the graph

Iba1_Intensity_Contrast_Graph <- Iba1_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 5.74))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-5.74, 5.74), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-40, 80), 
                     breaks=seq(-40,80, 20)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Iba1_Intensity_Patch <- Iba1_Intensity_Graph +  
                           plot_spacer() + 
                           Iba1_Intensity_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), 
                           heights = c(1, 0.3))

ggsave(plot = Iba1_Intensity_Patch, 
       "Plots/Iba1_Intensity_Patch.png", 
       width = 16, 
       height = 12, 
       units = "cm")
```

And we plot the intensity graphs

```{r}
#| label: Plot composite graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Patch, Gfap_Intensity_Patch, Iba1_Intensity_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

### 4.6 Visualize cell Intensity

We can visualize intensity maps using the functions available in spatstat [@spatstat-2]. Considering that all brains are aligned the the Allen Brain Atla, we generated a single point pattern (ppp) object containing cells from all the animal per time point.

#### 4.6.1 Superimpose points

We used the previously loaded `Point_Patterns_5x` hyperframe containing point patterns for all cells and animals. The `superimpose` functions merge all the point patterns in a single window. Then, the `unmark` function eliminates the object marks identifying each animal. This step is required to operate with spatstat functions that do not accept marked point patterns. We performed the same procedure for each cell type and time point.

```{r}
#| label: Superimpose 5x brains
#| include: true
#| warning: false
#| message: false


# For neurons

Point_Patterns_5x_0D <- subset(Point_Patterns_5x, DPI=="0D", select = 1:10) 
NeuN_Superimposed_5x_0D <- superimpose(Point_Patterns_5x_0D$Neurons) 
NeuN_Superimposed_5x_0D <- unmark(NeuN_Superimposed_5x_0D)

Point_Patterns_5x_5D <- subset(Point_Patterns_5x, DPI=="5D", select = 1:10) 
NeuN_Superimposed_5x_5D <- superimpose(Point_Patterns_5x_5D$Neurons) 
NeuN_Superimposed_5x_5D <- unmark(NeuN_Superimposed_5x_5D)

Point_Patterns_5x_15D <- subset(Point_Patterns_5x, DPI=="15D", select = 1:10) 
NeuN_Superimposed_5x_15D <- superimpose(Point_Patterns_5x_15D$Neurons) 
NeuN_Superimposed_5x_15D <- unmark(NeuN_Superimposed_5x_15D)

Point_Patterns_5x_30D <- subset(Point_Patterns_5x, DPI=="30D", select = 1:10) 
NeuN_Superimposed_5x_30D <- superimpose(Point_Patterns_5x_30D$Neurons) 
NeuN_Superimposed_5x_30D <- unmark(NeuN_Superimposed_5x_30D)


# For astrocytes

Point_Patterns_5x_0D <- subset(Point_Patterns_5x, DPI=="0D", select = 1:10) 
Gfap_Superimposed_5x_0D <- superimpose(Point_Patterns_5x_0D$Astrocytes) 
Gfap_Superimposed_5x_0D <- unmark(Gfap_Superimposed_5x_0D)

Point_Patterns_5x_5D <- subset(Point_Patterns_5x, DPI=="5D", select = 1:10) 
Gfap_Superimposed_5x_5D <- superimpose(Point_Patterns_5x_5D$Astrocytes) 
Gfap_Superimposed_5x_5D <- unmark(Gfap_Superimposed_5x_5D)

Point_Patterns_5x_15D <- subset(Point_Patterns_5x, DPI=="15D", select = 1:10) 
Gfap_Superimposed_5x_15D <- superimpose(Point_Patterns_5x_15D$Astrocytes) 
Gfap_Superimposed_5x_15D <- unmark(Gfap_Superimposed_5x_15D)

Point_Patterns_5x_30D <- subset(Point_Patterns_5x, DPI=="30D", select = 1:10) 
Gfap_Superimposed_5x_30D <- superimpose(Point_Patterns_5x_30D$Astrocytes) 
Gfap_Superimposed_5x_30D <- unmark(Gfap_Superimposed_5x_30D)


# For microglia

Point_Patterns_5x_0D <- subset(Point_Patterns_5x, DPI=="0D", select = 1:10) 
Iba1_Superimposed_5x_0D <- superimpose(Point_Patterns_5x_0D$Microglia) 
Iba1_Superimposed_5x_0D <- unmark(Iba1_Superimposed_5x_0D)

Point_Patterns_5x_5D <- subset(Point_Patterns_5x, DPI=="5D", select = 1:10) 
Iba1_Superimposed_5x_5D <- superimpose(Point_Patterns_5x_5D$Microglia) 
Iba1_Superimposed_5x_5D <- unmark(Iba1_Superimposed_5x_5D)

Point_Patterns_5x_15D <- subset(Point_Patterns_5x, DPI=="15D", select = 1:10) 
Iba1_Superimposed_5x_15D <- superimpose(Point_Patterns_5x_15D$Microglia) 
Iba1_Superimposed_5x_15D <- unmark(Iba1_Superimposed_5x_15D)

Point_Patterns_5x_30D <- subset(Point_Patterns_5x, DPI=="30D", select = 1:10) 
Iba1_Superimposed_5x_30D <- superimpose(Point_Patterns_5x_30D$Microglia) 
Iba1_Superimposed_5x_30D <- unmark(Iba1_Superimposed_5x_30D)
```

#### 4.6.2 Compute density kernel (intensity)

We use the `density` function from `spatstat` to obtain a nonparametric density kernel [@baddeley2015, pp.168-174] to retrieve cell intensity in the observation window. The bandwidth (sigma) was manually choose and consistently used for each cell type.

```{r}
#| label: Calculate density kernel for brains at 5x
#| include: true
#| warning: false
#| message: false

NeuN_Intensity_0D <- density(NeuN_Superimposed_5x_0D, sigma=0.2, main = "Neurons 0D")
NeuN_Intensity_5D <- density(NeuN_Superimposed_5x_5D, sigma=0.2, main = "Neurons 5D")
NeuN_Intensity_15D <- density(NeuN_Superimposed_5x_15D, sigma=0.2, main = "Neurons 15D")
NeuN_Intensity_30D <- density(NeuN_Superimposed_5x_30D, sigma=0.2, main = "Neurons 30D")


Gfap_Intensity_0D <- density(Gfap_Superimposed_5x_0D, sigma=0.2, main = "Astrocytes 0D")
Gfap_Intensity_5D <- density(Gfap_Superimposed_5x_5D, sigma=0.2, main = "Astrocytes 5D")
Gfap_Intensity_15D <- density(Gfap_Superimposed_5x_15D, sigma=0.2, main = "Astrocytes 15D")
Gfap_Intensity_30D <- density(Gfap_Superimposed_5x_30D, sigma=0.2, main = "Astrocytes 30D")

Iba1_Intensity_0D <- density(Iba1_Superimposed_5x_0D, sigma=0.2, main = "Microglia 0D")
Iba1_Intensity_5D <- density(Iba1_Superimposed_5x_5D, sigma=0.2, main = "Microglia 5D")
Iba1_Intensity_15D <- density(Iba1_Superimposed_5x_15D, sigma=0.2, main = "Microglia 15D")
Iba1_Intensity_30D <- density(Iba1_Superimposed_5x_30D, sigma=0.2, main = "Microglia 30D")
```

#### 4.6.3 Plot density kernel (intensity)

```{r}
#| label: Plot density kernel for brains at 5x
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1

# We generate a color map for the plots
Cells_Intensity_colourmap <- colourmap(topo.colors(256), range = c(0, 600))

# NeuN intensity
par(mfrow = c(1,4), mar=c(2,2,2,2), oma=c(1,1,1,1))
plot(NeuN_Intensity_0D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Neurons 0D",line=-7, cex.main = 1.5)

plot(NeuN_Intensity_5D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Neurons 5D",line=-7, cex.main = 1.5)

plot(NeuN_Intensity_15D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Neurons 15D",line=-7, cex.main = 1.5)

plot(NeuN_Intensity_30D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Neurons 30D",line=-7, cex.main = 1.5)

# Gfap intensity
par(mfrow = c(1,4), mar=c(2,2,2,2), oma=c(1,1,1,1))
plot(Gfap_Intensity_0D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Astrocytes 0D",line=-7, cex.main = 1.5)

plot(Gfap_Intensity_5D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Astrocytes 5D",line=-7, cex.main = 1.5)

plot(Gfap_Intensity_15D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Astrocytes 15D",line=-7, cex.main = 1.5)

plot(Gfap_Intensity_30D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Astrocytes 30D",line=-7, cex.main = 1.5)

# Iba1 intensity
par(mfrow = c(1,4), mar=c(2,2,2,2), oma=c(1,1,1,1))
plot(Iba1_Intensity_0D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Microglia 0D",line=-7, cex.main = 1.5)

plot(Iba1_Intensity_5D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Microglia 5D",line=-7, cex.main = 1.5)

plot(Iba1_Intensity_15D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Microglia 15D",line=-7, cex.main = 1.5)

plot(Iba1_Intensity_30D , equal.ribbon = TRUE, col = Cells_Intensity_colourmap, main = "", cex = 10)
title("Microglia 30D",line=-7, cex.main = 1.5)

```

Graphs for posterior densities and density kernels map are displayed in supplementary figures 3-5 as shown below.

::: {layout-ncol="3"}
![Supplementary figure 3](images/SupplementaryFig3.png){width="300"}

![Supplementary figure 4](images/SupplementaryFig4.png){width="300"}

![Supplementary figure 5](images/SupplementaryFig5.png){width="300"}
:::

## 5. Analysis of cell covariance based on tessellations (spatstat)

In the **batch processing script**, we tessellated NeuN and Iba1 images based on the density kernel [@baddeley2015, pp.177-178] to calculate the covariance between cells types (NeuN-Gfap, NeuN-Iba, Iba1-Gfap). We defined regions of low, mid and high intensity for NeuN and Iba1 and quantified the number of glia in each region. The results were saved in a .csv file and loaded under the name of `Cells_Tessellation_Raw`. Here, we performed scientific inference for cell covariance using the described data.

### 5.1 Prepare the dataset

We rename and subset the relevant columns for the analysis of cell covariance. We performed the same operations in all the data sets. Columns names respond to AN1 (Astrocytes in low intensity neuronal areas), AN2 (Astrocytes in mid intensity neuronal areas), and AN3 (Astrocytes in high intensity neuronal areas). The same applies for microglia in neuronal areas (MN) and Astrocytes in microglial areas (AM).

```{r}
#| label: Subset relevant columns for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false

# Prepare the Cells_Tessellation data set 

## We subset the relevant columns (cell number)
Cells_Tessellation <- subset(Cells_Tessellation_Raw, select = -c(X))

## And extract metadata from the image name
Cells_Tessellation  <- cbind(Cells_Tessellation, do.call(rbind , strsplit(Cells_Tessellation$Brain, "[_\\.]"))[,3:4])

## We Rename the relevant columns 
colnames(Cells_Tessellation) <- c("Brain", "AN1", "AN2", "AN3", "MN1", "MN2", "MN3", "AM1", "AM2", "AM3", "MouseID", "DPI")

## Perform a new subset
Cells_Tessellation <- subset(Cells_Tessellation, select = c(MouseID, DPI, AN1, AN2, AN3, MN1, MN2, MN3, AM1, AM2, AM3))

## And organize the DPI factors 
Cells_Tessellation$DPI <- factor(Cells_Tessellation $DPI, levels = c("0D", "5D", "15D", "30D"))


# For astrocytes in neuronal areas

## Subset data for astrocytes in neuronal areas
Astrocytes_Neurons_Tessellation <-subset(Cells_Tessellation, select = c(MouseID, DPI, AN1, AN2, AN3))

## Transform the data set to long format
Astrocytes_Neurons_Tessellation <- melt(Astrocytes_Neurons_Tessellation, id.vars = c("MouseID", "DPI"))

## Set new column names
colnames(Astrocytes_Neurons_Tessellation) <- c("MouseID", "DPI", "NeuronalDensity", "Astrocytes")

## Set factor levels
levels(Astrocytes_Neurons_Tessellation$NeuronalDensity) <- list(Low  = "AN1", Mid = "AN2", High = "AN3")

Astrocytes_Neurons_Tessellation$NeuronalDensity <- factor(Astrocytes_Neurons_Tessellation$NeuronalDensity, ordered = TRUE, levels = c("Low", "Mid", "High"))


# For Microglia in neuronal areas

Microglia_Neurons_Tessellation <-subset(Cells_Tessellation, select = c(MouseID, DPI, MN1, MN2, MN3))

Microglia_Neurons_Tessellation <- melt(Microglia_Neurons_Tessellation, id.vars = c("MouseID", "DPI"))

colnames(Microglia_Neurons_Tessellation) <- c("MouseID", "DPI", "NeuronalDensity", "Microglia")

levels(Microglia_Neurons_Tessellation$NeuronalDensity) <- list(Low  = "MN1", Mid = "MN2", High = "MN3")

Microglia_Neurons_Tessellation$NeuronalDensity <- factor(Microglia_Neurons_Tessellation$NeuronalDensity, ordered = TRUE, levels = c("Low", "Mid", "High"))



# Astrocytes in microglial areas

Astrocytes_Microglia_Tessellation <-subset(Cells_Tessellation, select = c(MouseID, DPI, AM1, AM2, AM3))

Astrocytes_Microglia_Tessellation <- melt(Astrocytes_Microglia_Tessellation, id.vars = c("MouseID", "DPI"))

## We eliminate the 0 DPI given that this point does not exhibit a considerable number of reactive glia or reactive glia-like cells
Astrocytes_Microglia_Tessellation <- Astrocytes_Microglia_Tessellation [!(Astrocytes_Microglia_Tessellation$DPI=="0D"),]

Astrocytes_Microglia_Tessellation$DPI <- factor(Astrocytes_Microglia_Tessellation$DPI, ordered = TRUE, levels = c("5D", "15D", "30D"))

colnames(Astrocytes_Microglia_Tessellation) <- c("MouseID", "DPI", "MicroglialDensity", "Astrocytes")

levels(Astrocytes_Microglia_Tessellation$MicroglialDensity) <- list(Low  = "AM1", Mid = "AM2", High = "AM3")

Astrocytes_Microglia_Tessellation$MicroglialDensity <- factor(Astrocytes_Microglia_Tessellation$MicroglialDensity, ordered = TRUE, levels = c("Low", "Mid", "High"))

## We eliminate all missing rows to avoid errors in further calculations
Astrocytes_Microglia_Tessellation[is.na(Astrocytes_Microglia_Tessellation)] <- 0
```

### 5.2 Plot the data for initial visualization

We create graphs for initial visualization using `geom_density_ridges` and save them in the designated locations.

```{r}
#| label: Create Tessellation graphs for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# For astrocytes in neuronal areas

Astrocytes_Neurons_Ridges <- ggplot(Astrocytes_Neurons_Tessellation, 
                               aes(x = Astrocytes, 
                                   y = DPI, 
                                   fill = NeuronalDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Number of astrocytes in neuronal regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Neuronal density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  
  scale_color_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Neuronal density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Neurons_Ridges, "Plots/Astrocytes_Neurons_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For microglia in neurons

Microglia_Neurons_Ridges <- ggplot(Microglia_Neurons_Tessellation, 
                               aes(x = Microglia, 
                                   y = DPI, 
                                   fill = NeuronalDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Number of Microglia in neuronal regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Neuronal density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  
  scale_color_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Neuronal density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Microglia_Neurons_Ridges, "Plots/Microglia_Neurons_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


# For astrocytes in microglial regions

Astrocytes_Microglia_Ridges <- ggplot(Astrocytes_Microglia_Tessellation, 
                               aes(x = Astrocytes, 
                                   y = DPI, 
                                   fill = MicroglialDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Number of Astrocytes in microglial regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Microglial density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  
  scale_color_manual(values= c("#1E30CB", "#F150BE", "#D1C11C"),
                        name="Neuronal density",
                        breaks=c("Low", "Mid", "High"),
                        labels=c("Low", "Mid", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Microglia_Ridges, "Plots/Astrocytes_Microglia_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")


```

And we plot the graphs:

```{r}
#| label: Plot Tessellation ridges for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Neurons_Ridges, Microglia_Neurons_Ridges, Astrocytes_Microglia_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

### 5.3 Bayesian modeling of glial-neurons covariance (tessellations)

As done previously, we employed the `brms` package [@bÃ¼rkner2017; @bÃ¼rkner2018; @brms]to perform Bayesian regression. We defined two models to analyze cell covariance. First, a model considering only the neuronal spatial intensity (NeuronalDensity) in the right hand of the formula to predict astrocyte intensity. Although our objective is to examine this covariance in each DPI, we ponder that this simple model can be informative. In the second place, we set a heteroskedasticity model (predicting sigma) and adding an interaction for NeuronalDensity with DPI to obtain coefficients per each time point (adding 0 to the regression). Likewise, we considered student distributions (robust regression) to reduce the impact of possible extreme data (outliers) and used brms-default flat priors.

#### 5.3.1 Set formula and priors

We set formulas and priors for each cell type.

```{r}
#| label: Set formulas and priors for cell covarince (tessellations)
#| include: true
#| warning: false
#| message: false

# For astrocyte allocation in neuronal areas

## Model 1
Astrocytes_Neurons_Tessellation_Mdl1 <- bf(Astrocytes ~ NeuronalDensity)
                                                   
## Model 2
Astrocytes_Neurons_Tessellation_Mdl2 <- bf(Astrocytes  ~ 0 + NeuronalDensity:DPI, sigma ~ 0 + NeuronalDensity:DPI)
                                                   

# For microglia allocation in neuronal areas

## Model 1
Microglia_Neurons_Tessellation_Mdl1 <- bf(Microglia ~ NeuronalDensity)
                                                   
## Model 2
Microglia_Neurons_Tessellation_Mdl2 <- bf(Microglia  ~ 0 + NeuronalDensity:DPI, sigma ~ 0 + NeuronalDensity:DPI)

# For microglia allocation in neuronal areas

## Model 1
Astrocytes_Microglia_Tessellation_Mdl1 <- bf(Astrocytes ~ MicroglialDensity)
                                                   
## Model 2
Astrocytes_Microglia_Tessellation_Mdl2 <- bf(Astrocytes  ~ 0 + MicroglialDensity:DPI, sigma ~ 0 + MicroglialDensity:DPI)



```

#### 5.3.2 Fit models for astrocytes in neuronal regions

We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. .rds files containing the models are saved in the designated location. Loo was incorporated for model comparison. To re fit the models, please erase the .rds file and `file_refit` line. The same considerations apply for microglia in nueronal regions and astrocytes in microglial regions.

```{r}
#| label: Fit models for astrocytes in neuronal regions (tessellations)
#| include: true
#| warning: false
#| message: false

# Fit model 1
Astrocytes_Neurons_Tessellation_Fit1 <- brm(data = Astrocytes_Neurons_Tessellation,
                          family = student,
                          formula = Astrocytes_Neurons_Tessellation_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Covariance_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Astrocytes_Neurons_Tessellation_Fit1 <- add_criterion(Astrocytes_Neurons_Tessellation_Fit1, "loo")

# Fit model 2
Astrocytes_Neurons_Tessellation_Fit2 <- brm(data = Astrocytes_Neurons_Tessellation,
                          family = student,
                          formula = Astrocytes_Neurons_Tessellation_Mdl2,
                          #prior = Astrocytes_Neurons_Tessellation_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Covariance_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
Astrocytes_Neurons_Tessellation_Fit2 <- add_criterion(Astrocytes_Neurons_Tessellation_Fit2, "loo")
```

#### 5.3.3 Fit models formicroglia in neuronal regions

```{r}
#| label: Fit models for microglia in neuronal regions (tessellations)
#| include: true
#| warning: false
#| message: false

# Fit model 1
Microglia_Neurons_Tessellation_Fit1 <- brm(data = Microglia_Neurons_Tessellation,
                          family = student,
                          formula = Microglia_Neurons_Tessellation_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Covariance_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Microglia_Neurons_Tessellation_Fit1 <- add_criterion(Microglia_Neurons_Tessellation_Fit1, "loo")

# Fit model 2
Microglia_Neurons_Tessellation_Fit2 <- brm(data = Microglia_Neurons_Tessellation,
                          family = student,
                          formula = Microglia_Neurons_Tessellation_Mdl2,
                          #prior = Microglia_In_Neurons_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Covariance_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
Microglia_Neurons_Tessellation_Fit2 <- add_criterion(Microglia_Neurons_Tessellation_Fit2, "loo")
```

#### 5.3.4 Fit models for astrocytes in microglial regions

```{r}
#| label: Fit models for astrocytes in microglial regions (tessellations)
#| include: true
#| warning: false
#| message: false

# Fit model 1
Astrocytes_Microglia_Tessellation_Fit1 <- brm(data = Astrocytes_Microglia_Tessellation,
                          family = student,
                          formula = Astrocytes_Microglia_Tessellation_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Covariance_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Astrocytes_Microglia_Tessellation_Fit1 <- add_criterion(Astrocytes_Microglia_Tessellation_Fit1, "loo")

# Fit model 2
Astrocytes_Microglia_Tessellation_Fit2 <- brm(data = Astrocytes_Microglia_Tessellation,
                          family = student,
                          formula = Astrocytes_Microglia_Tessellation_Mdl2,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Covariance_Fit2.rds",
                          file_refit = "never")


# Add loo for model comparison
Astrocytes_Microglia_Tessellation_Fit2 <- add_criterion(Astrocytes_Microglia_Tessellation_Fit2, "loo")

```

### 5.4 Analyse model results for cell covariance

#### 5.4.1 Model comparison

We performed model comparison with the LOO method

```{r}
#| label: Model comparisons for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false

# For NeuN_Ratio models
Astrocytes_Neurons_Tessellation_Fit1_loo <- loo(Astrocytes_Neurons_Tessellation_Fit1)
Astrocytes_Neurons_Tessellation_Fit2_loo <- loo(Astrocytes_Neurons_Tessellation_Fit2)

# For Gfap_Intensity models
Microglia_Neurons_Tessellation_Fit1_loo <- loo(Microglia_Neurons_Tessellation_Fit1)
Microglia_Neurons_Tessellation_Fit2_loo <- loo(Microglia_Neurons_Tessellation_Fit2)

# For Iba1_Intensity models
Astrocytes_Microglia_Tessellation_Fit1_loo <- loo(Astrocytes_Microglia_Tessellation_Fit1)

Astrocytes_Microglia_Tessellation_Fit2_loo <- loo(Astrocytes_Microglia_Tessellation_Fit1)
```

And print the comparison

```{r}
#| label: Plot loo comparison for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false

loo_compare(Astrocytes_Neurons_Tessellation_Fit1, Astrocytes_Neurons_Tessellation_Fit2)
loo_compare(Microglia_Neurons_Tessellation_Fit1, Microglia_Neurons_Tessellation_Fit2)
loo_compare(Astrocytes_Microglia_Tessellation_Fit1, Astrocytes_Microglia_Tessellation_Fit2)
```

The results indicate that heteroskedasticity models comprising the time point (DPI) as predictor have a better prediction accuracy. This is specially true for astrocytes and microglia in neuronal regions, while the broad uncertainty in the model of astrocytes in microglial regions suggest the Mdl2 model does not strongly influence the predictions.

#### 5.4.2 Summary of model results

Thereby, we plot the result table for *Mdl2* of each cell type to appreciate the estimates and uncertainty. It can be seen that all models satisfactorily reached a chain convergence (Rhat column = 1) and achieved an effective sample size (Bulk_ESS column). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **figure 3** of the main text.

```{r}
#| label: Print summary for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Neurons_Tessellation_Fit2)
summary(Microglia_Neurons_Tessellation_Fit2)
summary(Astrocytes_Microglia_Tessellation_Fit2)
```

We save the summary tables in .doc files for further use using the *`tab`*`_model` function from the `sjPlot` package. This results are displayed in **supplementary table 7** in the main research article.

```{r}
#| label: Save summary for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(Astrocytes_Neurons_Tessellation_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="SummaryTables/Astrocytes_Neurons_Covariance_Fit2.doc")

tab_model(Microglia_Neurons_Tessellation_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="SummaryTables/Microglia_Neurons_Covariance_Fit2.doc")

tab_model(Astrocytes_Microglia_Tessellation_Fit2, show.se = TRUE,
          auto.label = TRUE,
          file="SummaryTables/Astrocytes_Microglia_Covariance_Fit2.doc")
```

#### 5.4.3 Posterior predictive checks

```{r}
#| label: Plot posterior predictive checks for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

color_scheme_set("darkgray")
pp_check(Astrocytes_Neurons_Tessellation_Fit2, type = "dens_overlay")
pp_check(Microglia_Neurons_Tessellation_Fit2, type = "dens_overlay")
pp_check(Astrocytes_Microglia_Tessellation_Fit2, type = "dens_overlay")
```

#### 5.4.4 Calculating contrast between DPI for cell covariance

We employed the the `emmeans` package [@emmeans] to compute contrast between the time points using the posterior distributions.

```{r}
#| label: Calculate constrast for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


# For astrocytes-neurons covariance
Astrocytes_Neurons_Tessellation_Contrast <- Astrocytes_Neurons_Tessellation_Fit2%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(100)


# For Microglia-neurons covariance
Microglia_Neurons_Tessellation_Contrast <- Microglia_Neurons_Tessellation_Fit2%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(100)

# For astrocytes-microglia covariance
Astrocytes_Microglia_Tessellation_Contrast <- Astrocytes_Microglia_Tessellation_Fit2%>%
emmeans(~ MicroglialDensity | DPI) %>%
contrast(method = "revpairwise", by = "MicroglialDensity") %>%
gather_emmeans_draws() %>% sample_n(100)

```

#### 5.4.5 Bayesian hypothesis testing for cell covariance

We use the `hyphotesis` function from `brms` [@brms-2] to compare time points of interest. Also, we calculate the probability for the inclusion into the **IVR** using the whole posterior distribution. The output is described in the results section for each cell type.

##### 5.4.5.1 For astrocytes-neurons covariance

```{r}
#| label: Hypothesis testing for astrocyte neurons covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| cache: true

set.seed(8807)

# Hypothesis 1

## We obtain the estimates for the hypothesis 15 DPI is minor than 5 DPI
Astrocytes_Neurons_Tessellation_hyp1 <- hypothesis(Astrocytes_Neurons_Tessellation_Fit2, "NeuronalDensityLow:DPI15D >
              NeuronalDensityLow:DPI5D",
              class = "b",
              seed = 8807)


## We subset the results for listing low neuronal intensity regions
Astrocytes_Neurons_Tessellation_Contrast_Low_15_5 <-  Astrocytes_Neurons_Tessellation_Contrast[(Astrocytes_Neurons_Tessellation_Contrast$NeuronalDensity=="Low"),]
                      
## We obtain the probability of the contrast 15DPI -5DPI falling into the IVR (80 for NeuN ratio)                                                       
Astrocytes_Neurons_Tessellation_Contrast_Low_15_5 <-  Astrocytes_Neurons_Tessellation_Contrast_Low_15_5[(Astrocytes_Neurons_Tessellation_Contrast_Low_15_5$contrast=="15D - 5D"),]



# Hypothesis 2

Astrocytes_Neurons_Tessellation_hyp2 <- hypothesis(Astrocytes_Neurons_Tessellation_Fit2, "NeuronalDensityLow:DPI30D <
              NeuronalDensityLow:DPI15D",
              class = "b",
              seed = 8807)

Astrocytes_Neurons_Tessellation_Contrast_Low_30_15 <-  Astrocytes_Neurons_Tessellation_Contrast[(Astrocytes_Neurons_Tessellation_Contrast$NeuronalDensity=="Low"),]
                                                                             
Astrocytes_Neurons_Tessellation_Contrast_Low_30_15 <-  Astrocytes_Neurons_Tessellation_Contrast_Low_30_15 [(Astrocytes_Neurons_Tessellation_Contrast_Low_30_15$contrast=="30D - 15D"),]                                                                                                                                       
# Hypothesis 3

Astrocytes_Neurons_Tessellation_hyp3 <- hypothesis(Astrocytes_Neurons_Tessellation_Fit2, "NeuronalDensityMid:DPI15D >
              NeuronalDensityMid:DPI5D",
              class = "b",
              seed = 8807)

Astrocytes_Neurons_Tessellation_Contrast_Mid_15_5 <-  Astrocytes_Neurons_Tessellation_Contrast[(Astrocytes_Neurons_Tessellation_Contrast$NeuronalDensity=="Mid"),]

Astrocytes_Neurons_Tessellation_Contrast_Mid_15_5 <-  Astrocytes_Neurons_Tessellation_Contrast_Mid_15_5 [(Astrocytes_Neurons_Tessellation_Contrast_Mid_15_5$contrast=="15D - 5D"),]                                                                                                                                       


# Results for hypothesis 1
Astrocytes_Neurons_Tessellation_hyp1
paste("The probability within the IVR for 15D (low) < 5D (low) is:", sum(Astrocytes_Neurons_Tessellation_Contrast_Low_15_5$.value < 80)/100) 

# Results for hypothesis 2
Astrocytes_Neurons_Tessellation_hyp2
paste("The probability within the IVR for 30D (low) < 15D (low) is:", sum(Astrocytes_Neurons_Tessellation_Contrast_Low_30_15$.value > -80)/100)   

# Results for hypothesis 3
Astrocytes_Neurons_Tessellation_hyp3 
paste("The probability within the IVR for 15D (mid) > 5D (mid) is:", sum(Astrocytes_Neurons_Tessellation_Contrast_Mid_15_5$.value > -80)/100)
```

##### 5.4.5.2 For microglia-neurons covariance

```{r}
#| label: Hypothesis testing for microglia-neurons covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| cache: true


# Hypothesis 1
Microglia_Neurons_Tessellation_hyp1 <- hypothesis(Microglia_Neurons_Tessellation_Fit2, "NeuronalDensityLow:DPI5D > 
              NeuronalDensityLow:DPI0D",
              class = "b",
              seed = 8807)

Microglia_Neurons_Tessellation_Contrast_Low_5_0 <-  Microglia_Neurons_Tessellation_Contrast[(Microglia_Neurons_Tessellation_Contrast$NeuronalDensity=="Low"),]
                                                                             
Microglia_Neurons_Tessellation_Contrast_Low_5_0 <-  Microglia_Neurons_Tessellation_Contrast_Low_5_0 [(Microglia_Neurons_Tessellation_Contrast_Low_5_0$contrast=="5D - 0D"),]                                                                          
                                                                   
# Hypothesis 2
Microglia_Neurons_Tessellation_hyp2 <- hypothesis(Microglia_Neurons_Tessellation_Fit2, "NeuronalDensityLow:DPI15D < 
              NeuronalDensityLow:DPI5D",
              class = "b",
              seed = 8807)

Microglia_Neurons_Tessellation_Contrast_Low_15_5 <-  Microglia_Neurons_Tessellation_Contrast[(Microglia_Neurons_Tessellation_Contrast$NeuronalDensity=="Low"),]
                                                                             
Microglia_Neurons_Tessellation_Contrast_Low_15_5 <-  Microglia_Neurons_Tessellation_Contrast_Low_15_5 [(Microglia_Neurons_Tessellation_Contrast_Low_15_5$contrast=="15D - 5D"),]                                                                          
                                                                       
## Hypothesis 3
Microglia_Neurons_Tessellation_hyp3 <- hypothesis(Microglia_Neurons_Tessellation_Fit2, "NeuronalDensityMid:DPI15D > 
              NeuronalDensityMid:DPI5D",
              class = "b",
              seed = 8807)

Microglia_Neurons_Tessellation_Contrast_Mid_15_5 <-  Microglia_Neurons_Tessellation_Contrast[(Microglia_Neurons_Tessellation_Contrast$NeuronalDensity=="Mid"),]
                                                                             
Microglia_Neurons_Tessellation_Contrast_Mid_15_5 <-  Microglia_Neurons_Tessellation_Contrast_Mid_15_5 [(Microglia_Neurons_Tessellation_Contrast_Mid_15_5$contrast=="15D - 5D"),]                                                                          

 ## Hypothesis 4
 Microglia_Neurons_Tessellation_hyp4 <- hypothesis(Microglia_Neurons_Tessellation_Fit2, "NeuronalDensityLow:DPI30D < 
              NeuronalDensityLow:DPI15D",
              class = "b",
              seed = 8807)

Microglia_Neurons_Tessellation_Contrast_Low_30_15 <-  Microglia_Neurons_Tessellation_Contrast[(Microglia_Neurons_Tessellation_Contrast$NeuronalDensity=="Low"),]
                                                                             
Microglia_Neurons_Tessellation_Contrast_Low_30_15 <-  Microglia_Neurons_Tessellation_Contrast_Low_30_15 [(Microglia_Neurons_Tessellation_Contrast_Low_30_15$contrast=="30D - 15D"),]                                                                                                          
# Results hypothesis 1
 
Microglia_Neurons_Tessellation_hyp1
paste("The probability within the IVR for 5D (low) > 0D (low) is:", sum(Microglia_Neurons_Tessellation_Contrast_Low_5_0$.value > 40)/100) 

# Results hypothesis 2
Microglia_Neurons_Tessellation_hyp2
paste("The probability within the IVR for 15D (low) < 5D (low) is:", sum(Microglia_Neurons_Tessellation_Contrast_Low_15_5$.value > -40)/100)

# Results hypothesis 3
Microglia_Neurons_Tessellation_hyp3
paste("The probability within the IVR for 15D (mid) > 5D (mid) is:", sum(Microglia_Neurons_Tessellation_Contrast_Mid_15_5$.value > -40)/100)                                                                

# Results hypothesis 4
Microglia_Neurons_Tessellation_hyp4
paste("The probability within the IVR for 30D (low) < 15D (low) is:", sum(Microglia_Neurons_Tessellation_Contrast_Low_30_15$.value > -40)/100)  
 
```

##### 5.4.5.3 For astrocytes-microglia covariance

```{r}
#| label: Hypothesis testing for astrocytes-microglia covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| cache: true

## Hypothesis 1
Astrocytes_Microglia_Tessellation_hyp1 <- hypothesis(Astrocytes_Microglia_Tessellation_Fit2, "MicroglialDensityLow:DPI15D > 
              MicroglialDensityLow:DPI5D",
              class = "b",
              seed = 8807)

Astrocytes_Microglia_Tessellation_Contrast_Low_15_5 <-  Astrocytes_Microglia_Tessellation_Contrast[(Astrocytes_Microglia_Tessellation_Contrast$MicroglialDensity=="Low"),]
                                                                             
Astrocytes_Microglia_Tessellation_Contrast_Low_15_5 <-  Astrocytes_Microglia_Tessellation_Contrast_Low_15_5 [(Astrocytes_Microglia_Tessellation_Contrast_Low_15_5$contrast=="15D - 5D"),]                                                                          

## Hypothesis 2
Astrocytes_Microglia_Tessellation_hyp2 <- hypothesis(Astrocytes_Microglia_Tessellation_Fit2, "MicroglialDensityLow:DPI30D > 
              MicroglialDensityLow:DPI15D",
              class = "b",
              seed = 8807)

Astrocytes_Microglia_Tessellation_Contrast_Low_30_5 <-  Astrocytes_Microglia_Tessellation_Contrast[(Astrocytes_Microglia_Tessellation_Contrast$MicroglialDensity=="Low"),]
                                                                             
Astrocytes_Microglia_Tessellation_Contrast_Low_30_5 <-  Astrocytes_Microglia_Tessellation_Contrast_Low_30_5 [(Astrocytes_Microglia_Tessellation_Contrast_Low_30_5$contrast=="30D - 5D"),]                                                                          

# Results hypothesis 1
Astrocytes_Microglia_Tessellation_hyp1
paste("The probability within the IVR for 15D (low) > 5D (low) is:", sum(Astrocytes_Microglia_Tessellation_Contrast_Low_15_5$.value > 92)/100) 

# Results hypothesis 2
Astrocytes_Microglia_Tessellation_hyp2
paste("The probability within the IVR for 30D (low) < 15D (low) is:", sum(Astrocytes_Microglia_Tessellation_Contrast_Low_30_5$.value < 92)/100)  
```

### 5.5 Visualize estimates and uncertainty for cell ratios

We generate the graphs showing uncertainty in the estimates and contrast.

```{r}
#| label: Create composited graphs for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

# For astrocytes-neurons covariance 

Astrocytes_Neurons_Tessellation <- Astrocytes_Neurons_Tessellation %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Astrocytes_Neurons_Tessellation <- Astrocytes_Neurons_Tessellation %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Astrocytes_Neurons_Tessellation_Grid = Astrocytes_Neurons_Tessellation %>%
  data_grid(DPI, NeuronalDensity)

Astrocytes_Neurons_Tessellation_Means = Astrocytes_Neurons_Tessellation_Grid %>%
  add_epred_draws(Astrocytes_Neurons_Tessellation_Fit2)

Astrocytes_Neurons_Tessellation_Preds = Astrocytes_Neurons_Tessellation_Grid %>%
  add_predicted_draws(Astrocytes_Neurons_Tessellation_Fit2)

Astrocytes_Neurons_Tessellation_Estimates <- Astrocytes_Neurons_Tessellation %>%
  ggplot(aes(x = Astrocytes, y = DPI)) +
  
  stat_pointinterval(aes(x = .epred), data = Astrocytes_Neurons_Tessellation_Means, .width = c(.80, .95),scale = 0.8, position = position_nudge(y = 0.175)) +
  
  stat_interval(aes(x = .prediction), .width = c(.50, 0.8, .95), data = Astrocytes_Neurons_Tessellation_Preds) +
  
  geom_point(data = Astrocytes_Neurons_Tessellation) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name=" Astrocytes in neuronal regions \n",
                     position = "top",
                     limits=c(0, 800), 
                     breaks=seq(0,800,200)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.95, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) +
  
  facet_grid(~ NeuronalDensity)

Astrocytes_Neurons_Tessellation_Contrast_Sub <- Astrocytes_Neurons_Tessellation_Contrast[
  (Astrocytes_Neurons_Tessellation_Contrast$contrast=="30D - 15D"|
   Astrocytes_Neurons_Tessellation_Contrast$contrast=="15D - 5D" |
   Astrocytes_Neurons_Tessellation_Contrast$contrast=="5D - 0D"),]

Astrocytes_Neurons_Tessellation_Contrast_Sub$contrast <- factor(Astrocytes_Neurons_Tessellation_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Astrocytes_Neurons_Tessellation_Contrast_Fig1 <- Astrocytes_Neurons_Tessellation_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 80))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-80, 80), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-300, 500), 
                     breaks=seq(-300,500, 200)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.95, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_grid(~ NeuronalDensity) + theme(strip.background = element_blank(), strip.text = element_blank())

Astrocytes_Neurons_Tessellation_Patch <- Astrocytes_Neurons_Tessellation_Estimates + plot_spacer() + Astrocytes_Neurons_Tessellation_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.4))
  
  
ggsave(plot = Astrocytes_Neurons_Tessellation_Patch, "Plots/Astrocytes_Neurons_Tessellation_Patch.png", width = 20, height = 12, units = "cm")



# For microglia-neurons covariance

Microglia_Neurons_Tessellation <- Microglia_Neurons_Tessellation%>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Microglia_Neurons_Tessellation <- Microglia_Neurons_Tessellation %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Microglia_Neurons_Tessellation_Grid = Microglia_Neurons_Tessellation %>%
  data_grid(DPI, NeuronalDensity)

Microglia_Neurons_Tessellation_Means = Microglia_Neurons_Tessellation_Grid %>%
  add_epred_draws(Microglia_Neurons_Tessellation_Fit2)

Microglia_Neurons_Tessellation_Preds = Microglia_Neurons_Tessellation_Grid %>%
  add_predicted_draws(Microglia_Neurons_Tessellation_Fit2)

Microglia_Neurons_Tessellation_Estimates <- Microglia_Neurons_Tessellation %>%
  ggplot(aes(x = Microglia, y = DPI)) +
  
  stat_pointinterval(aes(x = .epred), data = Microglia_Neurons_Tessellation_Means, .width = c(.80, .95),scale = 0.8, position = position_nudge(y = 0.175)) +
  
  stat_interval(aes(x = .prediction), .width = c(.50, 0.8, .95), data = Microglia_Neurons_Tessellation_Preds) +
  
  geom_point(data = Microglia_Neurons_Tessellation) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name=" Microglia in neuronal regions \n",
                     position = "top",
                     limits=c(0, 900), 
                     breaks=seq(0,900,250)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.95, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) +
  
  facet_grid(~ NeuronalDensity)

Microglia_Neurons_Tessellation_Contrast_Sub <- Microglia_Neurons_Tessellation_Contrast[
  (Microglia_Neurons_Tessellation_Contrast$contrast=="30D - 15D"|
   Microglia_Neurons_Tessellation_Contrast$contrast=="15D - 5D" |
   Microglia_Neurons_Tessellation_Contrast$contrast=="5D - 0D"),]

Microglia_Neurons_Tessellation_Contrast_Sub$contrast <- factor(Microglia_Neurons_Tessellation_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Microglia_Neurons_Tessellation_Contrast_Fig1 <- Microglia_Neurons_Tessellation_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 40))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-40, 40), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-500, 900), 
                     breaks=seq(-500,900, 300)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.95, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_grid(~ NeuronalDensity) + theme(strip.background = element_blank(), strip.text = element_blank())

Microglia_Neurons_Tessellation_Patch <- Microglia_Neurons_Tessellation_Estimates + plot_spacer() + Microglia_Neurons_Tessellation_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.4))
  
  
ggsave(plot = Microglia_Neurons_Tessellation_Patch, "Plots/Microglia_Neurons_Tessellation_Patch.png", width = 20, height = 12, units = "cm")


# For astrocytes-microglia covariance

Astrocytes_Microglia_Tessellation  <- Astrocytes_Microglia_Tessellation  %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Astrocytes_Microglia_Tessellation <- Astrocytes_Microglia_Tessellation %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Astrocytes_Microglia_Tessellation_Grid = Astrocytes_Microglia_Tessellation %>%
  data_grid(DPI, MicroglialDensity, allow_new_levels = TRUE)

Astrocytes_Microglia_Tessellation_Means = Astrocytes_Microglia_Tessellation_Grid %>%
  add_epred_draws(Astrocytes_Microglia_Tessellation_Fit2, allow_new_levels = TRUE)

Astrocytes_Microglia_Tessellation_Preds = Astrocytes_Microglia_Tessellation_Grid %>%
  add_predicted_draws(Astrocytes_Microglia_Tessellation_Fit2)

Astrocytes_Microglia_Tessellation_Estimates <- Astrocytes_Microglia_Tessellation %>%
  ggplot(aes(x = Astrocytes, y = DPI)) +
  
  stat_pointinterval(aes(x = .epred), data = Astrocytes_Microglia_Tessellation_Means, .width = c(.80, .95),scale = 0.8, position = position_nudge(y = 0.175)) +
  
  stat_interval(aes(x = .prediction), .width = c(.50, 0.8, .95), data = Astrocytes_Microglia_Tessellation_Preds) +
  
  geom_point(data = Astrocytes_Microglia_Tessellation) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name=" Astrocytes in Microglial regions \n",
                     position = "top",
                     limits=c(0, 800), 
                     breaks=seq(0,800,200)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("5D", "15D", "30D"),
                        labels=c("5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.95, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) +
  
  facet_grid(~ MicroglialDensity)

Astrocytes_Microglia_Tessellation_Contrast_Sub <- Astrocytes_Microglia_Tessellation_Contrast[
  (Astrocytes_Microglia_Tessellation_Contrast$contrast=="30D - 15D"|
   Astrocytes_Microglia_Tessellation_Contrast$contrast=="15D - 5D" |
   Astrocytes_Microglia_Tessellation_Contrast$contrast=="30D - 5D"),]

Astrocytes_Microglia_Tessellation_Contrast_Sub$contrast <- factor(Astrocytes_Microglia_Tessellation_Contrast_Sub$contrast, levels = c( "15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Astrocytes_Microglia_Tessellation_Contrast_Fig1 <- Astrocytes_Microglia_Tessellation_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 92))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-92, 90), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-300, 500), 
                     breaks=seq(-300,500, 200)) +
  
  scale_fill_manual(name="IVR", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.95, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_grid(~ MicroglialDensity) + theme(strip.background = element_blank(), strip.text = element_blank())

Astrocytes_Microglia_Tessellation_Patch <- Astrocytes_Microglia_Tessellation_Estimates + plot_spacer() + Astrocytes_Microglia_Tessellation_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.4))
  
  
ggsave(plot = Astrocytes_Microglia_Tessellation_Patch, "Plots/Astrocytes_Microglia_Tessellation_Patch.png", width = 20, height = 12, units = "cm")


```

Plot the graphs represented in **figures 3 and 5** of the main research article.

```{r}
#| label: Plot composited graphs for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


ggarrange(Astrocytes_Neurons_Tessellation_Patch, Microglia_Neurons_Tessellation_Patch, Astrocytes_Microglia_Tessellation_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 6 Point process models (ppm) for cell covariance

### 6.1 Multipoint process models

We use the `mppm` function of spatstat [@spatstat-3] to fit a common point process model in a dataset comprising several point patterns. We estimated the cell covariance as done for tessellations. The `mppm` function is analogous to common fitting approaches like lm or glm for linear models and generalized linear models, respectively. For `ppm` and `mppm` in `spatstat`, the left hand side of the formula must comprise the point pattern and the right hand side the form of the logarithm of the intensity function to predict the point pattern.In this sense, please be aware that these approach comprises **loglinear models**.

#### 6.1.1 Fit multipoint models for cell covariance (mppm)

Given the nature of our dataset, we want to estimate an intercept and slope per DPI. Regressing on DPI as a factor is not as informative as the proposed approach. We used subsets per time point and fit simple models regressing on the density kernel of interest. Given that at 0 DPI (control animals) there is not sufficient sampling of reactive glia (Gfap and Iba1+ cells), estimates at this time point are calculated for reference purposes but do not intent to provide accurate data on glial populations under non-ischemic conditions. In the case of Astrocytes-microglia covariance this time point is completely excluded. However, the datasets are available in the hyperframe for the interested scientists/reader. Model results are shown in the **supplementary table 8** of the main research article. Please note that these models are not the ones graphically represented in figures 3, 4, 5 and supplementary material.

##### 6.1.1.1 Fit models for Astrocytes-neurons covariance (mppm)

```{r}
#| label: Fit models for astrocytes-neurons covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# We order the DPI factor
Point_Patterns_5x$DPI <- factor(Point_Patterns_5x$DPI, levels = c("0D", "5D", "15D", "30D"))

# For astrocytes-neurons covariance
Astrocytes_Neurons_Covariance_mppm_0D <- mppm(Astrocytes ~ Neurons_Dens, data=Point_Patterns_5x_0D)
Astrocytes_Neurons_Covariance_mppm_Coef_0D <- exp(coef(Astrocytes_Neurons_Covariance_mppm_0D))
Astrocytes_Neurons_Covariance_mppm_CI_0D <- exp(confint(Astrocytes_Neurons_Covariance_mppm_0D))

Astrocytes_Neurons_Covariance_mppm_5D <- mppm(Astrocytes ~ Neurons_Dens, data=Point_Patterns_5x_5D)
Astrocytes_Neurons_Covariance_mppm_Coef_5D <- exp(coef(Astrocytes_Neurons_Covariance_mppm_5D))
Astrocytes_Neurons_Covariance_mppm_CI_5D <- exp(confint(Astrocytes_Neurons_Covariance_mppm_5D))

Astrocytes_Neurons_Covariance_mppm_15D <- mppm(Astrocytes ~ Neurons_Dens, data=Point_Patterns_5x_15D)
Astrocytes_Neurons_Covariance_mppm_Coef_15D <- exp(coef(Astrocytes_Neurons_Covariance_mppm_15D))
Astrocytes_Neurons_Covariance_mppm_CI_15D <- exp(confint(Astrocytes_Neurons_Covariance_mppm_15D))

Astrocytes_Neurons_Covariance_mppm_30D <- mppm(Astrocytes ~ Neurons_Dens, data=Point_Patterns_5x_30D)
Astrocytes_Neurons_Covariance_mppm_Coef_30D <- exp(coef(Astrocytes_Neurons_Covariance_mppm_30D))
Astrocytes_Neurons_Covariance_mppm_CI_30D <- exp(confint(Astrocytes_Neurons_Covariance_mppm_30D))
```

##### 6.1.1.2 Fit models for Microglia-neurons covariance (mppm)

```{r}
#| label: Fit models for microglia-neurons covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Microglia_Neurons_Covariance_mppm_0D <- mppm(Microglia ~ Neurons_Dens, data=Point_Patterns_5x_0D)
Microglia_Neurons_Covariance_mppm_Coef_0D <- exp(coef(Microglia_Neurons_Covariance_mppm_0D))
Microglia_Neurons_Covariance_mppm_CI_0D <- exp(confint(Microglia_Neurons_Covariance_mppm_0D))

Microglia_Neurons_Covariance_mppm_5D <- mppm(Microglia ~ Neurons_Dens, data=Point_Patterns_5x_5D)
Microglia_Neurons_Covariance_mppm_Coef_5D <- exp(coef(Microglia_Neurons_Covariance_mppm_5D))
Microglia_Neurons_Covariance_mppm_CI_5D <- exp(confint(Microglia_Neurons_Covariance_mppm_5D))

Microglia_Neurons_Covariance_mppm_15D <- mppm(Microglia ~ Neurons_Dens, data=Point_Patterns_5x_15D)
Microglia_Neurons_Covariance_mppm_Coef_15D <- exp(coef(Microglia_Neurons_Covariance_mppm_15D))
Microglia_Neurons_Covariance_mppm_CI_15D <- exp(confint(Microglia_Neurons_Covariance_mppm_15D))

Microglia_Neurons_Covariance_mppm_30D <- mppm(Microglia ~ Neurons_Dens, data=Point_Patterns_5x_30D)
Microglia_Neurons_Covariance_mppm_Coef_30D <- exp(coef(Microglia_Neurons_Covariance_mppm_30D))
Microglia_Neurons_Covariance_mppm_CI_30D <- exp(confint(Microglia_Neurons_Covariance_mppm_30D))

```

##### 6.1.1.3 Fit models for Astrocytes-microglia covariance (mppm)

```{r}
#| label: Fit models for astrocytes-microglia covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Microglia_Covariance_mppm_5D <- mppm(Astrocytes ~ Microglia_Dens, data=Point_Patterns_5x_5D)
Astrocytes_Microglia_Covariance_mppm_Coef_5D <- exp(coef(Astrocytes_Microglia_Covariance_mppm_5D))
Astrocytes_Microglia_Covariance_mppm_CI_5D <- exp(confint(Astrocytes_Microglia_Covariance_mppm_5D))

Astrocytes_Microglia_Covariance_mppm_15D <- mppm(Astrocytes ~ Microglia_Dens, data=Point_Patterns_5x_15D)
Astrocytes_Microglia_Covariance_mppm_Coef_15D <- exp(coef(Astrocytes_Microglia_Covariance_mppm_15D))
Astrocytes_Microglia_Covariance_mppm_CI_15D <- exp(confint(Astrocytes_Microglia_Covariance_mppm_15D))

Astrocytes_Microglia_Covariance_mppm_30D <- mppm(Astrocytes ~ Microglia_Dens, data=Point_Patterns_5x_30D)
Astrocytes_Microglia_Covariance_mppm_Coef_30D <- exp(coef(Astrocytes_Microglia_Covariance_mppm_30D))
Astrocytes_Microglia_Covariance_mppm_CI_30D <- exp(confint(Astrocytes_Microglia_Covariance_mppm_30D))
```

### 6.2 Models per DPI for astrocyte-neurons covariance (ppm)

Given the alignment to the Allen brain atlas, we consider advantageous to run the model on superimposed points patterns per DPI that comprise the distribution and allocation of the whole experimental group. This allows to use the `effectfun` function from `spatstat` which is not available for replicated point patterns. This choice is also advantageous for plotting the results. Please note that the regression results are generated in the **log scale**.The same process was performed for microglia-neurons covariance and astrocytes-microglia covariance.

#### 6.2.1 Fit the models

We fit non-stationary poisson process models using the `ppm` function from `spatstat`. However, please note that our model of reference is the one generated using `mppm` in section 6.1 The current models aim to achieve a single numerical and prediction estimation per time point. We also provide transformations of the **log scale** coefficients and confidence intervals using an exponential function `exp`. Please note that the same considerations apply for microglia-neurons covariance and astrocytes-microglia covariance. Therefore, not described in their respective sections.

```{r}
#| label: Fit models for astrocytes-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We fit the model
Astrocytes_Neurons_Covariance_0D <- ppm(Gfap_Superimposed_5x_0D ~ NeuN_Intensity_0D)

## We transform the coeficients and 95% confidence intervals to exponential (they are logaritmic)
Astrocytes_Neurons_Covariance_Coef_0D <- exp(coef(Astrocytes_Neurons_Covariance_0D))
Astrocytes_Neurons_Covariance_CI_0D <- exp(confint(Astrocytes_Neurons_Covariance_0D))


# For 5D
Astrocytes_Neurons_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ NeuN_Intensity_5D)
Astrocytes_Neurons_Covariance_Coef_5D <- exp(coef(Astrocytes_Neurons_Covariance_5D))
Astrocytes_Neurons_Covariance_CI_5D <- exp(confint(Astrocytes_Neurons_Covariance_5D))


# For 15D
Astrocytes_Neurons_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ NeuN_Intensity_15D)
Astrocytes_Neurons_Covariance_Coef_15D <- exp(coef(Astrocytes_Neurons_Covariance_15D))
Astrocytes_Neurons_Covariance_CI_15D <- exp(confint(Astrocytes_Neurons_Covariance_15D))

# For 30D
Astrocytes_Neurons_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ NeuN_Intensity_30D)
Astrocytes_Neurons_Covariance_Coef_30D <- exp(coef(Astrocytes_Neurons_Covariance_30D))
Astrocytes_Neurons_Covariance_CI_30D <- exp(confint(Astrocytes_Neurons_Covariance_30D))
```

#### 6.2.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: Print summary for astrocytes-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Neurons_Covariance_0D
Astrocytes_Neurons_Covariance_5D
Astrocytes_Neurons_Covariance_15D
Astrocytes_Neurons_Covariance_30D
```

#### 6.2.3 Intervals (histograms) for astrocyte-neurons covariance

We create an interval based on the `quadratcount` function from `spatstat` to appreciate the redistribution of cell intensity according to the covariant (0.40 intervals). The same apply for microglia-neurons and astrocyte-neurons covariance. Given the nature of the resulting object, we generated an histogram using the R-base plotting system, wich is less versatile that the `ggplot` package. The histograms are shown in figure 3 (B-Dii) in the main the research article.

```{r}
#| label: Create histograms for astrocytes-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# We calculate the intervals
## For 0 DPI
Neurons_Intensity_Interval_0D <- seq(0,40 *ceiling(max(NeuN_Intensity_0D)/40), by = 40)
Neurons_Intensity_Cut_0D <- cut(NeuN_Intensity_0D, breaks=Neurons_Intensity_Interval_0D, include.lowest=TRUE)
Astrocytes_QuadrantCount_0D <- quadratcount(Gfap_Superimposed_5x_0D , tess=tess(image=Neurons_Intensity_Cut_0D))
Astrocytes_Intensity_0D <- intensity(Astrocytes_QuadrantCount_0D)

## For 5 DPI
Neurons_Intensity_Interval_5D <- seq(0,40 *ceiling(max(NeuN_Intensity_5D)/40), by = 40)
Neurons_Intensity_Cut_5D <- cut(NeuN_Intensity_5D, breaks=Neurons_Intensity_Interval_5D, include.lowest=TRUE)
Astrocytes_QuadrantCount_5D <- quadratcount(Gfap_Superimposed_5x_5D , tess=tess(image=Neurons_Intensity_Cut_5D))
Astrocytes_Intensity_5D <- intensity(Astrocytes_QuadrantCount_5D)

## For 15 DPI
Neurons_Intensity_Interval_15D <- seq(0,40 *ceiling(max(NeuN_Intensity_15D)/40), by = 40)
Neurons_Intensity_Cut_15D <- cut(NeuN_Intensity_15D, breaks=Neurons_Intensity_Interval_15D, include.lowest=TRUE)
Astrocytes_QuadrantCount_15D <- quadratcount(Gfap_Superimposed_5x_15D , tess=tess(image=Neurons_Intensity_Cut_15D))
Astrocytes_Intensity_15D <- intensity(Astrocytes_QuadrantCount_15D)

## For 30 DPI
Neurons_Intensity_Interval_30D <- seq(0,40 *ceiling(max(NeuN_Intensity_30D)/40), by = 40)
Neurons_Intensity_Cut_30D <- cut(NeuN_Intensity_30D, breaks=Neurons_Intensity_Interval_30D, include.lowest=TRUE)
Astrocytes_QuadrantCount_30D <- quadratcount(Gfap_Superimposed_5x_30D , tess=tess(image=Neurons_Intensity_Cut_30D))
Astrocytes_Intensity_30D <- intensity(Astrocytes_QuadrantCount_30D)

# We plot the graphs

## For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_0D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 100),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


## For 5 DPI
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_5D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


## For 15 DPI

par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_15D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


## For 30 DPI

par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_30D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)
```

##### 6.2.3.1 Save the intervals (histograms) for astrocyte-neurons covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save histograms for astrocytes-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false
#| cache: true

# For 0 DPI

png("Plots/Astrocytes_Neurons_Hist_0D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_0D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 100),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


# For 5 DPI

png("Plots/Astrocytes_Neurons_Hist_5D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_5D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


# For 15 DPI

png("Plots/Astrocytes_Neurons_Hist_15D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_15D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


# For 30 DPI

png("Plots/Astrocytes_Neurons_Hist_30D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_30D,  
     main = "Astrocytes / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()
```

#### 6.2.4 Plot numerical predictions

We transform the fited model into a function using `as.function` to generate specific predictions for cell allocation according to covariance. These numerical predictions are shown as blue and red intercepts in figure 3 (B-Diii)

```{r}
#| label: Plot astrocytes-neurons covariance numerical predictions (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We calculate the function (for plotting purposes)
Astrocytes_Neurons_Covariance_Function_0D <- effectfun(Astrocytes_Neurons_Covariance_0D)

## We convert the object to a function to make predictions
Astrocytes_Neurons_Covariance_Preds_0D <- as.function(Astrocytes_Neurons_Covariance_Function_0D)

## Prediction for low-intensity neuronal regions (intralesional areas)

paste("The estimate for astrocytes in low neuronal regions at 0 DPI is:", Astrocytes_Neurons_Covariance_Preds_0D (50) )

## Prediction for high-intensity neuronal regions (extralesional areas)
paste("The estimate for astrocytes in high neuronal regions at 0 DPI is:", Astrocytes_Neurons_Covariance_Preds_0D (300))


# For 5D
Astrocytes_Neurons_Covariance_Function_5D <- effectfun(Astrocytes_Neurons_Covariance_5D)
Astrocytes_Neurons_Covariance_Preds_5D <- as.function(Astrocytes_Neurons_Covariance_Function_5D)
paste("The estimate for astrocytes in low neuronal regions at 5 DPI is:", Astrocytes_Neurons_Covariance_Preds_5D (50))
paste("The estimate for astrocytes in high neuronal regions at 5 DPI is:",Astrocytes_Neurons_Covariance_Preds_5D (300))


# For 15D
Astrocytes_Neurons_Covariance_Function_15D <- effectfun(Astrocytes_Neurons_Covariance_15D)
Astrocytes_Neurons_Covariance_Preds_15D <- as.function(Astrocytes_Neurons_Covariance_Function_15D)
paste("The estimate for astrocytes in low neuronal regions at 15 DPI is:",Astrocytes_Neurons_Covariance_Preds_15D (50))
paste("The estimate for astrocytes in high neuronal regions at 15 DPI is:",Astrocytes_Neurons_Covariance_Preds_15D (300))


# For 30D
Astrocytes_Neurons_Covariance_Function_30D <- effectfun(Astrocytes_Neurons_Covariance_30D)
Astrocytes_Neurons_Covariance_Preds_30D <- as.function(Astrocytes_Neurons_Covariance_Function_30D)
paste("The estimate for astrocytes in low neuronal regions at 30 DPI is:",Astrocytes_Neurons_Covariance_Preds_30D (50))
paste("The estimate for astrocytes in high neuronal regions at 30 DPI is:",Astrocytes_Neurons_Covariance_Preds_30D (300))
```

#### 6.2.5 Plot functions and numerical preedictions

We plot the functions and predictions represented in figure 3 (B-Diii) of the research article

```{r}
#| label: Plot astrocytes-neurons covariance fuction and predictions (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_0D, "NeuN_Intensity_0D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "", 
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=42,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=42,
         x1=50,
         y1=42,
         col="blue", 
         lwd=3)

text(70, 50, "42", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=13,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=13,
         x1=300,
         y1=13,
         col="red", 
         lwd=3)

text(270, 20, "13", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 5 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_5D, "NeuN_Intensity_5D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=97,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=97,
         x1=50,
         y1=97,
         col="blue", 
         lwd=3)

text(60, 110, "97", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=205,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=205,
         x1=300,
         y1=205,
         col="red", 
         lwd=3)

text(250, 190, "205", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 15 DPI
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_15D, "NeuN_Intensity_15D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=198,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=198,
         x1=50,
         y1=198,
         col="blue", 
         lwd=3)

text(60, 200, "198", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=218,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=218,
         x1=300,
         y1=218,
         col="red", 
         lwd=3)

text(290, 220, "218", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

# For 30 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_30D, "NeuN_Intensity_30D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=294,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=294,
         x1=50,
         y1=294,
         col="blue", 
         lwd=3)

text(60, 300, "294", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=237,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=237,
         x1=300,
         y1=237,
         col="red", 
         lwd=3)

text(290, 250, "237", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 
```

##### 6.2.5.1 Save functions and numerical preedictions (ppm)

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save astrocytes-neurons covariance and predictions (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_Neurons_Covariance_0D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_0D, "NeuN_Intensity_0D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "", 
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=42,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=42,
         x1=50,
         y1=42,
         col="blue", 
         lwd=3)

text(70, 50, "42", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=13,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=13,
         x1=300,
         y1=13,
         col="red", 
         lwd=3)

text(270, 20, "13", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()


# For 5 DPI

png("Plots/Astrocytes_Neurons_Covariance_5D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_5D, "NeuN_Intensity_5D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=97,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=97,
         x1=50,
         y1=97,
         col="blue", 
         lwd=3)

text(60, 110, "97", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=205,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=205,
         x1=300,
         y1=205,
         col="red", 
         lwd=3)

text(250, 190, "205", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()



png("Plots/Astrocytes_Neurons_Covariance_15D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_15D, "NeuN_Intensity_15D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=198,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=198,
         x1=50,
         y1=198,
         col="blue", 
         lwd=3)

text(60, 200, "198", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=218,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=218,
         x1=300,
         y1=218,
         col="red", 
         lwd=3)

text(290, 220, "218", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()


png("Plots/Astrocytes_Neurons_Covariance_30D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Neurons_Covariance_30D, "NeuN_Intensity_30D", se.fit=TRUE), 
     main="ppm (astrocytes / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=294,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=294,
         x1=50,
         y1=294,
         col="blue", 
         lwd=3)

text(60, 300, "294", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=237,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=237,
         x1=300,
         y1=237,
         col="red", 
         lwd=3)

text(290, 250, "237", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()

```

#### 6.2.6 Plot model (image) predictions

We used the `predict` function from `spatstat` to generate predictive images and their corresponding standart errors (se) shown in figure 3 (B-Div) of the main research article.

```{r}
#| label: Plot model predictions for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

Astrocytes_colourmap <- colourmap(topo.colors(256), range = c(0, 350))
Astrocytes_SE_colourmap <- colourmap(topo.colors(256), range = c(0, 15))

# For 0 DPI
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_0D), col=Astrocytes_colourmap, main="Prediction 0D")
plot(predict(Astrocytes_Neurons_Covariance_0D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 30D")

# For 5 DPI
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_5D), col=Astrocytes_colourmap, main="Prediction 5D")
plot(predict(Astrocytes_Neurons_Covariance_5D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 5D")

# For 15 DPI
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_15D), col=Astrocytes_colourmap, main="Prediction 15D")
plot(predict(Astrocytes_Neurons_Covariance_15D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 15D")

# For 30 DPI
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_30D), col=Astrocytes_colourmap, main="Prediction 30D")
plot(predict(Astrocytes_Neurons_Covariance_30D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 30D")
```

##### 6.2.6.1 Save model (image) predictions

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save model predictions for astrocyte-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_Neurons_Predict_0D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_0D), col=Astrocytes_colourmap, main="Prediction 0D")
plot(predict(Astrocytes_Neurons_Covariance_0D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 0D")
dev.off()

png("Plots/Astrocytes_Neurons_Predict_5D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_5D), col=Astrocytes_colourmap, main="Prediction 5D")
plot(predict(Astrocytes_Neurons_Covariance_5D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 5D")
dev.off()

png("Plots/Astrocytes_Neurons_Predict_15D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_15D), col=Astrocytes_colourmap, main="Prediction 15D")
plot(predict(Astrocytes_Neurons_Covariance_15D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 15D")
dev.off()

png("Plots/Astrocytes_Neurons_Predict_30D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Neurons_Covariance_30D), col=Astrocytes_colourmap, main="Prediction 30D")
plot(predict(Astrocytes_Neurons_Covariance_30D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 30D")
dev.off()
```

#### 6.2.7 Plot image predictions (CI)

We use the function `predict` with the argument `interval=confidence"` to generate image predictions comprising 95% CI. These images are shown in the supplementary figure 6A.

```{r}
#| label: Plot CI for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 15

# For 0 DPI
par(mfrow=c(1,4))
plot(predict(Astrocytes_Neurons_Covariance_0D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 0D")

# For 5 DPI
plot(predict(Astrocytes_Neurons_Covariance_5D, interval="confidence"), col=Astrocytes_colourmap,shade=0.5,main = "Astrocytes-Neurons covariance 5D")

# For 15 DPI
plot(predict(Astrocytes_Neurons_Covariance_15D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 15D")

# For 30 DPI
plot(predict(Astrocytes_Neurons_Covariance_30D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 30D")

```

##### 6.2.7.1 Save image predictions (CI)

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save CI for astrocyte-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Neurons_CI_0D.png", width = 500, height = 500)
plot(predict(Astrocytes_Neurons_Covariance_0D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 0D")
dev.off()

png("Plots/Astrocytes_Neurons_CI_5D.png", width = 500, height = 500)
plot(predict(Astrocytes_Neurons_Covariance_5D, interval="confidence"), col=Astrocytes_colourmap,shade=0.5,main = "Astrocytes-Neurons covariance 5D")
dev.off()

png("Plots/Astrocytes_Neurons_CI_15D.png", width = 500, height = 500)
plot(predict(Astrocytes_Neurons_Covariance_15D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 15D")
dev.off()

png("Plots/Astrocytes_Neurons_CI_30D.png", width = 500, height = 500)
plot(predict(Astrocytes_Neurons_Covariance_30D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Neurons covariance 30D")
dev.off()
```

#### 6.2.8 Iinfuence of the covariance

##### 6.2.8.1 Calculate the influence

As supplementary material, we can calculate the actual impact (influence) of each data point in the final outcome. The anomalous point (with higher residuals) load the greater influence.Here, we used the `dfbetas` function from spatstat to appreciate the direction of which the data points (neuronal intensity) affects astrocyte allocation.

```{r}
#| label: Calculate influence for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Astrocytes_Neurons_Covariance_Influence_0D <- dfbetas(Astrocytes_Neurons_Covariance_0D)

# For 5 DPI
Astrocytes_Neurons_Covariance_Influence_5D <- dfbetas(Astrocytes_Neurons_Covariance_5D)

# For 15 DPI
Astrocytes_Neurons_Covariance_Influence_15D <- dfbetas(Astrocytes_Neurons_Covariance_15D)

# For 30 DPI
Astrocytes_Neurons_Covariance_Influence_30D <- dfbetas(Astrocytes_Neurons_Covariance_30D)
```

##### 6.2.8.2 Plot the influence

We plot the influence as shown in the supplementary figure 6A.

```{r}
#| label: Plot influence for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Astrocyte_Influence_colourmap <- colourmap(heat.colors(12), range = c(-7e-04, 7e-04))

# For 0 DPI
par(mfrow=c(1,4))
plot(Astrocytes_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 0D")

# For 5 DPI
plot(Astrocytes_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 5D")

# For 15 DPI
plot(Astrocytes_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 15D")

# For 30 DPI
plot(Astrocytes_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 30D")

```

###### 6.2.8.2.1 Save the influence

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save influence for astrocyte-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_Neurons_Influence_0D.png", width = 500, height = 500)
plot(Astrocytes_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 0D")
dev.off()

png("Plots/Astrocytes_Neurons_Influence_5D.png", width = 500, height = 500)
plot(Astrocytes_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main="Astrocytes-Neurons influence 5D")
dev.off()

png("Plots/Astrocytes_Neurons_Influence_15D.png", width = 500, height = 500)
plot(Astrocytes_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main="Astrocytes-Neurons influence 15D")
dev.off()

png("Plots/Astrocytes_Neurons_Influence_30D.png", width = 500, height = 500)
plot(Astrocytes_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main="Astrocytes-Neurons influence 30D")
dev.off()
```

### 6.3 Models per DPI for Microglia-neurons covariance

We perform the same process done for astrocytes-neurons covariance (section 6.2)

#### 6.3.1 Fit the models

```{r}
#| label: Fit models for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We fit the model
Microglia_Neurons_Covariance_0D <- ppm(Iba1_Superimposed_5x_0D ~ NeuN_Intensity_0D)
## We transform the coeficients and 95% confidence intervals to exponential (they are logaritmic)
Microglia_Neurons_Covariance_Coef_0D <- coef(Microglia_Neurons_Covariance_0D)
Microglia_Neurons_Covariance_CI_0D <- confint(Microglia_Neurons_Covariance_0D)


# For 5D
Microglia_Neurons_Covariance_5D <- ppm(Iba1_Superimposed_5x_5D ~ NeuN_Intensity_5D)
Microglia_Neurons_Covariance_Coef_5D <- coef(Microglia_Neurons_Covariance_5D)
Microglia_Neurons_Covariance_CI_5D <- confint(Microglia_Neurons_Covariance_5D)


# For 15D
Microglia_Neurons_Covariance_15D <- ppm(Iba1_Superimposed_5x_15D ~ NeuN_Intensity_15D)
Microglia_Neurons_Covariance_Coef_15D <- coef(Microglia_Neurons_Covariance_15D)
Microglia_Neurons_Covariance_CI_15D <- confint(Microglia_Neurons_Covariance_15D)

# For 30D
Microglia_Neurons_Covariance_30D <- ppm(Iba1_Superimposed_5x_30D ~ NeuN_Intensity_30D)
Microglia_Neurons_Covariance_Coef_30D <- coef(Microglia_Neurons_Covariance_30D)
Microglia_Neurons_Covariance_CI_30D <- confint(Microglia_Neurons_Covariance_30D)
```

#### 6.3.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: Print Microglia-neurons covariance summaries (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true
#| 
Microglia_Neurons_Covariance_0D
Microglia_Neurons_Covariance_5D
Microglia_Neurons_Covariance_15D
Microglia_Neurons_Covariance_30D

```

#### 6.3.3 Intervals (histograms) for microglia-neurons covariance

We plot the histograms represented in figure 3 (F-Hii) of the main research article

```{r}
#| label: Create histograms for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# We calculate the intervals

## For 0 DPI
Neurons_Intensity_Interval_0D <- seq(0,40 *ceiling(max(NeuN_Intensity_0D)/40), by = 40)
Neurons_Intensity_Cut_0D <- cut(NeuN_Intensity_0D, breaks=Neurons_Intensity_Interval_0D, include.lowest=TRUE)
Microglia_QuadrantCount_0D <- quadratcount(Iba1_Superimposed_5x_0D , tess=tess(image=Neurons_Intensity_Cut_0D))
Microglia_Intensity_0D <- intensity(Microglia_QuadrantCount_0D)

## For 5 DPI
Neurons_Intensity_Interval_5D <- seq(0,40 *ceiling(max(NeuN_Intensity_5D)/40), by = 40)
Neurons_Intensity_Cut_5D <- cut(NeuN_Intensity_5D, breaks=Neurons_Intensity_Interval_5D, include.lowest=TRUE)
Microglia_QuadrantCount_5D <- quadratcount(Iba1_Superimposed_5x_5D , tess=tess(image=Neurons_Intensity_Cut_5D))
Microglia_Intensity_5D <- intensity(Microglia_QuadrantCount_5D)

## For 15 DPI
Neurons_Intensity_Interval_15D <- seq(0,40 *ceiling(max(NeuN_Intensity_15D)/40), by = 40)
Neurons_Intensity_Cut_15D <- cut(NeuN_Intensity_15D, breaks=Neurons_Intensity_Interval_15D, include.lowest=TRUE)
Microglia_QuadrantCount_15D <- quadratcount(Iba1_Superimposed_5x_15D , tess=tess(image=Neurons_Intensity_Cut_15D))
Microglia_Intensity_15D <- intensity(Microglia_QuadrantCount_15D)

## For 30 DPI
Neurons_Intensity_Interval_30D <- seq(0,40 *ceiling(max(NeuN_Intensity_30D)/40), by = 40)
Neurons_Intensity_Cut_30D <- cut(NeuN_Intensity_30D, breaks=Neurons_Intensity_Interval_30D, include.lowest=TRUE)
Microglia_QuadrantCount_30D <- quadratcount(Iba1_Superimposed_5x_30D , tess=tess(image=Neurons_Intensity_Cut_30D))
Microglia_Intensity_30D <- intensity(Microglia_QuadrantCount_30D)

# Plot the figures

## For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_0D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 100),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

## For 5 DPI

par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_5D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

## For 15 DPI

par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_15D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


## For 30 DPI

par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_30D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)
```

##### 6.3.3.1 Save intervals (histograms) for microglia-neurons covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save histograms for Microglia-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false

# For 0 DPI

png("Plots/Microglia_Neurons_Hist_0D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_0D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 100),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()

# For 5 DPI

png("Plots/Microglia_Neurons_Hist_5D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_5D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


# For 15 DPI

png("Plots/Microglia_Neurons_Hist_15D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_15D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


# For 30 DPI

png("Plots/Microglia_Neurons_Hist_30D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Microglia_Intensity_30D,  
     main = "Microglia / Neurons",
     xlab = "Neurons (inten)",
     ylim = c(0, 400),
     ylab = "Microglia (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()
```

#### 6.3.4 Plot numerical predictions

We create a function using `as.function` to generate predictions for astrocyte allocation in low neuronal intensities of 50 (low) and 300 (high). The predictions are plotted as blue and red intercepts in figure 3 F-Hiii of the main research article.

```{r}
#| label: Plot microglia-neurons covariance numerical predictions (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We calculate the function (for plotting purpuses)
Microglia_Neurons_Covariance_Function_0D <- effectfun(Microglia_Neurons_Covariance_0D)

## We convert the object to a function to make predictions
Microglia_Neurons_Covariance_Preds_0D <- as.function(Microglia_Neurons_Covariance_Function_0D)

## Prediction for low-intensity neuronal regions (intraleional areas)
paste("The estimate for microglia in low neuronal regions at 0 DPI is:", Microglia_Neurons_Covariance_Preds_0D (50))
## Prediction for high-intensity neuronal regions (extralesional areas)
paste("The estimate for microglia in high neuronal regions at 0 DPI is:",Microglia_Neurons_Covariance_Preds_0D (300))


# For 5D
Microglia_Neurons_Covariance_Function_5D <- effectfun(Microglia_Neurons_Covariance_5D)
Microglia_Neurons_Covariance_Preds_5D <- as.function(Microglia_Neurons_Covariance_Function_5D)
paste("The estimate for microglia in low neuronal regions at 5 DPI is:", Microglia_Neurons_Covariance_Preds_5D (50))
paste("The estimate for microglia in high neuronal regions at 5 DPI is:", Microglia_Neurons_Covariance_Preds_5D (300))


# For 15D
Microglia_Neurons_Covariance_Function_15D <- effectfun(Microglia_Neurons_Covariance_15D)
Microglia_Neurons_Covariance_Preds_15D <- as.function(Microglia_Neurons_Covariance_Function_15D)
paste("The estimate for microglia in low neuronal regions at 15 DPI is:", Microglia_Neurons_Covariance_Preds_15D (50))
paste("The estimate for microglia in high neuronal regions at 15 DPI is:", Microglia_Neurons_Covariance_Preds_15D (300))


# For 30D
Microglia_Neurons_Covariance_Function_30D <- effectfun(Microglia_Neurons_Covariance_30D)
Microglia_Neurons_Covariance_Preds_30D <- as.function(Microglia_Neurons_Covariance_Function_30D)
paste("The estimate for microglia in low neuronal regions at 30 DPI is:", Microglia_Neurons_Covariance_Preds_30D (50))
paste("The estimate for microglia in high neuronal regions at 30 DPI is:", Microglia_Neurons_Covariance_Preds_30D (300))
```

#### 6.3.5 Plot functions and numerical predictions

The functions and predictions are represented in figure 3 F-Hiii of the main research article

```{r}
#| label: Plot microglia-neurons covariance functions and predictions (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI

par(mfrow=c(1,4))
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_0D, "NeuN_Intensity_0D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "", 
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=8,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=8,
         x1=50,
         y1=8,
         col="blue", 
         lwd=3)

text(70, 10, "8", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=18,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=18,
         x1=300,
         y1=18,
         col="red", 
         lwd=3)

text(270, 20, "18", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 5 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_5D, "NeuN_Intensity_5D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=293,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=293,
         x1=50,
         y1=293,
         col="blue", 
         lwd=3)

text(60, 300, "293", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=226,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=226,
         x1=300,
         y1=226,
         col="red", 
         lwd=3)

text(250, 220, "226", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 15 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_15D, "NeuN_Intensity_15D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=279,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=279,
         x1=50,
         y1=279,
         col="blue", 
         lwd=3)

text(60, 300, "279", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=110,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=110,
         x1=300,
         y1=110,
         col="red", 
         lwd=3)

text(290, 130, "110", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 30 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_30D, "NeuN_Intensity_30D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=242,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=242,
         x1=50,
         y1=242,
         col="blue", 
         lwd=3)

text(60, 260, "242", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=109,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=109,
         x1=300,
         y1=109,
         col="red", 
         lwd=3)

text(290, 125, "109", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

```

##### 6.3.5.1 Save functions and numerical predictions

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save microglia-neurons covariance functions and predictions (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_Neurons_Covariance_0D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_0D, "NeuN_Intensity_0D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "", 
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=8,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=8,
         x1=50,
         y1=8,
         col="blue", 
         lwd=3)

text(70, 10, "8", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=18,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=18,
         x1=300,
         y1=18,
         col="red", 
         lwd=3)

text(270, 20, "18", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()


png("Plots/Microglia_Neurons_Covariance_5D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_5D, "NeuN_Intensity_5D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=293,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=293,
         x1=50,
         y1=293,
         col="blue", 
         lwd=3)

text(60, 300, "293", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=226,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=226,
         x1=300,
         y1=226,
         col="red", 
         lwd=3)

text(250, 220, "226", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()


png("Plots/Microglia_Neurons_Covariance_15D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_15D, "NeuN_Intensity_15D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=279,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=279,
         x1=50,
         y1=279,
         col="blue", 
         lwd=3)

text(60, 300, "279", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=110,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=110,
         x1=300,
         y1=110,
         col="red", 
         lwd=3)

text(290, 130, "110", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()


png("Plots/Microglia_Neurons_Covariance_30D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Microglia_Neurons_Covariance_30D, "NeuN_Intensity_30D", se.fit=TRUE), 
     main="ppm (microglia / neurons)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=242,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=242,
         x1=50,
         y1=242,
         col="blue", 
         lwd=3)

text(60, 260, "242", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=109,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=109,
         x1=300,
         y1=109,
         col="red", 
         lwd=3)

text(290, 125, "109", cex=3)

title(xlab = "Neurons (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(microglia)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()
```

#### 6.3.6 Plot model (image) predictions

We use the `spatstat` function `predict` to generate images with model predictions and their corresponding standart errors (se). These images are represented in figure 3F-Hiv of the main research article.

```{r}
#| label: Plot model predictions for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

Microglia_colourmap <- colourmap(topo.colors(256), range = c(0, 400))
Microglia_SE_colourmap <- colourmap(topo.colors(256), range = c(0, 15))

par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_0D), col=Microglia_colourmap, main="Prediction 0D")
plot(predict(Microglia_Neurons_Covariance_0D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 30D")

par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_5D), col=Microglia_colourmap, main="Prediction 5D")
plot(predict(Microglia_Neurons_Covariance_5D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 5D")

par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_15D), col=Microglia_colourmap, main="Prediction 15D")
plot(predict(Microglia_Neurons_Covariance_15D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 15D")

par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_30D), col=Microglia_colourmap, main="Prediction 30D")
plot(predict(Microglia_Neurons_Covariance_30D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 30D")


```

##### 6.3.6.1 Save model (image) predictions

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save model predictions for microglia-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_Neurons_Predict_0D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_0D), col=Microglia_colourmap, main="Prediction 0D")
plot(predict(Microglia_Neurons_Covariance_0D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 30D")
dev.off()

png("Plots/Microglia_Neurons_Predict_5D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_5D), col=Microglia_colourmap, main="Prediction 5D")
plot(predict(Microglia_Neurons_Covariance_5D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 5D")
dev.off()

png("Plots/Microglia_Neurons_Predict_15D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_15D), col=Microglia_colourmap, main="Prediction 15D")
plot(predict(Microglia_Neurons_Covariance_15D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 15D")
dev.off()

png("Plots/Microglia_Neurons_Predict_30D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Microglia_Neurons_Covariance_30D), col=Microglia_colourmap, main="Prediction 30D")
plot(predict(Microglia_Neurons_Covariance_30D, se=TRUE)$se, col=Microglia_SE_colourmap, main="se 30D")
dev.off()
```

#### 6.3.7 Plot image predictions (CI)

We use `predict` with the argument `interval=confidence"` to generate image predictions comprising 95% CI. These images are shown in the supplementary figure 6B.

```{r}
#| label: Plot CI for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 15

# For 0 DPI
par(mfrow=c(1,4))
plot(predict(Microglia_Neurons_Covariance_0D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 0D")

# For 5 DPI
plot(predict(Microglia_Neurons_Covariance_5D, interval="confidence"), col=Microglia_colourmap,shade=0.5,main = "Microglia-Neurons covariance 5D")

# For 15 DPI
plot(predict(Microglia_Neurons_Covariance_15D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 15D")

# For 30 DPI
plot(predict(Microglia_Neurons_Covariance_30D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 30D")
```

##### 6.3.7.1 Save image predictions (CI)

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save CI for microglia-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false


# For 0 DPI
png("Plots/Microglia_Neurons_CI_0D.png", width = 500, height = 500)
plot(predict(Microglia_Neurons_Covariance_0D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 0D")
dev.off()


# For 5 DPI
png("Plots/Microglia_Neurons_CI_5D.png", width = 500, height = 500)
plot(predict(Microglia_Neurons_Covariance_5D, interval="confidence"), col=Microglia_colourmap,shade=0.5,main = "Microglia-Neurons covariance 5D")
dev.off()

# For 15 DPI
png("Plots/Microglia_Neurons_CI_15D.png", width = 500, height = 500)
plot(predict(Microglia_Neurons_Covariance_15D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 15D")
dev.off()

# For 30 DPI
png("Plots/Microglia_Neurons_CI_30D.png", width = 500, height = 500)
plot(predict(Microglia_Neurons_Covariance_30D, interval="confidence"), col=Microglia_colourmap, shade=0.5, main = "Microglia-Neurons covariance 30D")
dev.off()
```

#### 6.3.8 Influence of the covariance

We calculate the influence as done previously for astrocyte-neurons covariance

##### 6.3.8.1 Calculate the influence

```{r}
#| label: Calculate influence for microglia-neuron covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

Microglia_Neurons_Covariance_Influence_0D <- dfbetas(Microglia_Neurons_Covariance_0D)
Microglia_Neurons_Covariance_Influence_5D <- dfbetas(Microglia_Neurons_Covariance_5D)
Microglia_Neurons_Covariance_Influence_15D <- dfbetas(Microglia_Neurons_Covariance_15D)
Microglia_Neurons_Covariance_Influence_30D <- dfbetas(Microglia_Neurons_Covariance_30D)
```

##### 6.3.8.2 Plot the influence

We plot the influence as shown in the supplementary figure 6B.

```{r}
#| label: Plot influence for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Microglia_Influence_colourmap <- colourmap(heat.colors(12), range = c(-7e-04, 7e-04))

# For 0 DPI
par(mfrow=c(1,4))
plot(Microglia_Neurons_Covariance_Influence_0D, col=Microglia_Influence_colourmap, main = "Microglia-Neurons influence 0D")

# For 5 DPI
plot(Microglia_Neurons_Covariance_Influence_5D, col=Microglia_Influence_colourmap, main = "Microglia-Neurons influence 5D")

# For 15 DPI
plot(Microglia_Neurons_Covariance_Influence_15D, col=Microglia_Influence_colourmap, main = "Microglia-Neurons influence 15D")

# For 30 DPI
plot(Microglia_Neurons_Covariance_Influence_30D, col=Microglia_Influence_colourmap, main = "Microglia-Neurons influence 30D")
```

###### 6.3.8.2.1 Save the influence

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save influence for microglia-neurons covariance (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_Neurons_Influence_0D.png", width = 500, height = 500)
plot(Microglia_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "Microglia-Neurons influence 0D")
dev.off()

png("Plots/Microglia_Neurons_Influence_5D.png", width = 500, height = 500)
plot(Microglia_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main="Microglia-Neurons influence 5D")
dev.off()

png("Plots/Microglia_Neurons_Influence_15D.png", width = 500, height = 500)
plot(Microglia_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main="Microglia-Neurons influence 15D")
dev.off()

png("Plots/Microglia_Neurons_Influence_30D.png", width = 500, height = 500)
plot(Microglia_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main="Microglia-Neurons influence 30D")
dev.off()
```

The results of astrocytes-neurons and microglia-neurons covariance developed in the previous ode chunks are depicted in the figure 3 and supplementary figure 6 of the main research article as shown in the following Thumbnails:

::: {layout-ncol="2"}
![Figure 3 (main research article)](images/GlialTopology_Fig3.png)

![Supplementary figure 6 (main research article)](images/GlialTopology_Suppl_Fig6.png)
:::

### 6.4 Models per DPI for astrocytes-microglia covariance

We performed the same procedure to analyze the covariance between astrocytes and microglia. Different to the other covariance analysis, we do not analyzed 0 DPI (control animals) given the lack of reactive glia at this time point. The results are displayed in figure 5 and supplementary figure 8.

#### 6.4.1 Fit the models

We fit nonstationary poisson process models using the `ppm` function form `spatstat`. However, please not that our model of reference is the one including individual brain in a replicated point pattern. The current models aim to achieve a single numerical and prediction estimation per time point.

```{r}
#| label: Fit models for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false

# For 5D
Astrocytes_Microglia_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ Iba1_Intensity_5D)
Astrocytes_Microglia_Covariance_Coef_5D <- exp(coef(Astrocytes_Microglia_Covariance_5D))
Astrocytes_Microglia_Covariance_CI_5D <- exp(confint(Astrocytes_Microglia_Covariance_5D))


# For 15D
Astrocytes_Microglia_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ Iba1_Intensity_15D)
Astrocytes_Microglia_Covariance_Coef_15D <- exp(coef(Astrocytes_Microglia_Covariance_15D))
Astrocytes_Microglia_Covariance_CI_15D <- exp(confint(Astrocytes_Microglia_Covariance_15D))

# For 30D
Astrocytes_Microglia_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ Iba1_Intensity_30D)
Astrocytes_Microglia_Covariance_Coef_30D <- exp(coef(Astrocytes_Microglia_Covariance_30D))
Astrocytes_Microglia_Covariance_CI_30D <- exp(confint(Astrocytes_Microglia_Covariance_30D))
```

#### 6.4.2 Model summaries

Here we plot the model summaries

```{r}
#| label: Print model summaries for astrocytes-Microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false

Astrocytes_Microglia_Covariance_5D
Astrocytes_Microglia_Covariance_15D
Astrocytes_Microglia_Covariance_30D

```

#### 6.4.3 Intervals (histograms) for microglia-neurons covariance

```{r}
#| label: Create histograms for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4


# Calculate the intervals

## For 5 DPI
Microglia_Intensity_Interval_5D <- seq(0,40 *ceiling(max(NeuN_Intensity_5D)/40), by = 40)
Microglia_Intensity_Cut_5D <- cut(NeuN_Intensity_5D, breaks=Microglia_Intensity_Interval_5D, include.lowest=TRUE)
Astrocytes_QuadrantCount_5D <- quadratcount(Gfap_Superimposed_5x_5D , tess=tess(image=Microglia_Intensity_Cut_5D))
Astrocytes_Intensity_5D <- intensity(Astrocytes_QuadrantCount_5D)

## For 15 DPI
Microglia_Intensity_Interval_15D <- seq(0,40 *ceiling(max(NeuN_Intensity_15D)/40), by = 40)
Microglia_Intensity_Cut_15D <- cut(NeuN_Intensity_15D, breaks=Microglia_Intensity_Interval_15D, include.lowest=TRUE)
Astrocytes_QuadrantCount_15D <- quadratcount(Gfap_Superimposed_5x_15D , tess=tess(image=Microglia_Intensity_Cut_15D))
Astrocytes_Intensity_15D <- intensity(Astrocytes_QuadrantCount_15D)

## For 30 DPI
Microglia_Intensity_Interval_30D <- seq(0,40 *ceiling(max(NeuN_Intensity_30D)/40), by = 40)
Microglia_Intensity_Cut_30D <- cut(NeuN_Intensity_30D, breaks=Microglia_Intensity_Interval_30D, include.lowest=TRUE)
Astrocytes_QuadrantCount_30D <- quadratcount(Gfap_Superimposed_5x_30D , tess=tess(image=Microglia_Intensity_Cut_30D))
Astrocytes_Intensity_30D <- intensity(Astrocytes_QuadrantCount_30D)


# plot the graphs

## For 5 DPI
par(mfrow=c(1,3))
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_5D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


## For 15 DPI
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_15D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

## For 30 DPI
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_30D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)


```

##### 6.4.3.1 Save intervals (histograms) for microglia-neurons covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save histograms for astrocytes-microglia covariance (ppm)
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Microglia_Hist_5D.png", width = 400, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_5D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


png("Plots/Astrocytes_Microglia_Hist_15D.png", width = 400, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_15D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()


png("Plots/Astrocytes_Microglia_Hist_30D.png", width = 400, height = 400)
par(mar=c(5,6,4,1)+.1)
barplot(Astrocytes_Intensity_30D,  
     main = "Astrocytes / Microglia",
     xlab = "Microglia (inten)",
     ylim = c(0, 400),
     ylab = "Astrocytes (inten)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 3,
     legend=FALSE)

dev.off()
```

#### 6.4.4 Plot numerical predictions

We create a function using `as.function` to generate predictions for astrocyte allocation in microglial areas as done previously.

```{r}
#| label: Plot astrocytes-microglia covariance numerical predictions (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 5D
Astrocytes_Microglia_Covariance_Function_5D <- effectfun(Astrocytes_Microglia_Covariance_5D)
Astrocytes_Microglia_Covariance_Preds_5D <- as.function(Astrocytes_Microglia_Covariance_Function_5D)
paste("The estimate for astrocytes in low microglial regions at 5 DPI is:", Astrocytes_Microglia_Covariance_Preds_5D (50))
paste("The estimate for astrocytes in high microglial regions at 5 DPI is:",Astrocytes_Microglia_Covariance_Preds_5D (300))


# For 15D
Astrocytes_Microglia_Covariance_Function_15D <- effectfun(Astrocytes_Microglia_Covariance_15D)
Astrocytes_Microglia_Covariance_Preds_15D <- as.function(Astrocytes_Microglia_Covariance_Function_15D)
paste("The estimate for astrocytes in low microglial regions at 15 DPI is:", Astrocytes_Microglia_Covariance_Preds_15D (50))
paste("The estimate for astrocytes in high microglial regions at 15 DPI is:", Astrocytes_Microglia_Covariance_Preds_15D (300))


# For 30D
Astrocytes_Microglia_Covariance_Function_30D <- effectfun(Astrocytes_Microglia_Covariance_30D)
Astrocytes_Microglia_Covariance_Preds_30D <- as.function(Astrocytes_Microglia_Covariance_Function_30D)
paste("The estimate for astrocytes in low microglial regions at 30 DPI is:", Astrocytes_Microglia_Covariance_Preds_30D (50))
paste("The estimate for astrocytes in high microglial regions at 30 DPI is:", Astrocytes_Microglia_Covariance_Preds_30D (300))
```

#### 6.4.5 Plot functions and numerical predictions

We plot the functions represented in figure 5 of the research article

```{r}
#| label: Plot astrocytes-Microglia covariance functions
#| include: true
#| warning: false
#| message: false
#| cache: true
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4


# For 5 DPI
par(mfrow=c(1,3))
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Microglia_Covariance_5D, "Iba1_Intensity_5D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=240,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=240,
         x1=50,
         y1=240,
         col="blue", 
         lwd=3)

text(60, 260, "240", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=142,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=142,
         x1=300,
         y1=142,
         col="red", 
         lwd=3)

text(260, 160, "142", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 


# For 15 DPI

par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Microglia_Covariance_15D, "Iba1_Intensity_15D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=148,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=148,
         x1=50,
         y1=148,
         col="blue", 
         lwd=3)

text(60, 160, "148", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=260,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=260,
         x1=300,
         y1=260,
         col="red", 
         lwd=3)

text(260, 240, "260", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

# For 30 DPI

par(mar=c(5,6,4,1)+0.5)
plot(effectfun(Astrocytes_Microglia_Covariance_30D, "Iba1_Intensity_30D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=170,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=170,
         x1=50,
         y1=170,
         col="blue", 
         lwd=3)

text(60, 180, "170", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=447,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=447,
         x1=300,
         y1=447,
         col="red", 
         lwd=3)

text(280, 420, "447", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 2.5) 
```

##### 6.4.5.1 Save functions and numerical predictions

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save astrocytes-Microglia covariance functions
#| include: false
#| warning: false
#| message: false
#| cache: true


# For 5 DPI

png("Plots/Astrocytes_Microglia_Covariance_5D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Microglia_Covariance_5D, "Iba1_Intensity_5D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=240,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=240,
         x1=50,
         y1=240,
         col="blue", 
         lwd=3)

text(60, 260, "240", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=142,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=142,
         x1=300,
         y1=142,
         col="red", 
         lwd=3)

text(260, 160, "142", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5) 

dev.off()



png("Plots/Astrocytes_Microglia_Covariance_15D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.1)
plot(effectfun(Astrocytes_Microglia_Covariance_15D, "Iba1_Intensity_15D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=148,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=148,
         x1=50,
         y1=148,
         col="blue", 
         lwd=3)

text(60, 160, "148", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=260,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=260,
         x1=300,
         y1=260,
         col="red", 
         lwd=3)

text(260, 240, "260", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(4.5, 1, 0), cex.lab = 2.5)

dev.off()


png("Plots/Astrocytes_Microglia_Covariance_30D.png", width = 500, height = 400)
par(mar=c(5,6,4,1)+0.5)
plot(effectfun(Astrocytes_Microglia_Covariance_30D, "Iba1_Intensity_30D", se.fit=TRUE), 
     main="ppm (astrocytes / microglia)", 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 3, 
     legend=FALSE, 
     xlab = "",
     xlim = c(0, 300),
     ylab = "",
     cex.main = 2.5,
     cex.lab = 2.5, 
     cex.axis = 2)

segments(x0=50,
         y0=0,
         x1=50,
         y1=170,
         col="blue", 
         lwd=3)

segments(x0=0,
         y0=170,
         x1=50,
         y1=170,
         col="blue", 
         lwd=3)

text(60, 180, "170", cex=3)


segments(x0=300,
         y0=0,
         x1=300,
         y1=447,
         col="red", 
         lwd=3)

segments(x0=0,
         y0=447,
         x1=300,
         y1=447,
         col="red", 
         lwd=3)

text(280, 420, "447", cex=3)

title(xlab = "Microglia (inten)", mgp = c(3, 1, 0), cex.lab = 2.5)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 2.5)   

dev.off()
```

#### 6.4.6 Plot model (image) predictions

We use `predict` to generate image predictions and their standart errors (se).

```{r}
#| label: Plot model predictions for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

Astrocytes_colourmap <- colourmap(topo.colors(256), range = c(0, 600))
Astrocytes_SE_colourmap <- colourmap(topo.colors(256), range = c(0, 20))


par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_5D), col=Astrocytes_colourmap, main="Prediction 5D")
plot(predict(Astrocytes_Microglia_Covariance_5D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 5D")

par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_15D), col=Astrocytes_colourmap, main="Prediction 15D")
plot(predict(Astrocytes_Microglia_Covariance_15D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 15D")

par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_30D), col=Astrocytes_colourmap, main="Prediction 30D")
plot(predict(Astrocytes_Microglia_Covariance_30D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 30D")
```

##### 6.4.6. Save model (image) predictions

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save model predictions for astrocytes-microglia covariance (ppm)
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_Microglia_Predict_5D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_5D), col=Astrocytes_colourmap, main="Prediction 5D")
plot(predict(Astrocytes_Microglia_Covariance_5D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 5D")
dev.off()

png("Plots/Astrocytes_Microglia_Predict_15D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_15D), col=Astrocytes_colourmap, main="Prediction 15D")
plot(predict(Astrocytes_Microglia_Covariance_15D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 15D")
dev.off()

png("Plots/Astrocytes_Microglia_Predict_30D.png", width = 500, height = 500)
par(mfrow=c(1,2))
plot(predict(Astrocytes_Microglia_Covariance_30D), col=Astrocytes_colourmap, main="Prediction 30D")
plot(predict(Astrocytes_Microglia_Covariance_30D, se=TRUE)$se, col=Astrocytes_SE_colourmap, main="se 30D")
dev.off()
```

#### 6.4.7 Plot model (image) predictions (CI)

We plot CIs

```{r}
#| label: Plot CI for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 15

# For 5 DPI
par(mfrow=c(1,3))
plot(predict(Astrocytes_Microglia_Covariance_5D, interval="confidence"), col=Astrocytes_colourmap,shade=0.5,main = "Astrocytes-Microglia covariance 5D")

# For 15 DPI
plot(predict(Astrocytes_Microglia_Covariance_15D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Microglia covariance 15D")

# For 30 DPI
plot(predict(Astrocytes_Microglia_Covariance_30D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Microglia covariance 30D")

```

##### 6.4.7.1 Save model (image) predictions (CI)

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save CI for astrocytes-microglia covariance (ppm)
#| include: false
#| warning: false
#| message: false


# For 5 DPI
png("Plots/Astrocytes_Microglia_CI_5D.png", width = 500, height = 500)
plot(predict(Astrocytes_Microglia_Covariance_5D, interval="confidence"), col=Astrocytes_colourmap,shade=0.5,main = "Astrocytes-Microglia covariance 5D")
dev.off()

# For 15 DPI
png("Plots/Astrocytes_Microglia_CI_15D.png", width = 500, height = 500)
plot(predict(Astrocytes_Microglia_Covariance_15D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Microglia covariance 15D")
dev.off()

# For 30 DPI
png("Plots/Astrocytes_Microglia_CI_30D.png", width = 500, height = 500)
plot(predict(Astrocytes_Microglia_Covariance_30D, interval="confidence"), col=Astrocytes_colourmap, shade=0.5, main = "Astrocytes-Microglia covariance 30D")
dev.off()

```

#### 6.4.8 Influence of the covariance

#### 6.4.8.1 Calculate the influence

```{r}
#| label: Calculate influence for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5


Astrocytes_Microglia_Covariance_Influence_5D <- dfbetas(Astrocytes_Microglia_Covariance_5D)
Astrocytes_Microglia_Covariance_Influence_15D <- dfbetas(Astrocytes_Microglia_Covariance_15D)
Astrocytes_Microglia_Covariance_Influence_30D <- dfbetas(Astrocytes_Microglia_Covariance_30D)
```

##### 6.4.8.1 Plot the influence

We plot the influence as shown in the supplementary figure 6B.

```{r}
#| label: Plot influence for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5


Astrocytes_Influence_colourmap <- colourmap(heat.colors(12), range = c(-0.2, 0.2))

# For 5 DPI
plot(Astrocytes_Microglia_Covariance_Influence_5D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 5D")

# For 15 DPI
plot(Astrocytes_Microglia_Covariance_Influence_15D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 15D")

# For 30 DPI
plot(Astrocytes_Microglia_Covariance_Influence_30D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 30D")
```

##### 6.4.8.2 Save the influence

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save influence for astrocytes-microglia covariance (ppm)
#| include: false
#| warning: false
#| message: false

# For 5 DPI
png("Plots/Astrocytes_Microglias_Influence_5D.png", width = 500, height = 500)
plot(Astrocytes_Microglia_Covariance_Influence_5D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 5D")
dev.off()

# For 15 DPI
png("Plots/Astrocytes_Microglias_Influence_15D.png", width = 500, height = 500)
plot(Astrocytes_Microglia_Covariance_Influence_15D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 15D")
dev.off()

# For 30 DPI
png("Plots/Astrocytes_Microglias_Influence_30D.png", width = 500, height = 500)
plot(Astrocytes_Microglia_Covariance_Influence_30D, col=Astrocytes_Influence_colourmap, main = "Astrocytes-Microglia influence 30D")
dev.off()
```

The result of the previews chunks for astrocyte-microglia covariance are in figure 5 and supplementary figure 8 of the main research article as depicted in the following thumbnails:

::: {layout-ncol="2"}
![Figure 5 (main reserch article)](images/GlialTopology_Fig5.png)

![Supplementary figure 8 (main research article)](images/GlialTopology_Suppl_Fig8.png)
:::

## 7. Relative distribution estimation

We have analyzed cell allocation assuming that their intensity is related (or is a function) of a covariate (neuronal or microglial allocation). We can perform a non-parametric estimation of a function revealing how the intensity of the point pattern of interest depends on a defined covariate. This estimation is performed using the `rhohat` function from `spatstat`. The result of `rhohat` is an object representing the estimated function ÏË(z) against covariate values z, accompanied by 95% confidence bands [@spatstat]. We performed the same procedures described above for the covariate pairs of interest (astrocytes-neurons, microglia-neurons, astrocytes-microglia) Using the `Point_Patterns_10x` hyperframe.

### 7.1 Subset the 10x hyperframes

Here we subset the `Point_Pattern_10x` hyperframe to obtain objects per DPI.

```{r}
#| label: Subset the Point_Pattern_10x data frame per time point
#| include: true
#| warning: false
#| message: false


Point_Patterns_10x_0D <- subset(Point_Patterns_10x, DPI=="0D", select = 1:11)
Point_Patterns_10x_5D <- subset(Point_Patterns_10x, DPI=="5D", select = 1:11) 
Point_Patterns_10x_15D <- subset(Point_Patterns_10x, DPI=="15D", select = 1:11) 
Point_Patterns_10x_30D <- subset(Point_Patterns_10x, DPI=="30D", select = 1:11)
```

### 7.2 Relative distribution (rhohat) for astrocytes in neuronal regions

We pass the `rhohat` function to each of the DPIs. We set up do.CI=FALSE to avoid the calculation of coefficient intervals. This metric will be obtained by pooling of all images per time point with the `pool` function. The `pool` function allows the estimation of a single graphical summary per time point, reflecting the data variability.

#### 7.2.1 Calculate the rhohat

```{r}
#| label: Calculate rhohat for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false

# For 0 DPI

## We pass the rohat funtion the the hyperframe subset
Astrocytes_Neurons_Rhohat_10x_0D <- with(Point_Patterns_10x_0D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

# We pool the estimates for all the images in the hyperframe according to the labeling given.
Astrocytes_Neurons_PoolRhohat_10x_0D <- spatstat.explore::pool.fv(Astrocytes_Neurons_Rhohat_10x_0D$`126`, Astrocytes_Neurons_Rhohat_10x_0D$`127`, Astrocytes_Neurons_Rhohat_10x_0D$`128`, Astrocytes_Neurons_Rhohat_10x_0D$`129`, Astrocytes_Neurons_Rhohat_10x_0D$`130`)


# For 5 DPI
Astrocytes_Neurons_Rhohat_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohat_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Neurons_Rhohat_10x_5D$`1`, Astrocytes_Neurons_Rhohat_10x_5D$`12`, Astrocytes_Neurons_Rhohat_10x_5D$`17`, Astrocytes_Neurons_Rhohat_10x_5D$`18`, Astrocytes_Neurons_Rhohat_10x_5D$`110`, Astrocytes_Neurons_Rhohat_10x_5D$`118`, Astrocytes_Neurons_Rhohat_10x_5D$`119`, Astrocytes_Neurons_Rhohat_10x_5D$`120`, Astrocytes_Neurons_Rhohat_10x_5D$`121`)

# For 15 DPI
Astrocytes_Neurons_Rhohat_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohat_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Neurons_Rhohat_10x_15D$`13`, Astrocytes_Neurons_Rhohat_10x_15D$`15`, Astrocytes_Neurons_Rhohat_10x_15D$`111`, Astrocytes_Neurons_Rhohat_10x_15D$`114`, Astrocytes_Neurons_Rhohat_10x_15D$`115`, Astrocytes_Neurons_Rhohat_10x_15D$`122`, Astrocytes_Neurons_Rhohat_10x_15D$`124`, Astrocytes_Neurons_Rhohat_10x_15D$`125`)

# For 30 DPI
Astrocytes_Neurons_Rhohat_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohat_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Neurons_Rhohat_10x_30D$`11`, Astrocytes_Neurons_Rhohat_10x_30D$`14`, Astrocytes_Neurons_Rhohat_10x_30D$`16`, Astrocytes_Neurons_Rhohat_10x_30D$`19`, Astrocytes_Neurons_Rhohat_10x_30D$`112`, Astrocytes_Neurons_Rhohat_10x_30D$`113`, Astrocytes_Neurons_Rhohat_10x_30D$`116`, Astrocytes_Neurons_Rhohat_10x_30D$`117`, Astrocytes_Neurons_Rhohat_10x_30D$`123`)

```

#### 7.2.2 Plot the rhohat

Now we plot the figures using the R-base graphic system. The argument `shade` allows the conversion of higher and lowers estimate lines to a shadowed region.

```{r}
#| label: Plot rhohat for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5



# For 0 DPI

par(mfrow=c(1,4))
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_0D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(3000, 9000, 3000), labels = c("3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000","4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 


# For 5 DPI

par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0",  "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 8000, 2000), labels = c("0","2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15 DPI

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 20000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1500, 500), labels = c("0", "500", "1000","1500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 20000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4), expression("2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0", "3000", "6000","9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)
```

##### 7.2.2.1 Save rhohat figures

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save rhohat for astrocytes-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Neurons_Rhohat_10x_0D.png", width = 500, height = 500)
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_0D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(3000, 9000, 3000), labels = c("3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000","4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Neurons_Rhohat_10x_5D.png", width = 500, height = 500)
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0",  "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 8000, 2000), labels = c("0","2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Neurons_Rhohat_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 20000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1500, 500), labels = c("0", "500", "1000","1500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 20000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4), expression("2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()

png("Plots/Astrocytes_Neurons_Rhohat_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohat_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000","9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()

```

#### 7.2.3 Calculate area under the curve

To estimate the strength of the covariance (neurons) we calculated the area under the curve (AUC) using the `auc` function from `spatstat`. Given that we expect high density of glial cells where the neuronal intensity is low, this parameter can be interpreted as the probability that a data point will have a lower value that the covariate.

```{r}
#| label: Calculate AUC for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false

Astrocytes_Neurons_AUC_0D <- with(Point_Patterns_10x_0D, auc(Astrocytes, Neurons_Dens, high = TRUE))
paste("AUC for 0 DPI is:", median(Astrocytes_Neurons_AUC_0D))

Astrocytes_Neurons_AUC_5D <- with(Point_Patterns_10x_5D, auc(Astrocytes, Neurons_Dens, high = TRUE))
paste("AUC for 5 DPI is:", median(Astrocytes_Neurons_AUC_5D))

Astrocytes_Neurons_AUC_15D <- with(Point_Patterns_10x_15D, auc(Astrocytes, Neurons_Dens, high = TRUE))
paste("AUC for 15 DPI is:", median(Astrocytes_Neurons_AUC_15D))

Astrocytes_Neurons_AUC_30D <- with(Point_Patterns_10x_30D, auc(Astrocytes, Neurons_Dens, high = TRUE))
paste("AUC for 30 DPI is:", median(Astrocytes_Neurons_AUC_30D))

```

### 7.3 Relative distribution (rhohat) for microglia in neuronal regions

#### 7.3.1 Calculate the rhohat

We perform the same `rhohat` estimation per time point for microglia-neurons covariance.

```{r}
#| label: Calculate rhohat for microglia-neurons covariance
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Microglia_Neurons_Rhohat_10x_0D <- with(Point_Patterns_10x_0D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_PoolRhohat_10x_0D <- spatstat.explore::pool.fv(Microglia_Neurons_Rhohat_10x_0D$`126`, Microglia_Neurons_Rhohat_10x_0D$`127`, Microglia_Neurons_Rhohat_10x_0D$`128`, Microglia_Neurons_Rhohat_10x_0D$`129`, Microglia_Neurons_Rhohat_10x_0D$`130`)


# For 5 DPI
Microglia_Neurons_Rhohat_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_PoolRhohat_10x_5D <- spatstat.explore::pool.fv(Microglia_Neurons_Rhohat_10x_5D$`1`, Microglia_Neurons_Rhohat_10x_5D$`12`, Microglia_Neurons_Rhohat_10x_5D$`17`, Microglia_Neurons_Rhohat_10x_5D$`18`, Microglia_Neurons_Rhohat_10x_5D$`110`, Microglia_Neurons_Rhohat_10x_5D$`118`, Microglia_Neurons_Rhohat_10x_5D$`119`, Microglia_Neurons_Rhohat_10x_5D$`120`, Microglia_Neurons_Rhohat_10x_5D$`121`)


# For 15 DPI
Microglia_Neurons_Rhohat_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_PoolRhohat_10x_15D <- spatstat.explore::pool.fv(Microglia_Neurons_Rhohat_10x_15D$`13`, Microglia_Neurons_Rhohat_10x_15D$`15`, Microglia_Neurons_Rhohat_10x_15D$`111`, Microglia_Neurons_Rhohat_10x_15D$`114`, Microglia_Neurons_Rhohat_10x_15D$`115`, Microglia_Neurons_Rhohat_10x_15D$`122`, Microglia_Neurons_Rhohat_10x_15D$`124`, Microglia_Neurons_Rhohat_10x_15D$`125`)

# For 30 DPI
Microglia_Neurons_Rhohat_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_PoolRhohat_10x_30D <- spatstat.explore::pool.fv(Microglia_Neurons_Rhohat_10x_30D$`11`, Microglia_Neurons_Rhohat_10x_30D$`14`, Microglia_Neurons_Rhohat_10x_30D$`16`, Microglia_Neurons_Rhohat_10x_30D$`19`, Microglia_Neurons_Rhohat_10x_30D$`112`, Microglia_Neurons_Rhohat_10x_30D$`113`, Microglia_Neurons_Rhohat_10x_30D$`116`, Microglia_Neurons_Rhohat_10x_30D$`117`, Microglia_Neurons_Rhohat_10x_30D$`123`)

```

#### 7.3.2 Plot the rhohat

```{r}
#| label: Plot rhohat for miroglia-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_0D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(4000, 9000, 2000), labels = c("4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000","4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_5D,
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 9000, 3000), labels = c("0", "3000","6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_15D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1500, 500), labels = c("0", "500", "1000", "1500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 
```

##### 7.3.2.1 Save rhohat figures

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: save rhohat for microglia-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Microglia_Neurons_Rhohat_10x_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_0D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(4000, 9000, 2000), labels = c("4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000","4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 


dev.off()

png("Plots/Microglia_Neurons_Rhohat_10x_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_5D,
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 9000, 3000), labels = c("0", "3000","6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Microglia_Neurons_Rhohat_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_15D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1500, 500), labels = c("0", "500", "1000", "1500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Microglia_Neurons_Rhohat_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohat_10x_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 5000), labels = c("0",expression("5x10"^3), expression("10x10"^4), expression("15x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()
```

#### 7.3.3 Calculate area under the curve

We calculate the ACU as done for astrocytes-neurons covariance.

```{r}
#| label: Calculate area under the curve for microglia-neurons covariance
#| include: true
#| warning: false
#| message: false


Microglia_Neurons_AUC_0D <- with(Point_Patterns_10x_0D, auc(Microglia, Neurons_Dens, high = TRUE))
paste("AUC for 0 DPI is:", median(Microglia_Neurons_AUC_0D))

Microglia_Neurons_AUC_5D <- with(Point_Patterns_10x_5D, auc(Microglia, Neurons_Dens, high = TRUE))
paste("AUC for 0 DPI is:", median(Microglia_Neurons_AUC_5D))

Microglia_Neurons_AUC_15D <- with(Point_Patterns_10x_15D, auc(Microglia, Neurons_Dens, high = TRUE))
paste("AUC for 0 DPI is:", median(Microglia_Neurons_AUC_15D))

Microglia_Neurons_AUC_30D <- with(Point_Patterns_10x_30D, auc(Microglia, Neurons_Dens, high = TRUE))
paste("AUC for 0 DPI is:", median(Microglia_Neurons_AUC_30D))

```

### 7.4 Relative distribution (rhohat) for astrocytes in microglial regions

#### 7.4.1 Calculate the rhohat

```{r}
#| label: Calculate rhohat for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Microglia_Rhohat_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dens, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohat_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Microglia_Rhohat_10x_5D$`1`, Astrocytes_Microglia_Rhohat_10x_5D$`12`, Astrocytes_Microglia_Rhohat_10x_5D$`17`, Astrocytes_Microglia_Rhohat_10x_5D$`18`, Astrocytes_Microglia_Rhohat_10x_5D$`110`, Astrocytes_Microglia_Rhohat_10x_5D$`118`, Astrocytes_Microglia_Rhohat_10x_5D$`119`, Astrocytes_Microglia_Rhohat_10x_5D$`120`, Astrocytes_Microglia_Rhohat_10x_5D$`121`)

# For 15 DPI
Astrocytes_Microglia_Rhohat_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dens, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohat_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Microglia_Rhohat_10x_15D$`13`, Astrocytes_Microglia_Rhohat_10x_15D$`15`, Astrocytes_Microglia_Rhohat_10x_15D$`111`, Astrocytes_Microglia_Rhohat_10x_15D$`114`, Astrocytes_Microglia_Rhohat_10x_15D$`115`, Astrocytes_Microglia_Rhohat_10x_15D$`122`, Astrocytes_Microglia_Rhohat_10x_15D$`124`, Astrocytes_Microglia_Rhohat_10x_15D$`125`)

# For 30 DPI
Astrocytes_Microglia_Rhohat_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dens, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohat_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Microglia_Rhohat_10x_30D$`11`, Astrocytes_Microglia_Rhohat_10x_30D$`14`, Astrocytes_Microglia_Rhohat_10x_30D$`16`, Astrocytes_Microglia_Rhohat_10x_30D$`19`, Astrocytes_Microglia_Rhohat_10x_30D$`112`, Astrocytes_Microglia_Rhohat_10x_30D$`113`, Astrocytes_Microglia_Rhohat_10x_30D$`116`, Astrocytes_Microglia_Rhohat_10x_30D$`117`, Astrocytes_Microglia_Rhohat_10x_30D$`123`)

```

#### 7.4.2 Plot the rhohat

We plot the clculated rhohat

```{r}
#| label: Plot rhohat for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4


# For 5D
par(mfrow=c(1,3))
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0",  "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 8000, 2000), labels = c("0","2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(4000, 13000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

# For 30D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)


```

##### 7.4.2.1 Save rhohat figures

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save rhohat for astrocytes-Microglia covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Microglia_Rhohat_10x_5D.png", width = 500, height = 500)
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0",  "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 8000, 2000), labels = c("0","2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Microglia_Rhohat_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(4000, 13000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)


dev.off()

png("Plots/Astrocytes_Microglia_Rhohat_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohat_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()

```

#### 7.4.3 Calculate area under the curve

```{r}
#| label: Calculate area under the curve for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false

Astrocytes_Microglia_AUC_5D <- with(Point_Patterns_10x_5D, auc(Astrocytes, Microglia_Dens, high = TRUE))
paste("AUC for 5 DPI is:", median(Astrocytes_Microglia_AUC_5D))

Astrocytes_Microglia_AUC_15D <- with(Point_Patterns_10x_15D, auc(Astrocytes, Microglia_Dens, high = TRUE))
paste("AUC for 15 DPI is:", median(Astrocytes_Microglia_AUC_15D))

Astrocytes_Microglia_AUC_30D <- with(Point_Patterns_10x_30D, auc(Astrocytes, Microglia_Dens, high = TRUE))
paste("AUC for 30 DPI is:", median(Astrocytes_Microglia_AUC_30D))

```

## 8. Relative allocation (distance maps)

Using the `Point_Patterns_10x` hyperframe, we employed the `distfun` function from spatstat to compute a distance map for the covariate (neurons and microglia). We saved the objects in a separate column in the hyperframe. Them we passed `rhohat` with the distance map as a covariate to to estimate cell allocation as function of the distance. We performed the same procedure for the same pairs of cells.

### 8.1 Calculte distance function

We create new columns named `Neurons_Dist` and `Microglia_Dist` containing the calculated distance funtions for each cell type. Next, we rewrite the hyperphrame subsets.

```{r}
#| label: Calculate distance function for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false

Point_Patterns_10x$Neurons_Dist <- with(Point_Patterns_10x, distfun(Neurons))
Point_Patterns_10x$Microglia_Dist <- with(Point_Patterns_10x, distfun(Microglia))

# We subset again to include new columna
Point_Patterns_10x_0D <- subset(Point_Patterns_10x, DPI=="0D", select = 1:13)
Point_Patterns_10x_5D <- subset(Point_Patterns_10x, DPI=="5D", select = 1:13)
Point_Patterns_10x_15D <- subset(Point_Patterns_10x, DPI=="15D", select = 1:13)
Point_Patterns_10x_30D <- subset(Point_Patterns_10x, DPI=="30D", select = 1:13)

```

#### 8.1.1 Plot distfun examples for astrocytes-neurons covariance

We plot representative images of the distance maps generated by `distfun`. The heat colors represent the distance between point patterns in the covariant object. Please note the dissimilar scales given the wide variation between DPIs. Also, note that the size of the images differ due to brain shrinkage in cronic stages of the injury. White dots represent the cells of interest depending the case (astrocytes or microglia).

```{r}
#| label: Plot representative images of distance for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For astrocytes
Distance_colourmap1 <- colourmap(heat.colors(256), range = c(0, 0.04))
Distance_colourmap2 <- colourmap(heat.colors(256), range = c(0, 0.30))

par(mfrow=c(1,4))
plot(Point_Patterns_10x_0D$Neurons_Dist$`129`, main = "Neurons (distfun) 0D", col = Distance_colourmap1)
plot(Point_Patterns_10x_0D$Astrocytes$`129`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_5D$Neurons_Dist$`121`, main = "Neurons (distfun) 5D", col = Distance_colourmap1)
plot(Point_Patterns_10x_5D$Astrocytes$`121`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_15D$Neurons_Dist$`13`, main = "Neurons (distfun) 15D", col = Distance_colourmap2)
plot(Point_Patterns_10x_15D$Astrocytes$`13`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_30D$Neurons_Dist$`14`, main = "Neurons (distfun) 30D", col = Distance_colourmap2)
plot(Point_Patterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.5, col = "white")
```

#### 8.1.2 Plot distfun examples for microglia-neurons covaraince

```{r}
#| label: Plot representative images of distance for microglia-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For Microglia
Distance_colourmap1 <- colourmap(heat.colors(256), range = c(0, 0.04))
Distance_colourmap2 <- colourmap(heat.colors(256), range = c(0, 0.30))

par(mfrow=c(1,4))
plot(Point_Patterns_10x_0D$Neurons_Dist$`129`, main = "Neurons (distfun) 0D", col = Distance_colourmap1)
plot(Point_Patterns_10x_0D$Microglia$`129`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_5D$Neurons_Dist$`121`, main = "Neurons (distfun) 5D", col = Distance_colourmap1)
plot(Point_Patterns_10x_5D$Microglia$`121`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_15D$Neurons_Dist$`13`, main = "Neurons (distfun) 15D", col = Distance_colourmap2)
plot(Point_Patterns_10x_15D$Microglia$`13`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_30D$Neurons_Dist$`14`, main = "Neurons (distfun) 30D", col = Distance_colourmap2)
plot(Point_Patterns_10x_30D$Microglia$`14`, add = TRUE, pch = 16, cex= 0.5, col = "white")
```

#### 8.1.3 Plot distfun examples for astrocytes-microglia covariance

```{r}
#| label: Plot representative images of distance for astrocytes-microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For astrocytes
Distance_colourmap1 <- colourmap(heat.colors(256), range = c(0, 0.08))
Distance_colourmap2 <- colourmap(heat.colors(256), range = c(0, 0.03))

par(mfrow=c(1,4))
plot(Point_Patterns_10x_5D$Microglia_Dist$`121`, main = "Microglia (distfun) 5D", col = Distance_colourmap1)
plot(Point_Patterns_10x_5D$Astrocytes$`121`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_15D$Microglia_Dist$`13`, main = "Microglia (distfun) 15D", col = Distance_colourmap2)
plot(Point_Patterns_10x_15D$Astrocytes$`13`, add = TRUE, pch = 16, cex= 0.5, col = "white")

plot(Point_Patterns_10x_30D$Microglia_Dist$`14`, main = "Microglia (distfun) 30D", col = Distance_colourmap2)
plot(Point_Patterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.5, col = "white")
```

### 8.2 Distance function (rhohat) for astrocytes-neurons covariance

We pass the `rhohat` having the distance function for neurons as a covariant for astrocytes allocation. We perform the same operation for all the pairs of interest in the current study.

```{r}
#| label: Calculate distance (rhohat) for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Astrocytes_Neurons_RhohatDist_10x_0D <- with(Point_Patterns_10x_0D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dist, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohatDist_10x_0D <- spatstat.explore::pool.fv(Astrocytes_Neurons_RhohatDist_10x_0D$`126`, Astrocytes_Neurons_RhohatDist_10x_0D$`127`, Astrocytes_Neurons_RhohatDist_10x_0D$`128`, Astrocytes_Neurons_RhohatDist_10x_0D$`129`, Astrocytes_Neurons_RhohatDist_10x_0D$`130`)


# FOr 5 DPI
Astrocytes_Neurons_RhohatDist_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dist, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohatDist_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Neurons_RhohatDist_10x_5D$`1`, Astrocytes_Neurons_RhohatDist_10x_5D$`12`, Astrocytes_Neurons_RhohatDist_10x_5D$`17`, Astrocytes_Neurons_RhohatDist_10x_5D$`18`, Astrocytes_Neurons_RhohatDist_10x_5D$`110`, Astrocytes_Neurons_RhohatDist_10x_5D$`118`, Astrocytes_Neurons_RhohatDist_10x_5D$`119`, Astrocytes_Neurons_RhohatDist_10x_5D$`120`, Astrocytes_Neurons_RhohatDist_10x_5D$`121`)


# FOr 15 DPI
Astrocytes_Neurons_RhohatDist_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dist, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohatDist_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Neurons_RhohatDist_10x_15D$`13`, Astrocytes_Neurons_RhohatDist_10x_15D$`15`, Astrocytes_Neurons_RhohatDist_10x_15D$`111`, Astrocytes_Neurons_RhohatDist_10x_15D$`114`, Astrocytes_Neurons_RhohatDist_10x_15D$`115`, Astrocytes_Neurons_RhohatDist_10x_15D$`122`, Astrocytes_Neurons_RhohatDist_10x_15D$`124`, Astrocytes_Neurons_RhohatDist_10x_15D$`125`)

# FOr 30 DPI
Astrocytes_Neurons_RhohatDist_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dist, do.CI = FALSE))

Astrocytes_Neurons_PoolRhohatDist_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Neurons_RhohatDist_10x_30D$`11`, Astrocytes_Neurons_RhohatDist_10x_30D$`14`, Astrocytes_Neurons_RhohatDist_10x_30D$`16`, Astrocytes_Neurons_RhohatDist_10x_30D$`19`, Astrocytes_Neurons_RhohatDist_10x_30D$`112`, Astrocytes_Neurons_RhohatDist_10x_30D$`113`, Astrocytes_Neurons_RhohatDist_10x_30D$`116`, Astrocytes_Neurons_RhohatDist_10x_30D$`117`, Astrocytes_Neurons_RhohatDist_10x_30D$`123`)

```

#### 8.2.1 Plot the rhohat

We plot the `rhohat` object using the R-base graphs system.

```{r}
#| label: Plot distance (rhohat) for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.010), labels = c("0", "0.01", "0.02", "0.030"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000", "4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 5 DPI

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.05, 0.020), labels = c("0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(500, 4000, 1500), labels = c("500","1500", "3000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15 DPI

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(0, 9000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 30 DPI

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 9000, 2000), labels = c("4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

```

##### 8.2.1.1 Save the rhohat

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: save distance (rhohat) for astrocytes-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Neurons_RhohatDist_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.010), labels = c("0", "0.01", "0.02", "0.030"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 2000), labels = c("0","2000", "4000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Neurons_RhohatDist_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.05, 0.020), labels = c("0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(500, 4000, 1500), labels = c("500","1500", "3000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()



png("Plots/Astrocytes_Neurons_RhohatDist_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(0, 9000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 9000, 3000), labels = c("0", "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Neurons_RhohatDist_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 9000, 2000), labels = c("4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()
```

#### 8.2.2 Calculate ROC

For this dataset, we evaluated the strength of dependence on a covariate using the **Receiver Operating Characteristic (ROC)** (`roc` function). We expect that a covariate with strong discriminatory power lies above the diagonal line. Graphs for ROC estimations are **shown in supplementary figure 7** of the main research article.

```{r}
#| label: Calculate distance (roc) for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false


Astrocytes_Neurons_ROC_10x_OD <- with(Point_Patterns_10x_0D, roc(Astrocytes, distfun(Neurons), high = TRUE))

Astrocytes_Neurons_PoolROC_10x_OD <- spatstat.explore::pool.fv(Astrocytes_Neurons_ROC_10x_OD$`126`, Astrocytes_Neurons_ROC_10x_OD$`127`, Astrocytes_Neurons_ROC_10x_OD$`128`, Astrocytes_Neurons_ROC_10x_OD$`129`, Astrocytes_Neurons_ROC_10x_OD$`130`)


Astrocytes_Neurons_ROC_10x_5D <- with(Point_Patterns_10x_5D, roc(Astrocytes, distfun(Neurons), high = TRUE))

Astrocytes_Neurons_PoolROC_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Neurons_ROC_10x_5D$`1`, Astrocytes_Neurons_ROC_10x_5D$`12`, Astrocytes_Neurons_ROC_10x_5D$`17`, Astrocytes_Neurons_ROC_10x_5D$`18`, Astrocytes_Neurons_ROC_10x_5D$`110`, Astrocytes_Neurons_ROC_10x_5D$`118`, Astrocytes_Neurons_ROC_10x_5D$`119`, Astrocytes_Neurons_ROC_10x_5D$`120`, Astrocytes_Neurons_ROC_10x_5D$`121`)

# For 15 DPI
Astrocytes_Neurons_ROC_10x_15D <- with(Point_Patterns_10x_15D, roc(Astrocytes, distfun(Neurons), high = TRUE))

Astrocytes_Neurons_PoolROC_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Neurons_ROC_10x_15D$`13`, Astrocytes_Neurons_ROC_10x_15D$`15`, Astrocytes_Neurons_ROC_10x_15D$`111`, Astrocytes_Neurons_ROC_10x_15D$`114`, Astrocytes_Neurons_ROC_10x_15D$`115`, Astrocytes_Neurons_ROC_10x_15D$`122`, Astrocytes_Neurons_ROC_10x_15D$`124`, Astrocytes_Neurons_ROC_10x_15D$`125`)

# For 30 DPI
Astrocytes_Neurons_ROC_10x_30D <- with(Point_Patterns_10x_30D, roc(Astrocytes, distfun(Neurons), high = TRUE))

Astrocytes_Neurons_PoolROC_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Neurons_ROC_10x_30D$`11`, Astrocytes_Neurons_ROC_10x_30D$`14`, Astrocytes_Neurons_ROC_10x_30D$`16`, Astrocytes_Neurons_ROC_10x_30D$`19`, Astrocytes_Neurons_ROC_10x_30D$`112`, Astrocytes_Neurons_ROC_10x_30D$`113`, Astrocytes_Neurons_ROC_10x_30D$`116`, Astrocytes_Neurons_ROC_10x_30D$`117`, Astrocytes_Neurons_ROC_10x_30D$`123`)

```

#### 8.2.3 Plot ROC for astrocytes-neurons covariance

```{r}
#| label: Plot distance (roc) for astrocytes-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_OD, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 



```

##### 8.2.3.1 Save ROC for astrocytes-neurons covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save distance (roc) for astrocytes-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Neurons_ROC_10x_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_OD, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Neurons_ROC_10x_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Neurons_ROC_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Neurons_ROC_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Neurons_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

```

### 8.3 Distance function (rhohat) for microglia-neurons covariance

As done previsuly, we pass the `rhohat` having the distance function for neurons as a covariant for microglia allocation.

```{r}
#| label: Calculate distance (rhohat) for Microglia-neurons covariance
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Microglia_Neurons_RhohatDist_10x_0D <- with(Point_Patterns_10x_0D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dist, do.CI = FALSE))

Microglia_Neurons_PoolRhohatDist_10x_0D <- spatstat.explore::pool.fv(Microglia_Neurons_RhohatDist_10x_0D$`126`, Microglia_Neurons_RhohatDist_10x_0D$`127`, Microglia_Neurons_RhohatDist_10x_0D$`128`, Microglia_Neurons_RhohatDist_10x_0D$`129`, Microglia_Neurons_RhohatDist_10x_0D$`130`)


# FOr 5 DPI
Microglia_Neurons_RhohatDist_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dist, do.CI = FALSE))

Microglia_Neurons_PoolRhohatDist_10x_5D <- spatstat.explore::pool.fv(Microglia_Neurons_RhohatDist_10x_5D$`1`, Microglia_Neurons_RhohatDist_10x_5D$`12`, Microglia_Neurons_RhohatDist_10x_5D$`17`, Microglia_Neurons_RhohatDist_10x_5D$`18`, Microglia_Neurons_RhohatDist_10x_5D$`110`, Microglia_Neurons_RhohatDist_10x_5D$`118`, Microglia_Neurons_RhohatDist_10x_5D$`119`, Microglia_Neurons_RhohatDist_10x_5D$`120`, Microglia_Neurons_RhohatDist_10x_5D$`121`)


# FOr 15 DPI
Microglia_Neurons_RhohatDist_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dist, do.CI = FALSE))

Microglia_Neurons_PoolRhohatDist_10x_15D <- spatstat.explore::pool.fv(Microglia_Neurons_RhohatDist_10x_15D$`13`, Microglia_Neurons_RhohatDist_10x_15D$`15`, Microglia_Neurons_RhohatDist_10x_15D$`111`, Microglia_Neurons_RhohatDist_10x_15D$`114`, Microglia_Neurons_RhohatDist_10x_15D$`115`, Microglia_Neurons_RhohatDist_10x_15D$`122`, Microglia_Neurons_RhohatDist_10x_15D$`124`, Microglia_Neurons_RhohatDist_10x_15D$`125`)

# FOr 30 DPI
Microglia_Neurons_RhohatDist_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dist, do.CI = FALSE))

Microglia_Neurons_PoolRhohatDist_10x_30D <- spatstat.explore::pool.fv(Microglia_Neurons_RhohatDist_10x_30D$`11`, Microglia_Neurons_RhohatDist_10x_30D$`14`, Microglia_Neurons_RhohatDist_10x_30D$`16`, Microglia_Neurons_RhohatDist_10x_30D$`19`, Microglia_Neurons_RhohatDist_10x_30D$`112`, Microglia_Neurons_RhohatDist_10x_30D$`113`, Microglia_Neurons_RhohatDist_10x_30D$`116`, Microglia_Neurons_RhohatDist_10x_30D$`117`, Microglia_Neurons_RhohatDist_10x_30D$`123`)

```

#### 8.3.1 Plot the rhohat

We plot the rhohat function

```{r}
#| label: Plot distance (rhohat) for Microglia-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.010), labels = c("0", "0.01", "0.02", "0.030"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 2000, 500), labels = c("0","500", "1000", "1500", "2000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.05, 0.020), labels = c("0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 9000, 2000), labels = c("4000","6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(3500, 12000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 12000, 3000), labels = c(expression("4x10"^3), expression("7x10"^4), expression("1x10"^5)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(3000, 10000, 3000), labels = c("3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

```

##### 8.3.1.1 Save the rhohat

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: save distance (rhohat) for microglia-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Microglia_Neurons_RhohatDist_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.010), labels = c("0", "0.01", "0.02", "0.030"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 2000, 500), labels = c("0","500", "1000", "1500", "2000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_Neurons_RhohatDist_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.05, 0.020), labels = c("0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 9000, 2000), labels = c("4000","6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()



png("Plots/Microglia_Neurons_RhohatDist_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(3500, 12000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(4000, 12000, 3000), labels = c(expression("4x10"^3), expression("7x10"^4), expression("1x10"^5)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3) 


dev.off()


png("Plots/Microglia_Neurons_RhohatDist_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.1, 0.030), labels = c("0", "0.03", "0.06", "0.09"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(3000, 10000, 3000), labels = c("3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()

```

#### 8.3.2 Calculate ROC

We use `roc` to mesure the strength of dependence on a covariate.

```{r}
#| label: Calculate distance (roc) for Microglia-neurons covariance
#| include: true
#| warning: false
#| message: false


Microglia_Neurons_ROC_10x_OD <- with(Point_Patterns_10x_0D, roc(Microglia, distfun(Neurons), high = TRUE))

Microglia_Neurons_PoolROC_10x_OD <- spatstat.explore::pool.fv(Microglia_Neurons_ROC_10x_OD$`126`, Microglia_Neurons_ROC_10x_OD$`127`, Microglia_Neurons_ROC_10x_OD$`128`, Microglia_Neurons_ROC_10x_OD$`129`, Microglia_Neurons_ROC_10x_OD$`130`)


Microglia_Neurons_ROC_10x_5D <- with(Point_Patterns_10x_5D, roc(Microglia, distfun(Neurons), high = TRUE))

Microglia_Neurons_PoolROC_10x_5D <- spatstat.explore::pool.fv(Microglia_Neurons_ROC_10x_5D$`1`, Microglia_Neurons_ROC_10x_5D$`12`, Microglia_Neurons_ROC_10x_5D$`17`, Microglia_Neurons_ROC_10x_5D$`18`, Microglia_Neurons_ROC_10x_5D$`110`, Microglia_Neurons_ROC_10x_5D$`118`, Microglia_Neurons_ROC_10x_5D$`119`, Microglia_Neurons_ROC_10x_5D$`120`, Microglia_Neurons_ROC_10x_5D$`121`)

# For 15 DPI
Microglia_Neurons_ROC_10x_15D <- with(Point_Patterns_10x_15D, roc(Microglia, distfun(Neurons), high = TRUE))

Microglia_Neurons_PoolROC_10x_15D <- spatstat.explore::pool.fv(Microglia_Neurons_ROC_10x_15D$`13`, Microglia_Neurons_ROC_10x_15D$`15`, Microglia_Neurons_ROC_10x_15D$`111`, Microglia_Neurons_ROC_10x_15D$`114`, Microglia_Neurons_ROC_10x_15D$`115`, Microglia_Neurons_ROC_10x_15D$`122`, Microglia_Neurons_ROC_10x_15D$`124`, Microglia_Neurons_ROC_10x_15D$`125`)

# For 30 DPI
Microglia_Neurons_ROC_10x_30D <- with(Point_Patterns_10x_30D, roc(Microglia, distfun(Neurons), high = TRUE))

Microglia_Neurons_PoolROC_10x_30D <- spatstat.explore::pool.fv(Microglia_Neurons_ROC_10x_30D$`11`, Microglia_Neurons_ROC_10x_30D$`14`, Microglia_Neurons_ROC_10x_30D$`16`, Microglia_Neurons_ROC_10x_30D$`19`, Microglia_Neurons_ROC_10x_30D$`112`, Microglia_Neurons_ROC_10x_30D$`113`, Microglia_Neurons_ROC_10x_30D$`116`, Microglia_Neurons_ROC_10x_30D$`117`, Microglia_Neurons_ROC_10x_30D$`123`)

```

#### 8.3.3 Plot ROC for Microglia-neurons covariance

```{r}
#| label: plot distance (roc) for Microglia-neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_OD, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 



```

##### 8.3.3.1 Save ROC for Microglia-neurons covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save distance (roc) for Microglia-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Microglia_Neurons_ROC_10x_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_OD, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Microglia_Neurons_ROC_10x_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Microglia_Neurons_ROC_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Microglia_Neurons_ROC_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_Neurons_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Neurons (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(neurons dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()
```

### 8.4 Distance function (rhohat) for astrocytes-microglia covariance

We perform the same operation for astrocytes-microglia covariance

```{r}
#| label: Calculate distance (rhohat) for astrocytes-microglia covariance
#| include: true
#| warning: false
#| message: false

# FOr 5 DPI
Astrocytes_Microglia_RhohatDist_10x_5D <- with(Point_Patterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dist, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohatDist_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Microglia_RhohatDist_10x_5D$`1`, Astrocytes_Microglia_RhohatDist_10x_5D$`12`, Astrocytes_Microglia_RhohatDist_10x_5D$`17`, Astrocytes_Microglia_RhohatDist_10x_5D$`18`, Astrocytes_Microglia_RhohatDist_10x_5D$`110`, Astrocytes_Microglia_RhohatDist_10x_5D$`118`, Astrocytes_Microglia_RhohatDist_10x_5D$`119`, Astrocytes_Microglia_RhohatDist_10x_5D$`120`, Astrocytes_Microglia_RhohatDist_10x_5D$`121`)


# FOr 15 DPI
Astrocytes_Microglia_RhohatDist_10x_15D <- with(Point_Patterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dist, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohatDist_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Microglia_RhohatDist_10x_15D$`13`, Astrocytes_Microglia_RhohatDist_10x_15D$`15`, Astrocytes_Microglia_RhohatDist_10x_15D$`111`, Astrocytes_Microglia_RhohatDist_10x_15D$`114`, Astrocytes_Microglia_RhohatDist_10x_15D$`115`, Astrocytes_Microglia_RhohatDist_10x_15D$`122`, Astrocytes_Microglia_RhohatDist_10x_15D$`124`, Astrocytes_Microglia_RhohatDist_10x_15D$`125`)

# FOr 30 DPI
Astrocytes_Microglia_RhohatDist_10x_30D <- with(Point_Patterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Microglia_Dist, do.CI = FALSE))

Astrocytes_Microglia_PoolRhohatDist_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Microglia_RhohatDist_10x_30D$`11`, Astrocytes_Microglia_RhohatDist_10x_30D$`14`, Astrocytes_Microglia_RhohatDist_10x_30D$`16`, Astrocytes_Microglia_RhohatDist_10x_30D$`19`, Astrocytes_Microglia_RhohatDist_10x_30D$`112`, Astrocytes_Microglia_RhohatDist_10x_30D$`113`, Astrocytes_Microglia_RhohatDist_10x_30D$`116`, Astrocytes_Microglia_RhohatDist_10x_30D$`117`, Astrocytes_Microglia_RhohatDist_10x_30D$`123`)

```

#### 8.4.1 Plot the rhohat

```{r}
#| label: Plot distance (rhohat) for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4


# For 5 DPI
par(mfrow=c(1,3))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(500, 5000, 1500), labels = c("500","1500", "3000", "4500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(2000, 9000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(2000, 9000, 2000), labels = c("2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim= c(0, 30000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.035, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 30000, 5000), labels = c("0", expression("5x10"^3), expression("1x10"^4), expression("1.5x10"^4), expression("2x10"^4), expression("2.5x10"^4), expression("3x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3) 
```

##### 8.4.1.1 Save the rhohat

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save distance (rhohat) for astrocytes-Microglia covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Microglia_RhohatDist_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_5D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(500, 5000, 1500), labels = c("500","1500", "3000", "4500"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Microglia_RhohatDist_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim = c(2000, 9000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(2000, 9000, 2000), labels = c("2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Microglia_RhohatDist_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolRhohatDist_10x_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     lwd = 6,
     legend=FALSE,
     xlab = "",
     ylab = "",
     ylim= c(0, 30000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.035, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 30000, 5000), labels = c("0", expression("5x10"^3), expression("1x10"^4), expression("1.5x10"^4), expression("2x10"^4), expression("2.5x10"^4), expression("3x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Nearest microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()
```

#### 8.4.2 Calculate ROC

```{r}
#| label: Calculate distance (roc) for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false


Astrocytes_Microglia_ROC_10x_5D <- with(Point_Patterns_10x_5D, roc(Astrocytes, distfun(Microglia), high = TRUE))

Astrocytes_Microglia_PoolROC_10x_5D <- spatstat.explore::pool.fv(Astrocytes_Microglia_ROC_10x_5D$`1`, Astrocytes_Microglia_ROC_10x_5D$`12`, Astrocytes_Microglia_ROC_10x_5D$`17`, Astrocytes_Microglia_ROC_10x_5D$`18`, Astrocytes_Microglia_ROC_10x_5D$`110`, Astrocytes_Microglia_ROC_10x_5D$`118`, Astrocytes_Microglia_ROC_10x_5D$`119`, Astrocytes_Microglia_ROC_10x_5D$`120`, Astrocytes_Microglia_ROC_10x_5D$`121`)

# For 15 DPI
Astrocytes_Microglia_ROC_10x_15D <- with(Point_Patterns_10x_15D, roc(Astrocytes, distfun(Microglia), high = TRUE))

Astrocytes_Microglia_PoolROC_10x_15D <- spatstat.explore::pool.fv(Astrocytes_Microglia_ROC_10x_15D$`13`, Astrocytes_Microglia_ROC_10x_15D$`15`, Astrocytes_Microglia_ROC_10x_15D$`111`, Astrocytes_Microglia_ROC_10x_15D$`114`, Astrocytes_Microglia_ROC_10x_15D$`115`, Astrocytes_Microglia_ROC_10x_15D$`122`, Astrocytes_Microglia_ROC_10x_15D$`124`, Astrocytes_Microglia_ROC_10x_15D$`125`)

# For 30 DPI
Astrocytes_Microglia_ROC_10x_30D <- with(Point_Patterns_10x_30D, roc(Astrocytes, distfun(Microglia), high = TRUE))

Astrocytes_Microglia_PoolROC_10x_30D <- spatstat.explore::pool.fv(Astrocytes_Microglia_ROC_10x_30D$`11`, Astrocytes_Microglia_ROC_10x_30D$`14`, Astrocytes_Microglia_ROC_10x_30D$`16`, Astrocytes_Microglia_ROC_10x_30D$`19`, Astrocytes_Microglia_ROC_10x_30D$`112`, Astrocytes_Microglia_ROC_10x_30D$`113`, Astrocytes_Microglia_ROC_10x_30D$`116`, Astrocytes_Microglia_ROC_10x_30D$`117`, Astrocytes_Microglia_ROC_10x_30D$`123`)

```

#### 8.4.3 Plot ROC for astrocytes-Microglia covariance

```{r}
#| label: Plot distance (roc) for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4

par(mfrow=c(1,3))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 



```

##### 8.4.3.1 Save ROC for astrocytes-Microglia covariance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save distance (roc) for astrocytes-Microglia covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Microglia_ROC_10x_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_5D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Microglia_ROC_10x_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_15D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

png("Plots/Astrocytes_Microglia_ROC_10x_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_PoolROC_10x_30D, 
     shade = c("lofobs", "hifobs"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     cex.lab = 3, 
     cex.axis = 3)

title(xlab = "Microglia (dist)", mgp = c(3.5, 1, 0), cex.lab = 3)   
title(ylab = "roc(Microglia dist)", mgp = c(5.5, 1, 0), cex.lab = 3) 

dev.off()

```

The results for the relative distributions calculated in sections 7 and 8 of this notebook are displayed in **figure 4** and **supplementary figure 7** for astrocytes-neurons and microglia-neurons covariance and **figure 5** and **supplementary figure 8** for astrocytes-microglia covariance, as depicted in the following thumbnails:

::: {layout-ncol="4"}
![Figure 4 (main research article)](images/GlialTopology_Fig4.png)

![Supplementary figure 7 (main research article)](images/GlialTopology_Suppl_Fig7.png)

![Figure 5 (main research article)](images/GlialTopology_Fig5-01.png)

![Supplementary figure 8 (main research article)](images/GlialTopology_Suppl_Fig8-01.png)
:::

## 9. Relative distribution within point patterns

We calculated the relative distribution of the glial cells on the x-axis to quantitatively assess the displacement of the cell mass, typical from regions close to the ventricular zone towards the dorsolateral surface.

### 9.1 Prepare data

We use the `nndist` and `centroid` dataset for astrocyte and microglia to have a visual perspective of the distribution of the data points. We conduct a manipulation of the raw dataset to subsets and rename the columns of interest.

#### 9.1.1 nndist data

We manipulate the `nndist` datasets for astrocytes and microglia:

```{r}
#| label: Manipulate nndist dataset for astrocytes and microglia
#| include: true
#| warning: false
#| message: false

#For Astrocytes
Astrocytes_nndist <- subset(Astrocytes_nndist, select = -c(X))
Astrocytes_nndist  <- cbind(Astrocytes_nndist, do.call(rbind , strsplit(Astrocytes_nndist$Brain, "[_\\.]"))[,3:4])
colnames(Astrocytes_nndist) <- c("x", "y", "nndist", "Brain", "MouseID", "DPI")

Astrocytes_nndist <- subset(Astrocytes_nndist, select = c(MouseID, DPI, x, y, nndist))

# And set factors 
Astrocytes_nndist$DPI <- factor(Astrocytes_nndist$DPI, levels = c("0D","5D", "15D", "30D"))


#For Microglia
Microglia_nndist <- subset(Microglia_nndist, select = -c(X))
Microglia_nndist  <- cbind(Microglia_nndist, do.call(rbind , strsplit(Microglia_nndist$Brain, "[_\\.]"))[,3:4])
colnames(Microglia_nndist) <- c("x", "y", "nndist", "Brain", "MouseID", "DPI")

Microglia_nndist <- subset(Microglia_nndist, select = c(MouseID, DPI, x, y, nndist))

# And set factors 
Microglia_nndist$DPI <- factor(Microglia_nndist$DPI, levels = c("0D","5D", "15D", "30D"))
```

We one data set to verify the manipulation

```{r}
#| label: Print nndist for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Astrocytes_nndist)
```

#### 9.1.2 Centroid data

We perform the same operation with the `centroid` datasets

```{r}
#For Astrocytes
Astrocytes_nndist_Centroid <- subset(Astrocytes_nndist_Centroid, select = -c(X))
Astrocytes_nndist_Centroid  <- cbind(Astrocytes_nndist_Centroid, do.call(rbind , strsplit(Astrocytes_nndist_Centroid$Brain, "[_\\.]"))[,3:4])
colnames(Astrocytes_nndist_Centroid) <- c("x", "y", "nndist", "Brain", "MouseID", "DPI")

Astrocytes_nndist_Centroid <- subset(Astrocytes_nndist_Centroid, select = c(MouseID, DPI, x, y, nndist))

# And set factors 
Astrocytes_nndist_Centroid$DPI <- factor(Astrocytes_nndist_Centroid$DPI, levels = c("0D","5D", "15D", "30D"))


#For Microglia
Microglia_nndist_Centroid <- subset(Microglia_nndist_Centroid, select = -c(X))
Microglia_nndist_Centroid  <- cbind(Microglia_nndist_Centroid, do.call(rbind , strsplit(Microglia_nndist_Centroid$Brain, "[_\\.]"))[,3:4])
colnames(Microglia_nndist_Centroid) <- c("x", "y", "nndist", "Brain", "MouseID", "DPI")

Microglia_nndist_Centroid <- subset(Microglia_nndist_Centroid, select = c(MouseID, DPI, x, y, nndist))

# And set factors 
Microglia_nndist_Centroid$DPI <- factor(Microglia_nndist_Centroid$DPI, levels = c("0D","5D", "15D", "30D"))
```

We verify the manipulation:

```{r}
#| label: Print centroid for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Astrocytes_nndist_Centroid)
```

### 9.2 Plot point patterns

We create figures using customary `ggplot` functions to visualize merged point patterns and the centroid distribution among time points.

```{r}
#| label: Create point patterns and centroids for astrocytes and microglia 
#| include: true
#| warning: false
#| message: false


# Astrocytes

Astrocytes_NND_Fig <- ggplot (Astrocytes_nndist, aes(x = x, y = y)) +
  
  geom_point(size = 0.1, color = "green") +
  
  geom_point(data = Astrocytes_nndist_Centroid, aes(x=x, y=y), size = 3, color = "red") +
  
  geom_vline(xintercept = -3.5, linetype="dashed", color ="red", size = 1) +
  
  xlab("\n X coordinates")+
  ylab("Y coordinates \n")+
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="right",
    legend.title = element_text(colour="black", size=16),
    legend.text = element_text(colour="black", size=12)
    
    ) +
    
    facet_grid(~ DPI)

## Save the figure
ggsave("Plots/Astrocytes_NND_Fig.png", width = 20, height = 10, units = "cm")


# For microglia
Microglia_NND_Fig <- ggplot (Microglia_nndist, aes(x = x, y = y)) +
  
  geom_point(size = 0.1, color = "red") +
  
  geom_point(data = Microglia_nndist_Centroid, aes(x=x, y=y), size = 3, color = "green") +
  
  geom_vline(xintercept = -3.5, linetype="dashed", color ="green", size = 1) +
  
  xlab("\n X coordinates")+
  ylab("Y coordinates \n")+
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="right",
    legend.title = element_text(colour="black", size=16),
    legend.text = element_text(colour="black", size=12)
    
    ) +
    
    facet_grid(~ DPI)

## Save the figure
ggsave("Plots/Microglia_NND_Fig.png", width = 20, height = 10, units = "cm")
```

We plot the figures displayed on **figure 6A-B** of the research article. In this graph, the dashed red and green lines display the the (approximate) center on the x-axis of the brain.

```{r}
#| label: Plot point patterns and centroids for astrocytes and microglia 
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_NND_Fig, Microglia_NND_Fig + rremove("x.text"), 
          labels = c("A", "B"),
          ncol = 2, nrow = 1)

```

### 9.3 Plot perspective fugures

We can also visualize astrocytes and microglia distribution using pespective plots accouting for position and intensity of the patterns. The `persp` function and respective arguments to control angle and intensity scale allow this visualization. Perspective plots are displayed in **figureAi-Bi**.

```{r}
#| label: Plot perspective figures for astrocytes and microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
#| fig-width: 15
#| fig-height: 5

Pers_Colmap <- colourmap(topo.colors(256), range = c(0, 800))

par(mfrow=c(1,4))
persp(Gfap_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 0D", line = -10)

persp(Gfap_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 5D", line = -10)

persp(Gfap_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 15D", line = -10)

persp(Gfap_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 30D", line = -10)


par(mfrow=c(1,4))
persp(Iba1_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 0D", line = -10)

persp(Iba1_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 5D", line = -10)

persp(Iba1_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 15D", line = -10)

persp(Iba1_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 30D", line = -10)


```

#### 9.3.1 Save perspective figures

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save perspective plots for astrocytes and microglia
#| include: false
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

Pers_Colmap <- colourmap(topo.colors(256), range = c(0, 800))

png("Plots/Astrocytes_Persp_0D.png", width = 500, height = 400)
par(mar=c(1,2,1,1))
graphics::persp(Gfap_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", cex.lab = 5, axes = TRUE)
title("Astrocytes 0D", line = 0)

dev.off()

png("Plots/Astrocytes_Persp_5D.png", width = 500, height = 400)
persp(Gfap_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 5D", line = 0)
dev.off()

png("Plots/Astrocytes_Persp_15D.png", width = 500, height = 400)
persp(Gfap_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 15D", line = 0)
dev.off()

png("Plots/Astrocytes_Persp_30D.png", width = 500, height = 400)
persp(Gfap_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Astrocytes 30D", line = 0)
dev.off()

png("Plots/Microglia_Persp_0D.png", width = 500, height = 400)
persp(Iba1_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 0D", line = 0)
dev.off()

png("Plots/Microglia_Persp_5D.png", width = 500, height = 400)
persp(Iba1_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 5D", line = 0)
dev.off()

png("Plots/Microglia_Persp_15D.png", width = 500, height = 400)
persp(Iba1_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 15D", line = 0)
dev.off()

png("Plots/Microglia_Persp_30D.png", width = 500, height = 400)
persp(Iba1_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")
title("Microglia 30D", line = 0)
dev.off()

```

### 9.4 Relative distribution (x-axis) of astrocytes

#### 9.4.1 Calculate the relative distribution

We used the `rohat` function, as previously, specifying the x-axis as an argument. We specify `do.CI=FALSE` to calculate confidence intervals from the pooled functions (brains). The rhohat is calculated for each brain and then the estimates are merged using the `pool` function.

```{r}
#| label: Calculate the relative distribution of x-axis for astrocytes
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Astrocytes_RhohatX_0D <- with(Point_Patterns_5x_0D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_PoolRhohatX_0D <- spatstat.explore::pool.fv(Astrocytes_RhohatX_0D$`126`, Astrocytes_RhohatX_0D$`127`, Astrocytes_RhohatX_0D$`128`, Astrocytes_RhohatX_0D$`129`, Astrocytes_RhohatX_0D$`130`)


# For 5 DPI
Astrocytes_RhohatX_5D <- with(Point_Patterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_PoolRhohatX_5D <- spatstat.explore::pool.fv(Astrocytes_RhohatX_5D$`1`, Astrocytes_RhohatX_5D$`12`, Astrocytes_RhohatX_5D$`17`, Astrocytes_RhohatX_5D$`18`, Astrocytes_RhohatX_5D$`110`, Astrocytes_RhohatX_5D$`118`, Astrocytes_RhohatX_5D$`119`, Astrocytes_RhohatX_5D$`121`)


# For 15 DPI
Astrocytes_RhohatX_15D <- with(Point_Patterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_PoolRhohatX_15D <- spatstat.explore::pool.fv(Astrocytes_RhohatX_15D$`13`, Astrocytes_RhohatX_15D$`15`, Astrocytes_RhohatX_15D$`111`, Astrocytes_RhohatX_15D$`114`, Astrocytes_RhohatX_15D$`115`, Astrocytes_RhohatX_15D$`122`, Astrocytes_RhohatX_15D$`124`, Astrocytes_RhohatX_15D$`125`)


# For 30 DPI
Astrocytes_RhohatX_30D <- with(Point_Patterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_PoolRhohatX_30D <- spatstat.explore::pool.fv(Astrocytes_RhohatX_30D$`11`, Astrocytes_RhohatX_30D$`14`, Astrocytes_RhohatX_30D$`16`, Astrocytes_RhohatX_30D$`19`, Astrocytes_RhohatX_30D$`112`, Astrocytes_RhohatX_30D$`113`, Astrocytes_RhohatX_30D$`116`, Astrocytes_RhohatX_30D$`117`, Astrocytes_RhohatX_30D$`120`, Astrocytes_RhohatX_30D$`123`)
```

#### 9.4.2 Plot the rhohat

```{r}
#| label: Plot the rhohat of x-axis for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 18, 5), labels = c("0","5", "10", "15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)
```

##### 9.4.2.1 Save the rhohat

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save the rhohat of x-axis for astrocytes
#| include: false
#| warning: false
#| message: false


# For 0 DPI
png("Plots/Astrocytes_RhohatX_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 18, 5), labels = c("0","5", "10", "15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3) 

dev.off()

# For 5 DPI
png("Plots/Astrocytes_RhohatX_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()


# For 15 DPI
png("Plots/Astrocytes_RhohatX_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()

# For 30 DPI
png("Plots/Astrocytes_RhohatX_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_PoolRhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()
```

### 9.5 Relative distribution (x-axis) of microglia

#### 9.5.1 Calculate the relative distribution

We perform the same calculation for microglia point patterns.

```{r}
#| label: Calculate the relative distribution of x-axis for microglia
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Microglia_RhohatX_0D <- with(Point_Patterns_5x_0D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_PoolRhohatX_0D <- spatstat.explore::pool.fv(Microglia_RhohatX_0D$`126`, Microglia_RhohatX_0D$`127`, Microglia_RhohatX_0D$`128`, Microglia_RhohatX_0D$`129`, Microglia_RhohatX_0D$`130`)


# For 5 DPI

Microglia_RhohatX_5D <- with(Point_Patterns_5x_5D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_PoolRhohatX_5D <- spatstat.explore::pool.fv(Microglia_RhohatX_5D$`1`, Microglia_RhohatX_5D$`12`, Microglia_RhohatX_5D$`17`, Microglia_RhohatX_5D$`18`, Microglia_RhohatX_5D$`110`, Microglia_RhohatX_5D$`118`, Microglia_RhohatX_5D$`119`, Microglia_RhohatX_5D$`121`)

# For 15 DPI

Microglia_RhohatX_15D <- with(Point_Patterns_5x_15D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_PoolRhohatX_15D <- spatstat.explore::pool.fv(Microglia_RhohatX_15D$`13`, Microglia_RhohatX_15D$`15`, Microglia_RhohatX_15D$`111`, Microglia_RhohatX_15D$`114`, Microglia_RhohatX_15D$`115`, Microglia_RhohatX_15D$`122`, Microglia_RhohatX_15D$`124`, Microglia_RhohatX_15D$`125`)


# For 30 DPI
Microglia_RhohatX_30D <- with(Point_Patterns_5x_30D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_PoolRhohatX_30D <- spatstat.explore::pool.fv(Microglia_RhohatX_30D$`11`, Microglia_RhohatX_30D$`14`, Microglia_RhohatX_30D$`16`, Microglia_RhohatX_30D$`19`, Microglia_RhohatX_30D$`112`, Microglia_RhohatX_30D$`113`, Microglia_RhohatX_30D$`116`, Microglia_RhohatX_30D$`117`, Microglia_RhohatX_30D$`120`, Microglia_RhohatX_30D$`123`)
```

#### 9.5.1 Plot the rhohat

```{r}
#| label: Plot the rhohat of x-axis for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 18, 5), labels = c("0","5", "10", "15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)
```

##### 9.5.1.1 Save the rhohat

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save the rhohat of x-axis for microglia
#| include: false
#| warning: false
#| message: false

# For 0 DPI
png("Plots/Microglia_RhohatX_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_0D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 18, 5), labels = c("0","5", "10", "15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3) 

dev.off()

# For 5 DPI
png("Plots/Microglia_RhohatX_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()


# For 15 DPI
png("Plots/Microglia_RhohatX_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()

# For 30 DPI
png("Plots/Microglia_RhohatX_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_PoolRhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 80),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-5, -1, 1), labels = c("-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()
```

## 10. Interaction/correlation within point patterns

After evaluating point pattern allocation in reference to covariants, we are interested in assessing whether each point pattern exhibit interpoint dependence. In spatial point pattern analysis this is referred as interaction or correlation [@spatstat]. We evaluated spatial correlation in point pattern using the **L-function**, a zero-centered transformation of the **K-function**, which allows to determine whether a point pattern is random, clustered, or regularly spaced. The K-function can be defined as "the cumulative average number of data points lying within a distance *r* of a typical data point, corrected for edge effects, and standardized by dividing by the intensity" [@spatstat, p. 204].

### 10.1 Calculate L function

We calculated an L-inhomogeneous function using the `linhom` function from `spatstat`, assuming that our point patterns are inhomogeneous. Given that our imaging procedure comprises all cells of interest in the lesioned hemisphere, we considered the **isotropic correction** to be more useful than the border correction given that with do not expect more interacting cells outside the observation window. With the following procedure, a new *LInhom* column in generated in the `Point_Patterns_5x` hyperframe, which we pool latter to obtain estimates per time point.

```{r}
#| label: Calculate interaction L-function for astrocytes and microglia
#| include: false
#| warning: false
#| message: false

# For astrocytes

Point_Patterns_5x$AstrocytesLInhom <- with (Point_Patterns_5x, Linhom(Astrocytes, correction = "isotropic"))
Astrocytes_Lsplit <- split(Point_Patterns_5x$AstrocytesLInhom, Point_Patterns_5x$DPI)
Astrocytes_LPool <- anylapply(Astrocytes_Lsplit, pool)

# For microglia

Point_Patterns_5x$MicrogliaLInhom <- with (Point_Patterns_5x, Linhom(Microglia, correction = "isotropic"))
Microglia_Lsplit <- split(Point_Patterns_5x$MicrogliaLInhom, Point_Patterns_5x$DPI)
Microglia_LPool <- anylapply(Microglia_Lsplit, pool)

```

### 10.2 Plot L-functions

We plot the L-functions (.fv objects) using the r-base graphic system. Lower and higher 95% CI are displayed as a shadowed region.

#### 10.2.1 Plot L-function for astrocytes

```{r}
#| label: Plot L-function for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`0D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.25, 0.15),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.25, 0.15, 0.2), labels = c("-0.25","-0.05", "-0.15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab= "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     equal.scales=TRUE,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab= "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)



```

##### 10.2.1.1 Save L-function for astrocytes

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save L-function for astrocytes
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_LFunction_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`0D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.25, 0.15),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.25, 0.15, 0.2), labels = c("-0.25","-0.05", "-0.15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_LFunction_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)

dev.off()


png("Plots/Astrocytes_LFunction_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab= "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)

dev.off()


png("Plots/Astrocytes_LFunction_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     equal.scales=TRUE,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 1),
     ylim=c(-0.05, 0.1),
     xlab = "",
     ylab= "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.05, 0.1, 0.05), labels = c("-0.05","0", "0.05", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)
dev.off()
```

#### 10.2.2 Plot L-function for for microglia

As done for astrocytes, we plot the rhohat for microglia

```{r}
#| label: Plot L-function for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`0D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.1, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.1, 0.04, 0.04), labels = c("-0.1","-0.06", "-0.02", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)


title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)
```

##### 10.2.2.1 Save L-function for Microglia

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save L-function for microglia
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_LFunction_0D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`0D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.1, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.1, 0.04, 0.04), labels = c("-0.1","-0.06", "-0.02", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_LFunction_5D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)

dev.off()



png("Plots/Microglia_LFunction_15D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)


title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)

dev.off()


png("Plots/Microglia_LFunction_30D.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)
dev.off()

```

### 10.3 Contrast between time points

We can compute a contrast between the L-functions of two different time points using the `eval.fv` function from `spatstat`. We perform the same procedure for astrocytes and microglia.

#### 10.3.1 Calculate the contrast for astrocytes

```{r}
#| label: Calculate contrast (L-function) for astrocytes
#| include: true
#| warning: false
#| message: false

# We pool the L-functions per time point
Astrocytes_LInhom_0D <- Astrocytes_LPool$`0D`
Astrocytes_LInhom_5D <- Astrocytes_LPool$`5D`
Astrocytes_LInhom_15D <- Astrocytes_LPool$`15D`
Astrocytes_LInhom_30D <- Astrocytes_LPool$`30D`

# We calculate a contrast between 0D and 5D
Astrocytes_LInhom_0_5 <-  eval.fv(Astrocytes_LInhom_0D - Astrocytes_LInhom_5D)
# Between 5D and 15D
Astrocytes_LInhom_5_15 <-  eval.fv(Astrocytes_LInhom_5D-Astrocytes_LInhom_15D)
# Between 15D and 30D
Astrocytes_LInhom_15_30 <-  eval.fv(Astrocytes_LInhom_15D-Astrocytes_LInhom_30D)
```

#### 10.3.2 Plot the contrast for astrocytes

```{r}
#| label: Plot contrast (L-function) for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 5


# Between 0D and 5D
par(mfrow=c(1,3))
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_0_5, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.3, 0.1, 0.1), labels = c("-0.3","0.2", "0.1", "0", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 0D-5D", mgp = c(6, 1, 0), cex.lab = 3)


# Between 5D and 15D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_5_15, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
    shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.01, 0.04, 0.01), labels = c("-0.01","0", "0.01", "0.02", "0.03", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.01, "p = 0.10", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(6, 1, 0), cex.lab = 3)


# Between 15D and 30D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_15_30, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.01, 0.003), labels = c("-0.003","0", "0.003", "0.006", "0.009"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.003, "p = 0.59", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(7, 1, 0), cex.lab = 3)
```

##### 10.3.2.1 Save the contrast for astrocytes

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save contrast (L-function) for astrocytes
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_LInhom_0-5.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_0_5, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.3, 0.1, 0.1), labels = c("-0.3","0.2", "0.1", "0", "0.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 0D-5D", mgp = c(6, 1, 0), cex.lab = 3)
dev.off()


png("Plots/Astrocytes_LInhom_5-15.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_5_15, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
    shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.01, 0.04, 0.01), labels = c("-0.01","0", "0.01", "0.02", "0.03", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.01, "p = 0.10", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(6, 1, 0), cex.lab = 3)

dev.off()

png("Plots/Astrocytes_LInhom_15-30.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LInhom_15_30, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.01, 0.003), labels = c("-0.003","0", "0.003", "0.006", "0.009"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.003, "p = 0.59", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(7, 1, 0), cex.lab = 3)

dev.off()
```

#### 10.3.3 Calculate the contrast for microglia

We do the same procedure for microglia.

```{r}
#| label: Calculate contrast (L-function) for microglia
#| include: true
#| warning: false
#| message: false

# We pool the L-functions per time point
Microglia_LInhom_0D <- Microglia_LPool$`0D`
Microglia_LInhom_5D <- Microglia_LPool$`5D`
Microglia_LInhom_15D <- Microglia_LPool$`15D`
Microglia_LInhom_30D <- Microglia_LPool$`30D`

# Between 0D and 5D
Microglia_LInhom_0_5 <-  eval.fv(Microglia_LInhom_0D - Microglia_LInhom_5D)
# Between 5D and 15D
Microglia_LInhom_5_15 <-  eval.fv(Microglia_LInhom_5D-Microglia_LInhom_15D)
# Between 15D and 30D
Microglia_LInhom_15_30 <-  eval.fv(Microglia_LInhom_15D-Microglia_LInhom_30D)
```

#### 10.3.4 Plot the contrast for microglia

```{r}
#| label: Plot contrast (L-function) for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 5

# Between 0D and 5D
par(mfrow=c(1,3))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_0_5, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 1.2),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1.2, 0.3), labels = c("0", "0.3", "0.6", "0.9", "1.2"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.08, 0.02, 0.03), labels = c("-0.08","-0.05", "-0.03", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.4, -0.07, "p = 0.0001", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 0D-5D", mgp = c(6.5, 1, 0), cex.lab = 3)


# Between 5D and 15D
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_5_15, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
    shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.01, 0.02, 0.01), labels = c("-0.01","0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.25, 0.015, "p = 0.0008", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(6, 1, 0), cex.lab = 3)


# Between 15D and 30D
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_15_30, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.010, 0.01, 0.005), labels = c("-0.01","0.005", "0", "0.005", "0.10"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.01, "p = 0.94", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(7, 1, 0), cex.lab = 3)
```

##### 10.3.4.1 Save contrast

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save contrast (L-function) for microglia
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_LInhom_0-5.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_0_5, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 1.2),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1.2, 0.3), labels = c("0", "0.3", "0.6", "0.9", "1.2"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.08, 0.02, 0.03), labels = c("-0.08","-0.05", "-0.03", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.4, -0.07, "p = 0.001", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 0D-5D", mgp = c(6.5, 1, 0), cex.lab = 3)
dev.off()


png("Plots/Microglia_LInhom_5-15.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_5_15, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
    shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.01, 0.02, 0.01), labels = c("-0.01","0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.30, 0.015, "p = 0.01", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(6, 1, 0), cex.lab = 3)

dev.off()

png("Plots/Microglia_LInhom_15-30.png", width = 500, height = 500)
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LInhom_15_30, cbind(pooliso, pooltheo, loiso, hiiso) ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     xlab = "",
     xlim= c(0, 0.8),
     ylab = "",
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.010, 0.01, 0.005), labels = c("-0.01","0.005", "0", "0.005", "0.10"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.01, "p = 0.93", cex=4)

title(xlab = "r(mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "L(r) 5D-15D", mgp = c(7, 1, 0), cex.lab = 3)

dev.off()
```

### 10.4 Permutation test comparing time points

Having computed the contrast, we were interest in assessing if the point patterns per time point are identically distributed. To do so, we used a permutation test for point patterns with the `studpermu.test`from `spatstat`.

#### 10.4.1 Prepare the data

We bind the rows from the time points we want to compare using the `rbind` funtion. In this case, the pairs 0-5D, 5-15D, and 15-30D.

```{r}
#| label: Prepare the data for permutation test
#| include: true
#| warning: false
#| message: false

Point_Patterns_5x_0_5 <- rbind(Point_Patterns_5x_0D, Point_Patterns_5x_5D)
Point_Patterns_5x_5_15 <- rbind(Point_Patterns_5x_5D, Point_Patterns_5x_15D)
Point_Patterns_5x_15_30 <- rbind(Point_Patterns_5x_15D, Point_Patterns_5x_30D)
```

#### 10.4.2 Perform the permutation test for astrocytes

We perform the permutation test stating the Linhom function for the `summaryfunction` argument. The test perform by default 999 permutations

```{r}
#| label: Permutation test for astrocytes
#| include: true
#| warning: false
#| message: false

Astrocytes_5D_LPermutation <- studpermu.test(Point_Patterns_5x_0_5, Astrocytes ~ DPI, summaryfunction = Linhom)

Astrocytes_15D_LPermutation <- studpermu.test(Point_Patterns_5x_5_15, Astrocytes ~ DPI, summaryfunction = Linhom)

Astrocytes_30D_LPermutation <- studpermu.test(Point_Patterns_5x_15_30, Astrocytes ~ DPI, summaryfunction = Linhom)
```

We plot the results. Given that we are passing a cumulative function (L-function) there are limitations to extract specific central tendency measurements. The resulting p-value represents the probability of getting a difference as extreme as the observed if we consider that the permutations fall within a null hypothesis (no difference). Please note that a p-values does not inform about the magnitude of the difference. In this case, it is just an informative statistic suggesting that point patterns are not derived from the same underlying function. The resulting p-values are represented in figure a-Biv showing contrasted rhohats for astrocytes and microglia.

```{r}
#| label: Print permutation test for astrocytes
#| include: true
#| warning: false
#| message: false

Astrocytes_5D_LPermutation
Astrocytes_15D_LPermutation
Astrocytes_30D_LPermutation 
```

#### 10.4.3 Perform the permutation test for Microglia

We perform the permutation test for microglia as one previously for astrocytes.

```{r}
#| label: Permutation test for Microglia
#| include: true
#| warning: false
#| message: false

Microglia_5D_LPermutation <- studpermu.test(Point_Patterns_5x_0_5, Microglia ~ DPI, summaryfunction = Linhom)

Microglia_15D_LPermutation <- studpermu.test(Point_Patterns_5x_5_15, Microglia ~ DPI, summaryfunction = Linhom)

Microglia_30D_LPermutation <- studpermu.test(Point_Patterns_5x_15_30, Microglia ~ DPI, summaryfunction = Linhom)
```

We plot the results.

```{r}
#| label: Print permutation test for Microglia
#| include: true
#| warning: false
#| message: false

Microglia_5D_LPermutation
Microglia_15D_LPermutation
Microglia_30D_LPermutation 
```

## 11. Nearest-neighbour and empty-space distances

We used the `Point_Patterns_10x` hyperframe to compute the **J-function**, which comprises a combination of Nearest-neighbour distances (G-function) and empty-space distances (F-function) [@spatstat].

### 11.1 Create stienen maps for astrocytes and microglia

First, we create stienen maps of the evaluated 10x images for visualization porpuses. Ploting of the images is avoided in the rendered .htlm.Representative images are dispayed in **Figure 6C-D** of the main research article.

```{r}
#| label: Plot Stienen maps for astrocytes and microglia
#| include: false
#| warning: false
#| message: false

# We set a different scale for 0 DPI given the wide distance of the cells at this stage
Stienen_colmap_0D <- colourmap(topo.colors(250), range=c(0,0.1))
Stienen_symap_0D<- symbolmap(size=function(x) x/1, bg=Stienen_colmap_0D, range=c(0,0.1))

Stienen_colmap <- colourmap(topo.colors(250), range=c(0,0.05))
Stienen_symap <- symbolmap(size=function(x) x/1, bg=Stienen_colmap, range=c(0,0.05))


# We plot for astrocytes 
with (Point_Patterns_10x_0D, stienen (Astrocytes, symap=Stienen_symap_0D))
with (Point_Patterns_10x_5D, stienen (Astrocytes, symap=Stienen_symap))
with (Point_Patterns_10x_15D, stienen (Astrocytes, symap=Stienen_symap))
with (Point_Patterns_10x_30D, stienen (Astrocytes, symap=Stienen_symap))


# We plot for microglia

with (Point_Patterns_10x_0D, stienen (Microglia, symap=Stienen_symap_0D))
with (Point_Patterns_10x_5D, stienen (Microglia, symap=Stienen_symap))
with (Point_Patterns_10x_15D, stienen (Microglia, symap=Stienen_symap))
with (Point_Patterns_10x_30D, stienen (Microglia, symap=Stienen_symap))
```

### 11.2 Compute the J-function

We computed the J-function for astrocytes and microglia using `JInhom` from `spatstat` to account for inhomogenity in the point patterns given the differential allocation of the glial mass at each time point. Values below 1 function are consistent with clustering while those above are consistent with a regular pattern. In our case, the results suggest that all the patterns are more consistent with independet point patterns at the short scale (G and F functions combined in the J-function) giving that the deviance from 1 is not strong after brain injury.

#### 11.2.1 for astrocytes

```{r}
#| label: Compute J-function for astrocytes
#| include: true
#| warning: false
#| message: false

Point_Patterns_10x$Astrocytes_JInhom <- with (Point_Patterns_10x, Jinhom(Astrocytes, lambda = Astrocytes_Dens, correction = "border"))
Astrocytes_Jsplit <- split(Point_Patterns_10x$Astrocytes_JInhom, Point_Patterns_10x$DPI)
Astrocytes_JPool <- anylapply(Astrocytes_Jsplit, pool)
```

#### 11.2.2 for microglia

```{r}
#| label: Compute J-function for microglia
#| include: true
#| warning: false
#| message: false

Point_Patterns_10x$Microglia_JInhom <- with (Point_Patterns_10x, Jinhom(Microglia, lambda = Microglia_Dens, correction = "border"))
Microglia_Jsplit <- split(Point_Patterns_10x$Microglia_JInhom, Point_Patterns_10x$DPI)
Microglia_JPool <- anylapply(Microglia_Jsplit, pool)
```

### 11.3 Plot the J-function

We plot the J-function using the R-base graphing system.

#### 11.3.1 Plot the J-function for Astrocytes

```{r}
#| label: Plot the J-function for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`0D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.08, 0.02), labels = c("0", "0.02", "0.04", "0.06", "0.08"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.9999, 1, 0.00002), labels = c("0.9","0.92", "0.94", "0.96", "0.98", "1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 

# For 5 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`5D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.98, 1.01, 0.01), labels = c("0.98","0.99", "1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`15D`, cbind(poolbord, pooltheo, lobord, hibord)  ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.97, 1.01, 0.01), labels = c("0.97","0.98", "0.99", "1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 30 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`30D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.02, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.99, 1.01, 0.01), labels = c("0.99","1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 
```

##### 11.3.1.1 Save J-function for astrocytes

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save the J-function for astrocytes
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_JFunction_0D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`0D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.08, 0.02), labels = c("0", "0.02", "0.04", "0.06", "0.08"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.9999, 1, 0.00002), labels = c("0.9","0.92", "0.94", "0.96", "0.98", "1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3)  

dev.off()


png("Plots/Astrocytes_JFunction_5D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`5D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.98, 1.01, 0.01), labels = c("0.98","0.99", "1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 



dev.off()


png("Plots/Astrocytes_JFunction_15D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`15D`, cbind(poolbord, pooltheo, lobord, hibord)  ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.97, 1.01, 0.01), labels = c("0.97","0.98", "0.99", "1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_JFunction_30D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Astrocytes_JPool$`30D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.02, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.99, 1.01, 0.01), labels = c("0.99","1", "1.01"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()
```

#### 11.3.2 Plot J function for microglia

```{r}
#| label: Plot the J-function for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`0D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.08, 0.02), labels = c("0", "0.02", "0.04", "0.06", "0.08"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.99998, 1.000005, 0.000005), labels = c("0.98","0.985", "0.990", "0.995", "1", "1.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6.5, 1, 0), cex.lab = 3) 

# For 5 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`5D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.85, 1.05, 0.05), labels = c("0.85","0.90", "0.95", "1", "1.05"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`15D`, cbind(poolbord, pooltheo, lobord, hibord)  ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.025, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.80, 1.10, 0.1), labels = c("0.80","0.90", "1", "1.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 30 DPI
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`30D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.02, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.90, 1.02, 0.03), labels = c("0.90","0.93", "0.96", "0.99", "1.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 
```

##### 11.3.2.1 Save J-function for Microglia

```{r}
#| label: Save the J-function for microglia
#| include: false
#| warning: false
#| message: false

png("Plots/Microglia_JFunction_0D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`0D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.08, 0.02), labels = c("0", "0.02", "0.04", "0.06", "0.08"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.99998, 1.000005, 0.000005), labels = c("0.98","0.985", "0.990", "0.995", "1", "1.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6.5, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_JFunction_5D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`5D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.03, 0.01), labels = c("0", "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.85, 1.05, 0.05), labels = c("0.85","0.90", "0.95", "1", "1.05"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 



dev.off()


png("Plots/Microglia_JFunction_15D.png", width = 500, height = 300)
par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`15D`, cbind(poolbord, pooltheo, lobord, hibord)  ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.025, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.80, 1.10, 0.1), labels = c("0.80","0.90", "1", "1.1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_JFunction_30D.png", width = 500, height = 300)

par(mar=c(5,8,0.5,0.5)+1)
plot(Microglia_JPool$`30D`, cbind(poolbord, pooltheo, lobord, hibord) ~ r,
     shade = c("lobord", "hibord"),
     main = "", 
     cex.lab = 3.5,
     cex.axis = 3.5,
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n" )
    

axis(1, at = seq(0, 0.02, 0.01), labels = c("0", "0.01", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0.90, 1.02, 0.03), labels = c("0.90","0.93", "0.96", "0.99", "1.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

text(0.2, -0.2, "p = 0.32", cex=4)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("J "[inhom] * "(r)"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()

```

### References

::: {#refs}
:::
