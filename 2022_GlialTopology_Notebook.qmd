---
con---
title: "Dissecting glial scar formation by spatial point pattern and topological data analysis"
subtitle: "Quarto notebook"
format:
   html:
    code-fold: true
editor: visual
csl: science.csl
bibliography: references.bib
---

This notebook contains the analysis pipeline employed for the article "Dissecting glial scar formation by spatial point pattern and topological data analysis" published in XXX. With this code readers should be able to replicate the experimental results and apply the same type of analysis in other contexts related to glial cell distribution in animal tissue. If the analysis approach is useful for your own experimental purposes, please cite us:

(L) 

# I. Install and load required packages

Install and load required libraries. Please uncomment (erase #) in the 'install.packages' line if installation is required.

## Install required Packages

```{r}
#| label: Install required packages
#| include: true
#| warning: false
#| message: false

# To install packcages uncomment the following line

#install.packages(c("ggplot2","dpylr", "ggridges", "raincloudplots", "cowplot", "data.table", "ggrepel", "sjPlot", "bayesplot", "reshape2", "purrr", "tidyr", "brms", "emmeans", "modelr", "plyr", "pacthwork", "spatstat", "ggdist", "ggpubr", "bayesplot", "RandomFieldsUtils", "RandomFields"))

#library(devtools)
#install_github ("cran/RandomFields")
```

## Load required packages

Load the libraries required for script execution every time a new R-session is started. We also load `R_rainclouds` and `summarySE.R` functions available on the working directory (Github website).

```{r}
#| label: Load required packages
#| include: true
#| warning: false
#| message: false

library(ggplot2)
library(ggridges)
library(dplyr)
library(sjPlot)
library(ggrepel)
library(reshape2)
library(purrr)
library(tidyr)
library(tibble)
library(brms)
library(emmeans)
library(modelr)
library(tidybayes)
library(plyr)
library(patchwork)
library(spatstat)
library(data.table)
library(cowplot)
library(geosphere)
library(ggdist)
library(readr)
library(ggpubr)
library(raster)
library(bayesplot)
library(RandomFieldsUtils)
library(RandomFields)

# The following functions are available on the github site. Please change the root directory if required
source("R_Functions/R_rainclouds.R")
source("R_Functions/summarySE.R")
```

# 1. Process data and generate point patterns

## 1.1 Process annotations files

Automated cell detection using QuPath generates `_annotations.tsv` files containing the summary of detected cells per project (brain). These files are located in subfolders of the `QupathProjects_5x` folder in the GitHub repository. Here we merge all these files to create a clean .csv data table with summaries for all brains. Different scripts are generated for GFAP and IBA1/NeuN detection, as the latter contain additional cell classifiers.

### 1.1.1 Annotations for GFAP

```{r}
#| label: Process anotations files for Gfap
#| include: true
#| warning: false
#| message: false

append_annotations <- function(base_path, brain_name, results_path) {
  
  Gfap_csv_path <- paste0(results_path, "/Gfap_Summary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/Gfap/")
  process_annotation(results_path = Gfap_csv_path, Annotations_Path)
  
}

process_annotation <- function(results_path, path) {
  
  print (path)
  
  Annotations <- list.files(path = path, pattern = "annotations.tsv", full.names = TRUE) %>% 
    lapply(read_tsv) %>%                              
    bind_rows
 
   print(Annotations)
  
  Annotations <- as.data.frame(Annotations)
  names(Annotations) <- NULL
  
  write.table(Annotations, results_path, append = TRUE, sep=",")
}

basePath <- "QupathProjects_5x"
resultsPath <- "DataTables"

Gfap_csv_path <- paste0(resultsPath, "/Gfap_Summary.csv")

Annotations_Header <- c("Image",	"Name",	"Class",	"Parent",	"ROI",	"Centroid X ?m",	"Centroid Y ?m",	"ID",	"Parent ID",	"Side",	"Num Detections",	"Area ?m^2",	"Perimeter ?m")

df_header <- data.frame(matrix(ncol = 13, nrow = 0))
names(df_header) <- Annotations_Header

write.csv(df_header, Gfap_csv_path)

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)

for (brain in brains){
  append_annotations(basePath, brain, resultsPath)
}
```

### 1.1.1 Anotations for IBA1/NeuN

We perform the cell procedure for IBA1 and NeuN

```{r}
#| label: Process anotations files for Iba1/NeuN
#| include: true
#| warning: false
#| message: false


append_annotations <- function(base_path, brain_name, results_path) {
  
  Iba1_csv_path <- paste0(results_path, "/Iba1_Summary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/Iba1/")
  process_annotation(results_path = Iba1_csv_path, Annotations_Path)
  
  NeuN_csv_path <- paste0(results_path, "/NeuN_Summary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/NeuN/")
  process_annotation(results_path = NeuN_csv_path, Annotations_Path)
}

process_annotation <- function(results_path, path) {
  
  print (path)
  
  Annotations <- list.files(path = path, pattern = "annotations.tsv", full.names = TRUE) %>% 
    lapply(read_tsv) %>%                              
    bind_rows
 
   print(Annotations)
  
  Annotations <- as.data.frame(Annotations)
  names(Annotations) <- NULL
  
  write.table(Annotations, results_path, append = TRUE, sep=",")
}


basePath <- "QupathProjects_5x"
resultsPath <- "DataTables"

Iba1_csv_path <- paste0(resultsPath, "/Iba1_Summary.csv")
NeuN_csv_path <- paste0(resultsPath, "/NeuN_Summary.csv")

Annotations_Header <- c("Image",	"Name",	"Class",	"Parent",	"ROI",	"Centroid X ?m",	"Centroid Y ?m",	"ID",	"Parent ID",	"Side",	"Num Detections",	"Num Negatie", "Num Positive", "Positive %", "Num Positive per mm^2",  "Area ?m^2",	"Perimeter ?m")

df_header <- data.frame(matrix(ncol = 17, nrow = 0))
names(df_header) <- Annotations_Header

write.csv(df_header, Iba1_csv_path)
write.csv(df_header, NeuN_csv_path)

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)


for (brain in brains){
  append_annotations(basePath, brain, resultsPath)
}
```

After executing the previous two chunks, three files are located in the `DataTables` folder corresponding to each marker.

## 1.2 Process cell detection files

Automated cell detection with QuPath also generated `_detections.tsv` files containing the coordinates of individual cells per brain. In the following chunk, we manipulate the coordinates, clean and subset the data to obtain .csv tables tables per brain containing relevant information, including cell coordinates. This result in several files stored in the `ResultsTables/CellCoordinates_5x` folder.

```{r}
#| label: Process cell detections files 5x
#| include: true
#| warning: false
#| message: false

process_initial_data <- function(Cells_Path, pattern, coordinates_columns, filename, brain_name) {
  
  Cells_Raw <- list.files(path=Cells_Path, pattern = pattern, full.names=TRUE) %>%        # Create object with all .tsv files in directory
    lapply(read_tsv) %>%                              # Store all files in list
    bind_rows                                         # Combine data sets into one data set 
  
  # Convert to data frame
  Cells <- as.data.frame(Cells_Raw) 
  
  # Transform coordinates from mm to microns for adecuate plotting in BrainRender
  Cells$Z <- (Cells[,c(coordinates_columns[[1]])]*1000)
  Cells$X <- (Cells[,c(coordinates_columns[[2]])]*1000)
  Cells$Y <- (Cells[,c(coordinates_columns[[3]])]*1000)
  
  # Subset the date set to keep only relevant columns
  Cells <- subset(Cells, select = c(Image, Name, Parent, Z, X, Y))
  Cells <- Cells[!(Cells$Name=="Negative" | Cells$Name=="Necrosis"),]
  Cells <- Cells %>% sample_frac(.1)
  
  # Extract metadata information from image name
  Cells <- cbind(Cells, do.call(rbind , strsplit(Cells$Image , "[_\\.]"))[,3:5])
  colnames(Cells) <- c( colnames(Cells[1:3]), paste0("New" , 1:3))
  Cells <- cbind(Cells[c(-2,-3)] , Cells[c(2,3)])
  
  # Rename columns
  colnames(Cells) <- c("Image", "Z", "X", "Y", "MouseID", "DPI", "Section", "ObjectID", "Region")
  
  Cells <- subset(Cells, select = c(MouseID, DPI, Region, Section, ObjectID, Z, X, Y))
  
  # Write a .csv file
  write.csv(Cells, filename)
  
  }

process_brain <- function(basePath, resultsPath, path) {
  
  set.seed(88071)
  
  # Load cells data set
  
  Iba1_Path <- paste0(basePath, "/", path, "/Iba1")
  Iba1_Filename <- paste0(resultsPath, "/", path, "_Iba1_Coordinates.csv")
  Iba1 <- process_initial_data(Iba1_Path, "detections.tsv", coordinates_columns = c(46, 47, 48), filename = Iba1_Filename, brain_name = path)
  
  
  Gfap_Path <- paste0(basePath, "/", path, "/Gfap")
  Gfap_Filename <- paste0(resultsPath, "/", path, "_Gfap_Coordinates.csv")
  process_initial_data(Gfap_Path, "detections.tsv", c(46, 47, 48), Gfap_Filename, path)
  
  
  Neun_Path <- paste0(basePath, "/", path, "/NeuN")
  Neun_Filename <- paste0(resultsPath, "/", path, "_NeuN_Coordinates.csv")
  process_initial_data(Neun_Path, "detections.tsv", c(46, 47, 48), Neun_Filename, path)
}

basePath <- "QupathProjects_5x"
resultsPath <- "DataTables/CellCoordinates_5x"

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)

for (brain in brains){
  process_brain(basePath, resultsPath, brain)
}
```

## 1.3 Generate hyperframes and additional data tables

In this step, we retrieve the files located in the `ResultsTables/CellCoordinates_5x` folder to generate point patterns, density kernels and tessellations, which are stored in a hyperframe. We also generate files containing intensity summaries and cell locations in tessellated images. This features will be explained later in the work flow.

```{r}
#| label: Generate hyperframes and additional data tables
#| include: true
#| warning: false
#| message: false

coordinatesPath <- "DataTables/CellCoordinates_5x"
densityTablesPath <- "DataTables"

Cells_Intensity_CSV_Path <- paste0(densityTablesPath, "/Cells_Intensity.csv")
Cells_Intensity_Header <- c("Brain", "Neurons_Intensity", "Astrocytes_Intensity", "Microglia_Intensity")

Tesselation_CSV_Path <- paste0(densityTablesPath, "/Cells_Covariance.csv")
Tesselation_Test_Header <- c("Brain", "AN1", "AN2", "MN1", "MN2", "AM1", "AM2")

# Results to generate
Result_Hyperframe <- NULL

# Functions

add_to_hyperframe <- function (...) {
    if (is.null(Result_Hyperframe)){
      Result_Hyperframe <<- hyperframe(...)
    } else {
      Result_Hyperframe <<- rbind(Result_Hyperframe, hyperframe(...))
    }
}


create_empty_table <- function (path, header) {
  df_header <- data.frame(matrix(ncol = length(header), nrow = 0))
  names(df_header) <- header

  write.csv(df_header, path)
}

create_empty_table(Cells_Intensity_CSV_Path, Cells_Intensity_Header)
create_empty_table(Tesselation_CSV_Path, Tesselation_Test_Header)


# Manipulate coordinates for correct plotting in R
coordinates_manipulation <- function (Raw_Table) {
  Cell_Coor_X <- Raw_Table$Y
  Cell_Coor_Y <- Raw_Table$X

  ## Bind the vectors, rotate and bind to original table
  Coords <- cbind(Cell_Coor_X, Cell_Coor_Y)
  Coords <- secr::rotate(Coords, 180)
  Coords <- as.data.frame(Coords)
  return(cbind(Raw_Table, Coords))
}

# Cretate a point pattern (PPP) object

create_point_pattern <- function(Subset) {
  # We define the limits of the window according to Neuron coordinates
  xlim <- range(Subset$Cell_Coor_X)
  ylim <- range(Subset$Cell_Coor_Y)

  # Create point pattern for neurons
  Cells_PPP <- with(Subset, ppp(x = Subset$Cell_Coor_X, y = Subset$Cell_Coor_Y, xrange = xlim, yrange = ylim))
  unitname(Cells_PPP)  <- list("mm", "mm", 1.3/1000)
  Cells_PPP <- spatstat.geom::rescale (Cells_PPP)
  
  ## We rescale the unit to obtain measurements in mm2
  return(Cells_PPP)
}

define_convex_hull <- function(Neurons_PPP, Cells_PPP) {
  chull <- convexhull(Neurons_PPP)
  Window(Cells_PPP) <- chull
  return(Cells_PPP)
}


tesselation <- function(Cells_Density) {
  ## We define the quantiles for Neurons
  Cells_Quantiles <- c(0, 20, 150)

  ## We define the cutting spots according to quantiles
  Cells_Cut <- cut(Cells_Density, breaks = Cells_Quantiles, labels = c ("Low", "High"))

  ## We generate the tesselation image
  return(tess(image = Cells_Cut))
}

tesselation_data <- function(Cells_PPP, Cells_Tess) {
  Result <- quadratcount(Cells_PPP, tess = Cells_Tess )
  return(Result)
}

Neurons_Astrocytes_Function_Vector <- c()
Microglia_Neurons_Function_Vector <- c()
Astrocytes_Microglia_Function_Vector <- c()


process_file <- function (basePath, path) {

  Neurons_Raw <- read.csv(file = paste0(basePath, '/', path, '_NeuN_Coordinates.csv'), header = TRUE)
  Astrocytes_Raw <- read.csv(file = paste0(basePath, '/', path, '_Gfap_Coordinates.csv'), header = TRUE)
  Microglia_Raw <- read.csv(file = paste0(basePath, '/', path, '_Iba1_Coordinates.csv'), header = TRUE)

  Neurons <- coordinates_manipulation(Neurons_Raw)
  Astrocytes <- coordinates_manipulation(Astrocytes_Raw)
  Microglia <- coordinates_manipulation(Microglia_Raw)

  # Subset neurons
  Neurons_Subset <- Neurons[(Neurons$Section=="Scene3"),]
  Neurons_Subset <- Neurons_Subset[(Neurons_Subset$Y < 5000),]

  # We subset astrocytes
  Astrocytes_Subset <- Astrocytes[(Astrocytes$Section=="Scene3"),]
  Astrocytes_Subset <- Astrocytes_Subset[(Astrocytes_Subset$Y < 5000),]

  # We subset microglia
  Microglia_Subset <- Microglia[(Microglia$Section=="Scene3"),]
  Microglia_Subset <- Microglia_Subset [(Microglia_Subset$Y < 5000),]

  Neurons_PPP <- create_point_pattern(Neurons_Subset)
  Astrocytes_PPP <- create_point_pattern(Astrocytes_Subset)
  Microglia_PPP <- create_point_pattern(Microglia_Subset)

  Neurons_PPP <- define_convex_hull(Neurons_PPP, Neurons_PPP)
  Astrocytes_PPP <- define_convex_hull(Neurons_PPP, Astrocytes_PPP)
  Microglia_PPP <- define_convex_hull(Neurons_PPP, Microglia_PPP)

  Neurons_Intensity <- summary(Neurons_PPP)$intensity
  Astrocytes_Intensity <- summary(Astrocytes_PPP)$intensity
  Microglia_Intensity <- summary(Microglia_PPP)$intensity

  Intensity_Row <- t(c(path, Neurons_Intensity, Astrocytes_Intensity, Microglia_Intensity))
  write.table(Intensity_Row, Cells_Intensity_CSV_Path, append = TRUE, sep=",", col.names = FALSE)

  Microglia_Density <- density(Microglia_PPP, sigma =0.2, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")
  Astrocytes_Density <- density(Astrocytes_PPP, sigma =0.2, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")
  Neurons_Density <- density(Neurons_PPP, sigma =0.3, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")

  Neurons_Tess <- tesselation(Neurons_Density)
  Astrocytes_Tess <- tesselation(Astrocytes_Density)
  Microglia_Tess <- tesselation(Microglia_Density)

  Astrocytes_in_Neurons <-tesselation_data(Astrocytes_PPP, Neurons_Tess)
  Microglia_in_Neurons <- tesselation_data(Microglia_PPP, Neurons_Tess)
  Astrocytes_in_Microglia <- tesselation_data(Astrocytes_PPP, Microglia_Tess)

  Tesselation_Row <- t(c(path, Astrocytes_in_Neurons, Microglia_in_Neurons, Astrocytes_in_Microglia))
  write.table(Tesselation_Row, Tesselation_CSV_Path, append = TRUE, sep=",", col.names = FALSE)

  Astrocytes_Neurons_Correlation <- ppm(Astrocytes_PPP ~ Neurons_Density)
  Microglia_Neurons_Correlation <- ppm(Microglia_PPP ~ Neurons_Density)
  Astrocytes_Microglia_Correlation <- ppm(Astrocytes_PPP ~ Microglia_Density)

  fragments <- strsplit(path, "_")[[1]]
  len <- length(fragments)
  mouse <- fragments[3]
  dpi <- fragments[4]

  add_to_hyperframe(Neurons = Neurons_PPP, Astrocytes = Astrocytes_PPP, Microglia = Microglia_PPP, Neurons_Dens = Neurons_Density, Astrocytes_Dens = Astrocytes_Density, Microglia_Dens = Microglia_Density, Neurons_Tess = Neurons_Tess, Microglia_Tess = Microglia_Tess, ID = mouse, DPI=dpi, stringsAsFactors=TRUE)
}

csv_files <- list.files(coordinatesPath, full.names = FALSE, recursive = FALSE)

brains <- c()

for (csv in csv_files) {
  fragments <- strsplit(csv, "_")[[1]]
  len <- length(fragments)
  brain_name <- paste(fragments[1:(len-2)], collapse="_")
  brains <- append(brains, brain_name)
}

brains <- unique(brains)

for (brain in brains) {
  process_file(coordinatesPath, brain)
}

saveRDS(Result_Hyperframe, "Hyperframes/PointPatterns_5x.rds")

```

The following must results in an hyperframe called `PointPatterns_5x.rds` stored in the hyperframes folder, and two files, `Cells_Covariance.csv` and `Cells_Intensity.csv` stored in the `DataTables` folder. We these files we are ready to start data analysis.

# 2. Analysis of cell intensity

We used the `spatstat` R-package [@baddeley2005; @baddeley2015; @spatstat] to convert the xy coordinates of detected cells into point patterns (ppp), using the code in **section 1.3**. The point patterns were scaled in mm (1.3 mm/1000 px). All point patterns were stored in a hyperframe. Additionally, we generated .csv files containing the estimated intensity (summary(Cells_PPP)\$intensity) in image #3 of each brain (see supplementary table 1 in the research article).

In the following sections we handle the `Cells_Intensity.csv` data frame to perform scientific inference on spatial intensity of NeuN, GFAP, and IBA1-expressing cells.

## 2.1 Load and prepare the dataset

Here, we load and handle the spatial intensity measurements to produce a tidy data frame.

```{r}
#| label: Subset data set for cell intensity
#| include: true
#| warning: false
#| message: false

# Load raw data table
Cells_Intensity_Raw <- read.csv(file = 'DataTables/Cells_Intensity.csv', 
                                header = TRUE)

# We subset the relevant columns
Cells_Intensity <- subset(Cells_Intensity_Raw, select = -c(X))

# Extract metadata from the image name and rename columns
Cells_Intensity  <- cbind(Cells_Intensity, do.call(rbind , strsplit(Cells_Intensity$Brain, "[_\\.]"))[,3:4])
colnames(Cells_Intensity) <- c("Brain", "Neurons_Intensity", "Astrocytes_Intensity", "Microglia_Intensity", "MouseID", "DPI")

# We subset the relevant columns
Cells_Intensity <- subset(Cells_Intensity, select = c(MouseID, DPI, Neurons_Intensity, Astrocytes_Intensity, Microglia_Intensity))

# We convert DPI to a numeric variable (Perform this step if required by the model)
#Cells_Intensity$DPI[Cells_Intensity$DPI == '0D'] <- '0'
#Cells_Intensity$DPI[Cells_Intensity$DPI == '5D'] <- '5'
#Cells_Intensity$DPI[Cells_Intensity$DPI == '15D'] <- '15'
#Cells_Intensity$DPI[Cells_Intensity$DPI == '30D'] <- '30'
#Cells_Intensity$DPI <- as.numeric(Cells_Intensity$DPI)

# We set explicitly the factor level for DPI 
Cells_Intensity$DPI <- factor(Cells_Intensity$DPI, levels = c("0D", "5D", "15D", "30D"))

# We plot the head of the data table to verify the transformation
head(Cells_Intensity)
```

The data fraame contain 5 Columns. MouseId (Animal unique identifier), DPI (Days post-ischemia), Neurons_intensity (Neuronal intensity based on NeuN expression), Astrocytes_intensity (Astrocytes intensity based on GFAP expression), and Microglia_intensity (Microglia intensity based on IBA1 expression). As we refer in the research article, we are aware that GFAP and IBA1 are expressed by other cell types in the nervous system. However, this fact does not contradict our approach.

## 2.2 Exploratory data visualization

We use `geom_density_ridges` to visualize the data sets. The same graphical parameters are applied to all cell types. Graphs are stored in the `Plots` folder.

### 2.2.1 Neuronal intensity visualization (NeuN)

```{r}
#| label: Create graph for neuronal intensity (NeuN)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

NeuN_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Neurons_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "Raw intensity") +
    
  scale_x_continuous(name="\n Neuronal intensity (NeuN) ",
                     limits=c(0, 70), 
                     breaks=seq(0,100,10)) +
  
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = NeuN_Intensity_Ridges, "Plots/NeuN_Intensity_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")
```

### 2.2.2 Astrocyte intensity (Gfap)

```{r}
#| label: Create graph for astrocyte intensity (Gfap)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Gfap_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Astrocytes_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "Raw intensity") +
    
  scale_x_continuous(name="\n Astrocyte intensity (GFAP) ",
                     limits=c(0, 50), 
                     breaks=seq(0,100,10)) +
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = Gfap_Intensity_Ridges, "Plots/Gfap_Intensity_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")
```

### 2.2.3 Microglia intensity (Iba1)

```{r}
#| label: Create graph for microglia intensity (Iba1)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)
Iba1_Intensity_Ridges <- ggplot(Cells_Intensity, 
                               aes(x = Microglia_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "Raw intensity") +
    
  scale_x_continuous(name="\n Microglia intensity (IBA1) ",
                     limits=c(0, 60), 
                     breaks=seq(0,100,10)) +
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = Iba1_Intensity_Ridges, "Plots/Iba1_Intensity_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")
```

### 2.2.4 Plot the intensity graphs

Here we plot the graphs for NeuN, GFAP and IBA1 generated in the previous chunks. These graphs are displayed in supplementary figure 2 of the research article.

```{r}
#| label: Plot intensity graphs
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Ridges, Gfap_Intensity_Ridges, Iba1_Intensity_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 2.3 Bayesian modeling of cell intensity

Here we employ the `brms` package [@bürkner2017; @bürkner2018; @brms]to perform parameter estimation and its uncertainty. Based on the initial data visualization, we fitted different models using student distributions (robust regression) to reduce the impact of extreme data. We also evaluated heteroskedasticity models to account for different variances in the data. In particular, we set DPI as a predictor and not a groping variable (multilevel model) considering that the control condition (no ischemia) does not share information with the other DPIs.

We set formulas and fit the models using 4 chains, 5000 iterations (2500 as a warm up) and seed 8807 (important for reproducibility purposes).Given that we have previous information regarding the expected decrease in spatial intensity, we used a weak informative prior to favor the random sampling.The models are saved as .rds objects and become available in the `BayesianModels` folder. The model is loaded (not refitted) when the .rds file is available. To refit the model, erase the respective file in the output folder.

### 2.3.1 Modeling for neuronal intensity (NeuN)

```{r}
#| label: Modeling neuronal intensity (NeuN)
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a single predictor)
NeuN_Intensity_Mdl1 <- bf(Neurons_Intensity ~ 0 + DPI) 

get_prior(NeuN_Intensity_Mdl1, data = Cells_Intensity) 

NeuN_Intensity_Mdl1_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))
                              
NeuN_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = NeuN_Intensity_Mdl1,
                          prior = NeuN_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuN_Intensity_Fit1.rds",
                          file_refit = "never")

NeuN_Intensity_Fit1 <- add_criterion(NeuN_Intensity_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
NeuN_Intensity_Mdl2 <- bf(Neurons_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI)

get_prior(NeuN_Intensity_Mdl2, data = Cells_Intensity) 

NeuN_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = NeuN_Intensity_Mdl2,
                          prior = NeuN_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuN_Intensity_Fit2.rds",
                          file_refit = "never")

NeuN_Intensity_Fit2 <- add_criterion(NeuN_Intensity_Fit2, c("loo", "waic", "bayes_R2"))
```

### 2.3.2 Modeling for Astrocyte intensity (Gfap)

We perform the same procedure for GFAP and later IBA1. We considered the use of neuronal intensity as an additional predictor. However, this may induce model confounding given that the neuronal spatial intensity can be understood as a postreatment effect of DPI.For this reason, we fit a model with neuronal intensity as unique predictor. we set the same weak informative prior for facilitating exploration of the parameter space.

```{r}
#| label: Modeling astrocytes intensity (Gfap)
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a predictor)
Gfap_Intensity_Mdl1 <- bf(Astrocytes_Intensity ~ 0 + DPI) 

get_prior(Gfap_Intensity_Mdl1, data = Cells_Intensity) 

Gfap_Intensity_Mdl1_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))

Gfap_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Gfap_Intensity_Mdl1,
                          prior = Gfap_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Gfap_Intensity_Fit1.rds",
                          file_refit = "never")

Gfap_Intensity_Fit1 <- add_criterion(Gfap_Intensity_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
Gfap_Intensity_Mdl2 <- bf(Astrocytes_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI)

get_prior(Gfap_Intensity_Mdl2, data = Cells_Intensity) 

Gfap_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Gfap_Intensity_Mdl2,
                          prior = Gfap_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Gfap_Intensity_Fit2.rds",
                          file_refit = "never")

Gfap_Intensity_Fit2 <- add_criterion(Gfap_Intensity_Fit2, c("loo", "waic", "bayes_R2"))

# Model 3 (Neuronal intensity as a predictor) 
Gfap_Intensity_Mdl3 <- bf(Astrocytes_Intensity ~ 1 + Neurons_Intensity) 

get_prior(Gfap_Intensity_Mdl3, data = Cells_Intensity) 

Gfap_Intensity_Fit3 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Gfap_Intensity_Mdl3,
                          #prior = Gfap_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Gfap_Intensity_Fit3.rds",
                          file_refit = "never")

Gfap_Intensity_Fit3 <- add_criterion(Gfap_Intensity_Fit3, c("loo", "waic", "bayes_R2"))
```

### 2.3.3 Modeling for microglia intensity (Iba1)

We perform the same procedure for IBA1

```{r}
#| label: Modeling astrocytes microglia (Iba1)
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a predictor)
Iba1_Intensity_Mdl1 <- bf(Microglia_Intensity ~ 0 + DPI) 

get_prior(Iba1_Intensity_Mdl1, data = Cells_Intensity) 

Iba1_Intensity_Mdl1_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))

Iba1_Intensity_Fit1 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Iba1_Intensity_Mdl1,
                          prior = Iba1_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1_Intensity_Fit1.rds",
                          file_refit = "never")

Iba1_Intensity_Fit1 <- add_criterion(Iba1_Intensity_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
Iba1_Intensity_Mdl2 <- bf(Microglia_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI) 

get_prior(Iba1_Intensity_Mdl2, data = Cells_Intensity) 

Iba1_Intensity_Fit2 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Iba1_Intensity_Mdl2,
                          prior = Iba1_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1_Intensity_Fit2.rds",
                          file_refit = "never")

Iba1_Intensity_Fit2 <- add_criterion(Iba1_Intensity_Fit2, c("loo", "waic", "bayes_R2"))

# Model 3 (Neuronal intensity as a predictor) 
Iba1_Intensity_Mdl3 <- bf(Microglia_Intensity ~ 1 + Neurons_Intensity)

get_prior(Iba1_Intensity_Mdl3, data = Cells_Intensity) 

Iba1_Intensity_Fit3 <- brm(data = Cells_Intensity,
                          family = student,
                          formula = Iba1_Intensity_Mdl3,
                          #prior = Iba1_Intensity_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1_Intensity_Fit3.rds",
                          file_refit = "never")

Iba1_Intensity_Fit3 <- add_criterion(Iba1_Intensity_Fit3, c("loo", "waic", "bayes_R2"))
```

## 2.4 Analysis of fitted models

### 2.4.1 Analysis of neuronal intensity (NeuN)

#### 2.4.1.1 Posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for neurons intensity (NeuN)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
NeuN_Intensity_Mdl1_ppchecks <- brms::pp_check(NeuN_Intensity_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Neuronal intensity (NeuN) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = NeuN_Intensity_Mdl1_ppchecks, "Plots/NeuN_Intensity_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

# Model 2
NeuN_Intensity_Mdl2_ppchecks <- brms::pp_check(NeuN_Intensity_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI)") +
  
  scale_x_continuous(name="\n Neuronal intensity (NeuN) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = NeuN_Intensity_Mdl2_ppchecks, "Plots/NeuN_Intensity_Mdl2_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: Plot posterior predictive checks for neurons (NeuN)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Mdl1_ppchecks, NeuN_Intensity_Mdl2_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe there are no meaningful deviance between the posterior predictions in the two models. Now, we can use the Watanabe-Akaike information criterion (WAIC) to evaluate the model predictions.

#### 2.4.1.2 We compare the models

We use the `loo_compare` function to compare between the two fitted models. Then, we generate a graph using ggplot to produce a visual estimation.

```{r}
#| label: WAIC comparison for NeuN intensity
#| include: true
#| warning: false
#| message: false
#| results: false

#Perform model comaprison
w <- loo_compare(NeuN_Intensity_Fit1, NeuN_Intensity_Fit2,
                 criterion = "waic")

# Generate WAIC graph
Neurons_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("NeuN_Intensity_Fit1", "NeuN_Intensity_Fit2"),
                    labels=c("Fit1", "Fit2")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "Neurons WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Neurons_Inteinsity_WAIC, "Plots/Neurons_Inteinsity_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")

```

The results suggest that the two models have a similar performance for making out of sample predictions. The comparison graph is shown in supplementary figure 2.Based on this results, we will go further with Mdl1, which has DPI as a predictor.

#### 2.4.1.3 Plot model diagnostics

We plot Mdl1 diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for neurons (NeuN)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(NeuN_Intensity_Fit1)
color_scheme_set("viridis")

NeuN_Intensity_Trace <- mcmc_trace(NeuN_Intensity_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

NeuN_Intensity_Trace
```

This demonstrates that the four chains mixed well and explored the same parameter space

#### 2.4.1.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty. The model satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) are shown in **supplementary table 5** of the research article.

```{r}
#| label: Print summary for NeuN intensity Mdl1
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuN_Intensity_Fit1)
```

Additionally, we create a .doc file with the main output:

```{r}
#| label: Save summary for neurons intensity
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(NeuN_Intensity_Fit1, show.se = TRUE,
          auto.label = TRUE,
          file="Results/NeuN_Intensity_Fit1.doc")
```

### 2.4.2 Analysis of astrocyte intensity models (Gfap)

We perform the same procedure described previously for astrocytes (GFAP)

#### 2.4.2.1 Posterior predictive checks

```{r}
#| label: Create posterior predictive checks for astrocytes intensity (Gfap)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Gfap_Intensity_Mdl1_ppchecks <- brms::pp_check(Gfap_Intensity_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Astrocyte intensity (GFAP) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Gfap_Intensity_Mdl1_ppchecks, "Plots/Gfap_Intensity_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

# Model 2
Gfap_Intensity_Mdl2_ppchecks <- brms::pp_check(Gfap_Intensity_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Astrocyte intensity (GFAP) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Gfap_Intensity_Mdl2_ppchecks, "Plots/Gfap_Intensity_Mdl2_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

# Model 3
Gfap_Intensity_Mdl3_ppchecks <- brms::pp_check(Gfap_Intensity_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Neuronal intensity as a predictor",
       caption = "Model: Intensity ~ 1 + Neurons_Inten") + 
  
  scale_x_continuous(name="\n Astrocyte intensity (GFAP) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
          
      ) + 
    
    legend_none()  

ggsave(plot = Gfap_Intensity_Mdl3_ppchecks, "Plots/Gfap_Intensity_Mdl3_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: Plot posterior predictive checks for astrocytes (NeuN)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Gfap_Intensity_Mdl1_ppchecks, Gfap_Intensity_Mdl2_ppchecks, Gfap_Intensity_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe that model three shows visible deviations compared to models 1 and 2. To verify this observation we perform model comparison.

#### 2.4.2.2 We compare the models

```{r}
#| label: LOO comparison for Gfap
#| include: true
#| warning: false
#| message: false
#| results: false

w <- loo_compare(Gfap_Intensity_Fit1, Gfap_Intensity_Fit2, Gfap_Intensity_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Astrocytes_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Gfap_Intensity_Fit1", "Gfap_Intensity_Fit2", "Gfap_Intensity_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "Astrocytes WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Astrocytes_Inteinsity_WAIC, "Plots/Astrocytes_Inteinsity_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")

```

As implicated by pp_cheks, Mdl3 having neuronal intensity as a predictor perform worst out of sample that the other to models. Similar to neurons, heteroskedasticity does not substantially improve model estimations.

#### 2.4.2.3 Plot model diagnostics

We plot the model diagnostics

```{r}
#| label: Plot model diagnostics for astrocytes (Gfap)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Gfap_Intensity_Fit1)
color_scheme_set("viridis")

Gfap_Intensity_Trace <- mcmc_trace(Gfap_Intensity_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

ggsave(plot = Gfap_Intensity_Trace, "Plots/Gfap_Intensity_Trace.png", 
       width = 40, 
       height = 10, 
       units = "cm")

Gfap_Intensity_Trace 
```

There are not visibles issues with the chains.

#### 2.4.2.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty.The model satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 5** of the research article.

```{r}
#| label: Print summary for Gfap intensity Mdl1
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Gfap_Intensity_Fit1)
```

We create a .doc files with the main output:

```{r}
#| label: Save summary for astrocyte intensity
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(Gfap_Intensity_Fit1, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Gfap_Intensity_Fit1.doc")
```

### 2.4.3 Analysis of microglia intensity models (Iba1)

#### 2.4.3.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: Plot posterior predictive checks for microglia (Iba1)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Iba1_Intensity_Mdl1_ppchecks <- brms::pp_check(Iba1_Intensity_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Iba1_Intensity_Mdl1_ppchecks, "Plots/Iba1_Intensity_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

# Model 2
Iba1_Intensity_Mdl2_ppchecks <- brms::pp_check(Iba1_Intensity_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Iba1_Intensity_Mdl2_ppchecks, "Plots/Iba1_Intensity_Mdl2_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

# Model 3
Iba1_Intensity_Mdl3_ppchecks <- brms::pp_check(Iba1_Intensity_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Neuronal intensity as a predictor",
       caption = "Model: Intensity ~ 1 + Neurons_Inten") + 
  
  scale_x_continuous(name="\n Microglia intensity (IBA1) ",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
          
      ) + 
    
    legend_none()  

ggsave(plot = Iba1_Intensity_Mdl3_ppchecks, "Plots/Iba1_Intensity_Mdl3_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")
```

We plot the posterior predictive checks

```{r}
#| label: Plot posterior predictive checks for Iba1
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Iba1_Intensity_Mdl1_ppchecks, Iba1_Intensity_Mdl2_ppchecks, Iba1_Intensity_Mdl3_ppchecks, rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe that model three shows a different performance compared to model 1 and 2. We perform model comparison based on WAIC scores to evaluate the out-of-sample accuracy as done for NeuN and GFAP.

#### 2.4.3.2 We compare the models

```{r}
#| label: LOO comparison for Iba1
#| include: true
#| warning: false
#| message: false
#| results: false

w <- loo_compare(Iba1_Intensity_Fit1, Iba1_Intensity_Fit2, Iba1_Intensity_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Microglia_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Iba1_Intensity_Fit1", "Iba1_Intensity_Fit2", "Iba1_Intensity_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
  
  scale_y_continuous (breaks=seq(150,250,20))+
 
  labs(x = NULL, y = NULL,
       title = "Microglia WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1)) +

      coord_flip() 

# Save WAIC graph
ggsave(plot = Microglia_Inteinsity_WAIC, "Plots/Microglia_Inteinsity_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")
```

Similar to GFAP, the neuronal intensity does not improve out-of-sample accuracy. Interestingly, the difference between model 1 and 2 for IBA1 is slightly higher than for GFAP. Nonetheless, the divergence is not substantial to claim that including heteroskedasticity improved model predictions.

#### 2.4.3.3 Plot model diagnostics

We plot the model diagnostics with `bayesplot`

```{r}
#| label: Plot model diagnostics for Iba1 Mdl1
#| include: true
#| warning: false
#| message: false
#| cache: true

parnames(Iba1_Intensity_Fit1)
color_scheme_set("viridis")

Iba1_Intensity_Trace <- mcmc_trace(Iba1_Intensity_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

ggsave(plot = Iba1_Intensity_Trace, "Plots/Iba1_Intensity_Trace.png", 
       width = 40, 
       height = 10, 
       units = "cm")
```

#### 2.4.4.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 5** of the research article.

```{r}
#| label: Print summary for Iba1 intensity Mdl1
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Iba1_Intensity_Fit1)
```

We create a .doc files with the main output:

```{r}
#| label: Save summary for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false

tab_model(Iba1_Intensity_Fit1, show.se = TRUE,
          auto.label = TRUE,
          file="Results/Iba1_Intensity_Fit1.doc")
```

## 2.5 Calculate contrast between time points

Now, we compute the contrast between the time points using the `emmeans` package [@emmeans] on the fitted models (Mdl1). Also, we use the `hypothesis` function from the brms package to obtain the estimates and uncertainty in those contrasts. For this research, we established a region of practical equivalence (ROPE) using the residual standard deviation (sigma) range as equal to null value or no difference. This allows for a more robust evaluation of the changes between time points. The same strategy is used in all the fitted Bayesian models. We calculate the probability of falling within the ROPE using the whole posterior distribution as shown in the following chunk.

### 2.5.1 Contrast for neurons (NeuN)

```{r}
#| label: Calculate contrast for neuronal intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

NeuN_Intensity_Contrast <- NeuN_Intensity_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)


# We obtain the estimates for the hypothesis 0 DPI is minor than 5 DPI
hypothesis(NeuN_Intensity_Fit1, "DPI0D <   DPI5D", class = "b", seed = 8807)

# We obtain the estimates for the hypothesis 15 DPI is minor than 5 DPI
hypothesis(NeuN_Intensity_Fit1, "DPI15D <   DPI5D", class = "b", seed = 8807)

# We obtain the probability of falling within the ROPE for "15D - 5D"
NeuN_hypothesis <- NeuN_Intensity_Contrast %>%
  filter(contrast == "15D - 5D")
sum(NeuN_hypothesis$.value > -7) / 1000


hypothesis(NeuN_Intensity_Fit1, "DPI30D >   DPI15D", class = "b", seed = 8807)
NeuN_hypothesis <- NeuN_Intensity_Contrast %>%
  filter(contrast == "30D - 15D")
sum(NeuN_hypothesis$.value > 7) / 1000 
```

### 2.5.2 Contrast for astrocytes (Gfap)

```{r}
#| label: Calculate contrast for astrocytes intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Gfap_Intensity_Contrast <- Gfap_Intensity_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(Gfap_Intensity_Fit1, "DPI30D >   DPI15D", class = "b", seed = 8807)
Gfap_hypothesis <- Gfap_Intensity_Contrast %>%
  filter(contrast == "30D - 15D")
sum(Gfap_hypothesis$.value > -5) / 1000 


hypothesis(Gfap_Intensity_Fit1, "DPI30D <   DPI0D", class = "b", seed = 8807)
Gfap_hypothesis <- Gfap_Intensity_Contrast %>%
  filter(contrast == "30D - 0D")
sum(Gfap_hypothesis$.value < 5) / 1000
```

### 2.5.3 Contrast for microglia (Iba1)

```{r}
#| label: Calculate contrast for cell intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Iba1_Intensity_Contrast <- Iba1_Intensity_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(Iba1_Intensity_Fit1, "DPI5D >   DPI0D", class = "b", seed = 8807)
Iba1_hypothesis <- Iba1_Intensity_Contrast %>%
  filter(contrast == "5D - 0D")
sum(Iba1_hypothesis$.value < 3) / 1000 

hypothesis(Iba1_Intensity_Fit1, "DPI30D >   DPI0D", class = "b", seed = 8807)
Iba1_hypothesis <- Iba1_Intensity_Contrast %>%
  filter(contrast == "30D - 0D")
sum(Iba1_hypothesis$.value < 3) / 1000
```

## 2.6 Visualize estimates and uncertainty for cell Intensity

Now, we create composited graphs showing estimates and contrast between relevant points. Estimates are shown and stat_halfeye and stat_interval, with 0.5, 0.8, 0.95 predictive intervals (Brewer scale). Relevant contrast display a region of practical equivalence (ROPE) which corresponds to the sigma of the fitted model (Fit1). We perform the same visualization strategy for neirons, astrocytes and microglia.

### 2.6.1 Visualization of NeuN

```{r}
#| label: Create composited graphs for NeuN intensity
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = Cells_Intensity %>%
  data_grid(DPI)

NeuN_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(NeuN_Intensity_Fit1)

NeuN_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(NeuN_Intensity_Fit1)

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

NeuN_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Neurons_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = NeuN_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = NeuN_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Neuronal intensity (NeuN) ",
                     position = "top",
                     limits=c(0, 70), 
                     breaks=seq(0,70,20)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


NeuN_Intensity_Contrast_Sub <- NeuN_Intensity_Contrast[
  (NeuN_Intensity_Contrast$contrast=="30D - 0D"|
  NeuN_Intensity_Contrast$contrast=="30D - 15D"|
   NeuN_Intensity_Contrast$contrast=="15D - 5D" |
   NeuN_Intensity_Contrast$contrast=="5D - 0D"),]

NeuN_Intensity_Contrast_Sub$contrast <- factor(NeuN_Intensity_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
NeuN_Intensity_Contrast_Graph <- NeuN_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 7))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-7, 7), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-30, 30), 
                     breaks=seq(-30,30, 10)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

NeuN_Intensity_Patch <- NeuN_Intensity_Graph +  
                           plot_spacer() + 
                           NeuN_Intensity_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = NeuN_Intensity_Patch, 
       "Plots/NeuN_Intensity_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

### 2.6.2 Visualization of Gfap

```{r}
#| label: Create composited graphs for Gfap intensity
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = Cells_Intensity %>%
  data_grid(DPI)

Gfap_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(Gfap_Intensity_Fit1)

Gfap_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(Gfap_Intensity_Fit1)

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Gfap_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Astrocytes_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Gfap_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = Gfap_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Astrocytes intensity (Gfap) ",
                     position = "top",
                     limits=c(0, 50), 
                     breaks=seq(0,50,10)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


Gfap_Intensity_Contrast_Sub <- Gfap_Intensity_Contrast[
  (Gfap_Intensity_Contrast$contrast=="30D - 0D"|
  Gfap_Intensity_Contrast$contrast=="30D - 15D"|
   Gfap_Intensity_Contrast$contrast=="15D - 5D" |
   Gfap_Intensity_Contrast$contrast=="5D - 0D"),]

Gfap_Intensity_Contrast_Sub$contrast <- factor(Gfap_Intensity_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
Gfap_Intensity_Contrast_Graph <- Gfap_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 5))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-5, 5), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-20, 40), 
                     breaks=seq(-20,40, 10)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Gfap_Intensity_Patch <- Gfap_Intensity_Graph +  
                           plot_spacer() + 
                           Gfap_Intensity_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = Gfap_Intensity_Patch, 
       "Plots/Gfap_Intensity_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

### 2.6.3 Visualization of Iba1

```{r}
#| label: Create composited graphs for Iba1 intensity
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = Cells_Intensity %>%
  data_grid(DPI)

Iba1_Intensity_Means = Intensity_Grid %>%
  add_epred_draws(Iba1_Intensity_Fit1)

Iba1_Intensity_Preds = Intensity_Grid %>%
  add_predicted_draws(Iba1_Intensity_Fit1)

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

Cells_Intensity <- Cells_Intensity %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Iba1_Intensity_Graph <- Cells_Intensity %>%
  ggplot(aes(x = Microglia_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Iba1_Intensity_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = Iba1_Intensity_Preds) +
  
  geom_point(data = Cells_Intensity) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Microglia intensity (Iba1) ",
                     position = "top",
                     limits=c(0, 50), 
                     breaks=seq(0,50,10)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


Iba1_Intensity_Contrast_Sub <- Iba1_Intensity_Contrast[
  (Iba1_Intensity_Contrast$contrast=="30D - 0D"|
  Iba1_Intensity_Contrast$contrast=="30D - 15D"|
   Iba1_Intensity_Contrast$contrast=="15D - 5D" |
   Iba1_Intensity_Contrast$contrast=="5D - 0D"),]

Iba1_Intensity_Contrast_Sub$contrast <- factor(Iba1_Intensity_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
Iba1_Intensity_Contrast_Graph <- Iba1_Intensity_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 3))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-50, 50), 
                     breaks=seq(-50,50, 20)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Iba1_Intensity_Patch <- Iba1_Intensity_Graph +  
                           plot_spacer() + 
                           Iba1_Intensity_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = Iba1_Intensity_Patch, 
       "Plots/Iba1_Intensity_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

And we plot the intensity graphs

```{r}
#| label: Plot composite graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Patch, Gfap_Intensity_Patch, Iba1_Intensity_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 2.6 Visualize cell Intensity

To visualize the density kernels the spatial intensity was calculated from, we load the hyperframe generated in section 1 of the present notebook.We assign `PointPatterns_5x` to this object.

### 2.6.1 Load Point patterns

```{r}
#| label: Load 5x hyperframe
#| include: true
#| warning: false
#| message: false

PointPatterns_5x <- readRDS("Hyperframes/PointPatterns_5x.rds")
```

### 2.6.2 Plot density kernels for NeuN

We use the following chuck to plot individually the point patterns specified in the bayesian estimates graphs.

```{r}
#| label: Plot density kernels for neurons
#| include: true
#| warning: false
#| message: false


Neurons_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

par(mfrow = c(1,4), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 43, 0 DPI
png("Plots/Neurons_Intensuty_0D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Dens$`130`, col = Neurons_Colmap, main = "", ribbon = FALSE)  
dev.off()

# Mouse 33, 5 DPI
png("Plots/Neurons_Intensuty_5D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Dens$`121`, col = Neurons_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 04, 15 DPI
png("Plots/Neurons_Intensuty_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Dens$`13`, col = Neurons_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 05, 30 DPI
png("Plots/Neurons_Intensuty_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Dens$`14`, col = Neurons_Colmap, main = "", ribbon = FALSE) 
dev.off()

```

### 2.6.3 Plot density kernels for Gfap

We use the following chuck to plot individually the point patterns specify in the graph.

```{r}
#| label: Plot density kernels for astrocytes
#| include: true
#| warning: false
#| message: false


Astrocytes_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

# Mouse 43, 0 DPI
png("Plots/Astrocytes_Intensity_0D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`130`, col = Astrocytes_Colmap, main = "", ribbon = FALSE)  
dev.off()

# Mouse 33, 5 DPI
png("Plots/Astrocytes_Intensity_5D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`121`, col = Astrocytes_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 04, 15 DPI
png("Plots/Astrocytes_Intensity_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`13`, col = Astrocytes_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 05, 30 DPI
png("Plots/Astrocytes_Intensity_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`14`, col = Astrocytes_Colmap, main = "", ribbon = FALSE) 
dev.off()


plot(PointPatterns_5x$Astrocytes_Dens$`14`, col = Astrocytes_Colmap)


```

### 2.6.4 Plot density kernels for Iba1

We use the following chuck to plot individually the point patterns specify in the graph.

```{r}
#| label: Plot density kernels for Iba1
#| include: true
#| warning: false
#| message: false


Microglia_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

# Mouse 43, 0 DPI
png("Plots/Microglia_Intensity_0D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`130`, col = Microglia_Colmap, main = "", ribbon = FALSE)  
dev.off()

# Mouse 33, 5 DPI
png("Plots/Microglia_Intensity_5D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`121`, col = Microglia_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 04, 15 DPI
png("Plots/Microglia_Intensity_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`13`, col = Microglia_Colmap, main = "", ribbon = FALSE) 
dev.off()

# Mouse 05, 30 DPI
png("Plots/Microglia_Intensity_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`14`, col = Microglia_Colmap, main = "", ribbon = FALSE) 
dev.off()


```

# 3. Analysis of cell ratio (ipsilateral/contralateral)

We used QuPath [@bankhead2017] to quantify the cell number in different brain regions (cortex \[CTX\], cerebral nuclei \[CNU\], midbrin \[MB\], interbrain \[IB\], and fiber tracts) according to the [Allen Reference Atlases](https://atlas.brain-map.org/). Here, we manipulate the data to obtain the total cell ratio (ipsilateral/contralateral) and cell ratios by cerebral regions. The results are shown in supplementary figure 3.

## 3.1 Load the experimental data

We load the **QuPath-generated annotations file** containing cell detection in different brain regions.

```{r}
#| label: Load data tables
#| include: true
#| warning: false
#| message: false

set.seed(88071)

# 1) Load Qupath-generated annotations file
NeuN_Raw <- read.csv(file = 'DataTables/NeuN_Summary.csv', header = TRUE)
Gfap_Raw <- read.csv(file = 'DataTables/Gfap_Summary.csv', header = TRUE)
Iba1_Raw <- read.csv(file = 'DataTables/Iba1_Summary.csv', header = TRUE)

```

## 3.2 Manipulate the data tables

We subset the tables to obtain solely the number of cells. We perform a comparable procedure for NeuN, Iba1 and Gfap-positive cells.

```{r}
#| label: Subset relevant columns for cell ratio
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells dataset

## We subset the relevant columns
NeuN <- subset(NeuN_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
NeuN <- cbind(NeuN  , do.call(rbind , strsplit(NeuN$Image , "[_\\.]"))[,3:5])
colnames(NeuN) <- c( colnames(NeuN[1:3]), paste0("Name" , 1:3))
NeuN <- cbind(NeuN[c(-2,-3)] , NeuN[c(2,3)])

## We rename the columns
colnames(NeuN) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
NeuN <- subset(NeuN, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
NeuN$Region <- factor(NeuN$Region)
NeuN$DPI <- factor(NeuN$DPI, levels = c("0D", "5D", "15D", "30D"))
NeuN$Section <- factor(NeuN$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Gfap-positive cells dataset

## We subset the relevant columns
Gfap <- subset(Gfap_Raw, select = c(Image, Class, Num.Detections))

## Extract metadata from the image name to generate required factors for data analysis
Gfap <- cbind(Gfap  , do.call(rbind , strsplit(Gfap$Image , "[_\\.]"))[,3:5])
colnames(Gfap) <- c( colnames(Gfap[1:3]), paste0("Name" , 1:3))
Gfap <- cbind(Gfap[c(-2,-3)] , Gfap[c(2,3)])

## We rename the columns
colnames(Gfap) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Gfap <- subset(Gfap, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Gfap$Region <- factor(Gfap$Region)
Gfap$DPI <- factor(Gfap$DPI, levels = c("0D", "5D", "15D", "30D"))
Gfap$Section <- factor(Gfap$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Iba1-positive cells dataset

## We subset the relevant columns
Iba1 <- subset(Iba1_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
Iba1 <- cbind(Iba1  , do.call(rbind , strsplit(Iba1$Image , "[_\\.]"))[,3:5])
colnames(Iba1) <- c( colnames(Iba1[1:3]), paste0("Name" , 1:3))
Iba1 <- cbind(Iba1[c(-2,-3)] , Iba1[c(2,3)])

## We rename the columns
colnames(Iba1) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Iba1 <- subset(Iba1, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Iba1$Region <- factor(Iba1$Region)
Iba1$DPI <- factor(Iba1$DPI, levels = c("0D", "5D", "15D", "30D"))
Iba1$Section <- factor(Iba1$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))
```

We print the head of one of the tables to verify the result:

```{r}
#| label: Print Iba1 cell ratios table
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Iba1)
```

Now, we summarize the data by hemispheres (ipsilateral and contralateral) to calculate cell ratios. We transform long format data tables into wide format.

```{r}
#| label: Transform to wide format for cell ratios
#| include: true
#| warning: false
#| message: false

NeuN_Wide <- reshape2::dcast(NeuN, MouseId + DPI ~ Section + Region, value.var="Cells")
Gfap_Wide <- reshape2::dcast(Gfap, MouseId + DPI ~ Section + Region, value.var="Cells")
Iba1_Wide <- reshape2::dcast(Iba1, MouseId + DPI ~ Section + Region, value.var="Cells")

```

We print one of the results to verify the transformation:

```{r}
#| label: Print Gfap table for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Gfap_Wide, c(10, 5))
```

Next, we summarize the information by brain sections as shown in **supplementary table 1** and calculate the respective cell ratios

```{r}
#| label: Summary by section for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(NeuN_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(NeuN_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(NeuN_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(NeuN_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(NeuN_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(NeuN_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(NeuN_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(NeuN_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(NeuN_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(NeuN_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(NeuN_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(NeuN_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(NeuN_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Calculation of cells ratios per brain sections (ipsilateral/Contralateral)

NeuN_Wide$S1_diff <- NeuN_Wide$Scene1_Left_Sum / NeuN_Wide$Scene1_Right_Sum
NeuN_Wide$S2_diff <- NeuN_Wide$Scene2_Left_Sum / NeuN_Wide$Scene2_Right_Sum
NeuN_Wide$S3_diff <- NeuN_Wide$Scene3_Left_Sum / NeuN_Wide$Scene3_Right_Sum
NeuN_Wide$S4_diff <- NeuN_Wide$Scene4_Left_Sum / NeuN_Wide$Scene4_Right_Sum
NeuN_Wide$S5_diff <- NeuN_Wide$Scene5_Left_Sum / NeuN_Wide$Scene5_Right_Sum
NeuN_Wide$S6_diff <- NeuN_Wide$Scene6_Left_Sum / NeuN_Wide$Scene6_Right_Sum
NeuN_Wide$S7_diff <- NeuN_Wide$Scene7_Left_Sum / NeuN_Wide$Scene7_Right_Sum


# For Gfap-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Gfap_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Gfap_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Gfap_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Gfap_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Gfap_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Gfap_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Gfap_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Gfap_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Gfap_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Gfap_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Gfap_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Gfap_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Gfap_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$S1_diff <- Gfap_Wide$Scene1_Left_Sum / Gfap_Wide$Scene1_Right_Sum
Gfap_Wide$S2_diff <- Gfap_Wide$Scene2_Left_Sum / Gfap_Wide$Scene2_Right_Sum
Gfap_Wide$S3_diff <- Gfap_Wide$Scene3_Left_Sum / Gfap_Wide$Scene3_Right_Sum
Gfap_Wide$S4_diff <- Gfap_Wide$Scene4_Left_Sum / Gfap_Wide$Scene4_Right_Sum
Gfap_Wide$S5_diff <- Gfap_Wide$Scene5_Left_Sum / Gfap_Wide$Scene5_Right_Sum
Gfap_Wide$S6_diff <- Gfap_Wide$Scene6_Left_Sum / Gfap_Wide$Scene6_Right_Sum
Gfap_Wide$S7_diff <- Gfap_Wide$Scene7_Left_Sum / Gfap_Wide$Scene7_Right_Sum


# For Iba1-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Iba1_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Iba1_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Iba1_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Iba1_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Iba1_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Iba1_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Iba1_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Iba1_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Iba1_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Iba1_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Iba1_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Iba1_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Iba1_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$S1_diff <- Iba1_Wide$Scene1_Left_Sum / Iba1_Wide$Scene1_Right_Sum
Iba1_Wide$S2_diff <- Iba1_Wide$Scene2_Left_Sum / Iba1_Wide$Scene2_Right_Sum
Iba1_Wide$S3_diff <- Iba1_Wide$Scene3_Left_Sum / Iba1_Wide$Scene3_Right_Sum
Iba1_Wide$S4_diff <- Iba1_Wide$Scene4_Left_Sum / Iba1_Wide$Scene4_Right_Sum
Iba1_Wide$S5_diff <- Iba1_Wide$Scene5_Left_Sum / Iba1_Wide$Scene5_Right_Sum
Iba1_Wide$S6_diff <- Iba1_Wide$Scene6_Left_Sum / Iba1_Wide$Scene6_Right_Sum
Iba1_Wide$S7_diff <- Iba1_Wide$Scene7_Left_Sum / Iba1_Wide$Scene7_Right_Sum
```

Next, we summarize the data by brain region and calculate the respective cell ratio

```{r}
#| label: Summary by region for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(NeuN_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(NeuN_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(NeuN_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(NeuN_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(NeuN_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(NeuN_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(NeuN_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(NeuN_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(NeuN_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for NeuN-positive cells
NeuN_Wide$CTX_diff <- NeuN_Wide$Sum_Left_CTX / NeuN_Wide$Sum_Right_CTX
NeuN_Wide$CNU_diff <- NeuN_Wide$Sum_Left_CNU / NeuN_Wide$Sum_Right_CNU
NeuN_Wide$Fiber_diff <- NeuN_Wide$Sum_Left_Fiber / NeuN_Wide$Sum_Right_Fiber
NeuN_Wide$IB_diff <- NeuN_Wide$Sum_Left_IB / NeuN_Wide$Sum_Right_IB
NeuN_Wide$MB_diff <- NeuN_Wide$Sum_Left_MB / NeuN_Wide$Sum_Right_MB


# For Gfap-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Gfap_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Gfap_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Gfap_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Gfap_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Gfap_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Gfap_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Gfap_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Gfap_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Gfap_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$CTX_diff <- Gfap_Wide$Sum_Left_CTX / Gfap_Wide$Sum_Right_CTX
Gfap_Wide$CNU_diff <- Gfap_Wide$Sum_Left_CNU / Gfap_Wide$Sum_Right_CNU
Gfap_Wide$Fiber_diff <- Gfap_Wide$Sum_Left_Fiber / Gfap_Wide$Sum_Right_Fiber
Gfap_Wide$IB_diff <- Gfap_Wide$Sum_Left_IB / Gfap_Wide$Sum_Right_IB
Gfap_Wide$MB_diff <- Gfap_Wide$Sum_Left_MB / Gfap_Wide$Sum_Right_MB


# For Iba1-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Iba1_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Iba1_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Iba1_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Iba1_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Iba1_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Iba1_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Iba1_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Iba1_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Iba1_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$CTX_diff <- Iba1_Wide$Sum_Left_CTX / Iba1_Wide$Sum_Right_CTX
Iba1_Wide$CNU_diff <- Iba1_Wide$Sum_Left_CNU / Iba1_Wide$Sum_Right_CNU
Iba1_Wide$Fiber_diff <- Iba1_Wide$Sum_Left_Fiber / Iba1_Wide$Sum_Right_Fiber
Iba1_Wide$IB_diff <- Iba1_Wide$Sum_Left_IB / Iba1_Wide$Sum_Right_IB
Iba1_Wide$MB_diff <- Iba1_Wide$Sum_Left_MB / Iba1_Wide$Sum_Right_MB
```

Finally, we subset the data sets to calculate an hemispheric ratio. In particular, as fiber tracts in the NeuN-positive cells data set are likely a result of small deviations in brain alignment due to brain shrinkage or deformation, we eliminated this region for this cell type.

```{r}

# For NeuN-positive cells

## Eliminate 'fiber tracts' form the data set
NeuN_Wide_Clean <- NeuN_Wide %>% dplyr::select(-contains(c('fiber tracts')))

## Subset and generate summary by hemisphere
NeuN_Regions <- subset(NeuN_Wide_Clean, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff))

## Add column for hemispheric differences
NeuN_Regions$NeuN_Ratio <- rowMeans(NeuN_Regions[,c(3:6)], na.rm = TRUE)


# For Gfap-positive cells

## Subset and generate summary by hemisphere
Gfap_Regions <- subset(Gfap_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Gfap_Regions$Gfap_Ratio <- rowMeans(Gfap_Regions[,c(3:6)], na.rm = TRUE)


# For Iba1-positive cells

## Subset and generate summary by hemisphere
Iba1_Regions <- subset(Iba1_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Iba1_Regions$Iba1_Ratio <- rowMeans(Iba1_Regions[,c(3:6)], na.rm = TRUE)
```

## 3.3 Plot total cell ratios

### 3.3.1 Total cell ratios for NeuN

We plot the data to perform a preliminary exploration. First, we create ggplot graph objects to plot the data by hemispheres using Ridges plots. We save the objects in the indicated folder using `ggsave`. We perform the same procedure for GFAP and IBA1+ cells.

```{r}
#| label: Create figures for neurons ratio
#| include: true
#| warning: false
#| message: false


NeuN_Hemispheres_Ridges <- ggplot(NeuN_Regions, aes(x = NeuN_Ratio, y = DPI, group = DPI)) +  
                                                                                      geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n NeuN+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.2)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = NeuN_Hemispheres_Ridges, "Plots/NeuN_Hemispheres_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")

```

### 3.3.2 Total cell ratios for GFAP

```{r}
#| label: Create figures for astrocytes ratio
#| include: true
#| warning: false
#| message: false


Gfap_Hemispheres_Ridges <- ggplot(Gfap_Regions, 
                               aes(x = Gfap_Ratio, 
                                   y = DPI, 
                                   group = DPI)) +  
                                                                                          
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.5, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Gfap+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 7), 
                     breaks=seq(0,7,1)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Gfap_Hemispheres_Ridges, "Plots/Gfap_Hemispheres_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")

```

### 3.3.2 Total cell ratios for IBA1

```{r}
#| label: Create figures for microglia ratio
#| include: true
#| warning: false
#| message: false


Iba1_Hemispheres_Ridges <- ggplot(Iba1_Regions, aes(x = Iba1_Ratio, y = DPI, group = DPI)) + 
                                                                   
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Iba1+ reactive cells (Ipsilateral / Contralateral) ",
                     limits=c(-2, 15), 
                     breaks=seq(0,15,2)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Iba1_Hemispheres_Ridges, "Plots/Iba1_Hemispheres_Ridges.png", 
       width = 16, 
       height = 12, 
       units = "cm")
```

Next, we plot the objects

```{r}
#| label: plot figures for total cell ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Hemispheres_Ridges, Gfap_Hemispheres_Ridges, Iba1_Hemispheres_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 3.4 Cell ratios by brain regions

We can also plot the data considering each brain region. As done previously, we first generate and save the figures.

### 3.4.1 Cell rations for NeuN

```{r}
#| label: Create figure for neurons ratio per region
#| include: true
#| warning: false
#| message: false

NeuN_Regions_Long <- subset(NeuN_Regions, select = -c(NeuN_Ratio))
  
NeuN_Regions_Long <-  melt(NeuN_Regions_Long, id.vars = c("MouseId", "DPI"))

names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'variable'] <- 'Region'
names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'value'] <- 'Ratio'


NeuN_Regions_Long$Region <- factor(NeuN_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff"))


NeuN_Regions_Long_sumrepdat <- summarySE(NeuN_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

NeuN_Regions_Rain <- ggplot(NeuN_Regions_Long, 
                               aes(x = Ratio, 
                                   y = DPI,
                                   Group = DPI,
                                   fill = Region)) +
  
    geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  

  scale_x_continuous(name="\n NeuN+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 2), 
                     breaks=seq(0,2,0.5)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
   legend.position=c(0.85, 0.5),
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=10),
      legend.text = element_text(colour="black", size=10)
  )  

ggsave("Plots/NeuN_Regions_Rain.png", width = 13, height = 10, units = "cm")

```

### 3.4.2 Cell rations for GFAP

```{r}
#| label: Create figure for astrocytes ratio per region
#| include: true
#| warning: false
#| message: false

Gfap_Regions_Long <- subset(Gfap_Regions, select = -c(Gfap_Ratio))
  
Gfap_Regions_Long <-  melt(Gfap_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'variable'] <- 'Region'
names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'value'] <- 'Ratio'


Gfap_Regions_Long$Region <- factor(Gfap_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Gfap_Regions_Long_sumrepdat <- summarySE(Gfap_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

Gfap_Regions_Rain <- ggplot(Gfap_Regions_Long, 
                               aes(x = Ratio, 
                                   y = DPI,
                                   Group = DPI,
                                   fill = Region)) +
  
    geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  

  scale_x_continuous(name="\n GFAP+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 10), 
                     breaks=seq(0,10,2)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position=c(0.85, 0.5),
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=10),
      legend.text = element_text(colour="black", size=10)
  )  

ggsave("Plots/Gfap_Regions_Rain.png", width = 13, height = 10, units = "cm")

```

### 3.4.3 Cell rations for IBA1

```{r}
#| label: Create figure for microglia ratio per region
#| include: true
#| warning: false
#| message: false


Iba1_Regions_Long <- subset(Iba1_Regions, select = -c(Iba1_Ratio))
  
Iba1_Regions_Long <-  melt(Iba1_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'variable'] <- 'Region'
names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'value'] <- 'Ratio'


Iba1_Regions_Long$Region <- factor(Iba1_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Iba1_Regions_Long_sumrepdat <- summarySE(Iba1_Regions_Long, measurevar = "Ratio",
                                       groupvars=c("DPI", "Region"))

Iba1_Regions_Rain <- ggplot(Iba1_Regions_Long, 
                               aes(x = Ratio, 
                                   y = DPI,
                                   Group = DPI,
                                   fill = Region)) +
  
    geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  

  scale_x_continuous(name="\n IBA1+ cells (Ipsilateral / Contralateral) ",
                     limits=c(0, 20), 
                     breaks=seq(0,20,3)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                     labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
   legend.position=c(0.85, 0.5),
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=10),
      legend.text = element_text(colour="black", size=10)
  )  
  
ggsave("Plots/Iba1_Regions_Rain.png", width = 13, height = 10, units = "cm")

```

We plot the figures:

```{r}
#| label: plot by brain region
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


ggarrange(NeuN_Regions_Rain, Gfap_Regions_Rain, Iba1_Regions_Rain + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)

```

## 3.5 Bayesian modeling of cell ratios

Now we fir bayesian models using the `brms` package [@bürkner2017; @bürkner2018; @brms]. We fitted the single predictor model fitted for intensity in the previous chapter. Likewise, given the expected heterogeneity in the data due to variations in infarct size and neurological recovery, all the models were fitted with a student distribution (robust regression) to reduce the impact of extreme data. Also, we limit the exploration of the parameter space by the Markov chain Monte Carlo algorithm using user-defined weak informative priors, considering the current knowledge of neuronal loss and glial reactivity following cerebral ischemia.

### 3.5.1 Modeling for neuronal cell ratios

We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. To reduce computation time during subsequent code executions, we employed the argument `file` to generate an .rds containing the model. If refitting is required, erase the .rds file and erase `file_refit` line. Following model fitting, we used the `add_criterion` function to incorporate Leave-one-out cross-validation (LOO) and WAIC if model comparison is needed. The same considerations apply for astrocytes and microglia.

```{r}
#| label: Modeling for neuronal cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
NeuN_Ratio_Mdl1 <- bf(NeuN_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior).
NeuN_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 0.3), class = b, coef = DPI0D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI5D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI15D),
                      prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI30D))

# Fit model 1
NeuN_Ratio_Fit1 <- brm(data = NeuN_Regions,
                          family = student,
                          formula = NeuN_Ratio_Mdl1,
                          prior = NeuN_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/NeuN_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
NeuN_Ratio_Fit1 <- add_criterion(NeuN_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

### 3.5.2 Modeling for astrocytes cell ratios

```{r}
#| label: Modeling for astrocyte cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
Gfap_Ratio_Mdl1 <- bf(Gfap_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models  
Gfap_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 2), class = b, coef = DPI0D),
                      prior(student_t(3, 3, 2), class = b, coef =  DPI5D),
                      prior(student_t(3, 3, 2), class = b, coef =  DPI15D),
                      prior(student_t(3, 3, 2), class = b, coef =  DPI30D))

# Fit model 1
Gfap_Ratio_Fit1 <- brm(data = Gfap_Regions,
                          family = student,
                          formula = Gfap_Ratio_Mdl1,
                          prior = Gfap_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Gfap_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Gfap_Ratio_Fit1 <- add_criterion(Gfap_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

### 3.5.3 Modeling for Microglia cell ratios

```{r}
#| label: Modeling for microglia cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
Iba1_Ratio_Mdl1 <- bf(Iba1_Ratio ~ 0 + DPI) 
                                                   
## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models 
Iba1_Ratio_Mdl1_Prior <- c(
                      prior(student_t(3, 1, 2), class = b, coef = DPI0D),
                      prior(student_t(3, 5, 2), class = b, coef =  DPI5D),
                      prior(student_t(3, 5, 2), class = b, coef =  DPI15D),
                      prior(student_t(3, 5, 2), class = b, coef =  DPI30D))
# Fit model 1
Iba1_Ratio_Fit1 <- brm(data = Iba1_Regions,
                          family = student,
                          formula = Iba1_Ratio_Mdl1,
                          prior = Iba1_Ratio_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellRatio/Iba1_CellRatio_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Iba1_Ratio_Fit1 <- add_criterion(Iba1_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

## 3.6 Model analysis and summary

### 3.6.1 For NeuN

#### 3.6.1.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for neurons ratio (NeuN)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
NeuN_Ratio_Mdl1_ppchecks <- brms::pp_check(NeuN_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Neuronal ratio (ipsilateral/contralateral) ",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.3)) +
  
  scale_y_continuous(limits=c(0, 4), 
                     breaks=seq(0,4,1)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = NeuN_Ratio_Mdl1_ppchecks, "Plots/NeuN_Ratio_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

```

#### 3.6.1.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for neuronal ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(NeuN_Ratio_Fit1)
color_scheme_set("viridis")

NeuN_Ratio_Trace <- mcmc_trace(NeuN_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

NeuN_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.1.3 Model summary

```{r}
#| label: Print model summary for neuronal ratios 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuN_Ratio_Fit1)
```

### 3.6.2 For Gfap

#### 3.6.2.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for astrocytes ratio (Gfap)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Gfap_Ratio_Mdl1_ppchecks <- brms::pp_check(Gfap_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Astrocytes ratio (ipsilateral/contralateral) ",
                     limits=c(0, 6), 
                     breaks=seq(0,6,2)) +
  
  scale_y_continuous(limits=c(0, 0.8), 
                     breaks=seq(0,0.8,0.2)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Gfap_Ratio_Mdl1_ppchecks, "Plots/Gfap_Ratio_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

```

#### 3.6.2.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for astrocytes ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Gfap_Ratio_Fit1)
color_scheme_set("viridis")

Gfap_Ratio_Trace <- mcmc_trace(Gfap_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

Gfap_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.2.3 Model summary

```{r}
#| label: Print model summary for astrocytes ratio 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Gfap_Ratio_Fit1)
```

### 3.6.3 For Iba1

#### 3.6.3.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for Microglia (Iba1)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Iba1_Ratio_Mdl1_ppchecks <- brms::pp_check(Iba1_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="\n Microglia ratio (ipsilateral/contralateral) ",
                     limits=c(-2, 20), 
                     breaks=seq(0,20,4)) +
  
  scale_y_continuous(limits=c(0, 0.20), 
                     breaks=seq(0,0.20,0.03)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Iba1_Ratio_Mdl1_ppchecks, "Plots/Iba1_Ratio_Mdl1_ppchecks.png", 
       width = 12, 
       height = 12, 
       units = "cm")

```

#### 3.6.3.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for Microglia ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Iba1_Ratio_Fit1)
color_scheme_set("viridis")

Iba1_Ratio_Trace <- mcmc_trace(Iba1_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

Iba1_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.3.3 Model summary

```{r}
#| label: Print model summary for Microglia ratio 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Iba1_Ratio_Fit1)
```

### 3.6.4 Plot posterior predictive checks

We plot the posterior predictive checks using the `pp_check` function to verify predictions considering the actual data.

```{r}
#| label: plot posterior predictive checks for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

color_scheme_set("darkgray")

pp_check(NeuN_Ratio_Fit1, type = "dens_overlay")
pp_check(Gfap_Ratio_Fit1, type = "dens_overlay")
pp_check(Iba1_Ratio_Fit1, type = "dens_overlay")
```

The results show no severe deviations from the observed data. However, the predictions vary considerable due to the wide uncertainty in cell rations and the broad difference between the control group and the ischemia time points. However, including sigma (Heteroscedasticity) does not modify the main readout, altough it provides more precise estimates.

## 3.7 Calculate contrast between DPI

We compute the contrast between the estimates of different time points for each cell type using the `emmeans` package [@emmeans]. Please not tht this output is only useful for plotting purposes. The estimated diferences between time points of interest are estimated using the `hyphotesis` function in the next segment.

```{r}
#| label: Calculate cell ratios contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For NeuN cell ratios
NeuN_Ratio_Contrast <- NeuN_Ratio_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Gfap cell ratios
Gfap_Ratio_Contrast <- Gfap_Ratio_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)

# For Iba1 cell ratios
Iba1_Ratio_Contrast <- Iba1_Ratio_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(100)
```

## 3.8 Visualize estimates and uncertainty for cell ratios

### 3.8.1 Plot estimates and uncertainty per DPI

#### 3.8.1.1 For Neurons

We generate graphs as done previously for intensity estimations.

```{r}
#| label: Create composited graphs for neuronal ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

NeuN_Ratio_Grid = NeuN_Regions %>%
  data_grid(DPI)

NeuN_Ratio_Means = NeuN_Ratio_Grid %>%
  add_epred_draws(NeuN_Ratio_Fit1)

NeuN_Ratio_Preds = NeuN_Ratio_Grid %>%
  add_predicted_draws(NeuN_Ratio_Fit1)

NeuN_Ratio_Graph <- NeuN_Regions %>%
  ggplot(aes(x = NeuN_Ratio, y = DPI)) +
    stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = NeuN_Ratio_Means) +
  
  stat_pointinterval (aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = NeuN_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = NeuN_Ratio_Preds) +
  geom_point(data = NeuN_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="Neurons ratio (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.2)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

NeuN_Ratio_Contrast_Sub <- NeuN_Ratio_Contrast[(NeuN_Ratio_Contrast$contrast=="30D - 15D" | 
                                       NeuN_Ratio_Contrast$contrast=="15D - 5D" | 
                                       NeuN_Ratio_Contrast$contrast=="5D - 0D" ),]

NeuN_Ratio_Contrast_Sub$contrast <- factor(NeuN_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
NeuN_Ratio_Contrast_Fig1 <- NeuN_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.11))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.11, 0.11), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-0.8, 0.8), 
                     breaks=seq(-0.8,0.8,0.2)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

NeuN_Ratio_Patch <- NeuN_Ratio_Graph + plot_spacer() + NeuN_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))
  
ggsave(plot = NeuN_Ratio_Patch, "Plots/NeuN_Ratio_Patch.png", width = 15, height = 12, units = "cm")

```

#### 3.8.1.2 For Astrocytes

```{r}
#| label: Create composited graphs for astrocyte ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Gfap_Ratio_Grid = Gfap_Regions %>%
  data_grid(DPI)

Gfap_Ratio_Means = Gfap_Ratio_Grid %>%
  add_epred_draws(Gfap_Ratio_Fit1)

Gfap_Ratio_Preds = Gfap_Ratio_Grid %>%
  add_predicted_draws(Gfap_Ratio_Fit1)

Gfap_Ratio_Graph <- Gfap_Regions %>%
  ggplot(aes(x = Gfap_Ratio, y = DPI)) +
      stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Gfap_Ratio_Means) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Gfap_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Gfap_Ratio_Preds) +
  geom_point(data = Gfap_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="Astrocytes ratio (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 7), 
                     breaks=seq(0,7,1)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

Gfap_Ratio_Contrast_Sub <- Gfap_Ratio_Contrast[(Gfap_Ratio_Contrast$contrast=="30D - 15D" | 
                                       Gfap_Ratio_Contrast$contrast=="15D - 5D" | 
                                       Gfap_Ratio_Contrast$contrast=="5D - 0D" ),]

Gfap_Ratio_Contrast_Sub$contrast <- factor(Gfap_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Gfap_Ratio_Contrast_Fig1 <- Gfap_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.46))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.46, 0.46), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-2, 4), 
                     breaks=seq(-2,4,1)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Gfap_Ratio_Patch <- Gfap_Ratio_Graph + plot_spacer() + Gfap_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))
  
ggsave(plot = Gfap_Ratio_Patch, "Plots/Gfap_Ratio_Patch.png", width = 15, height = 12, units = "cm")

```

#### 3.8.1.3 For Microglia

```{r}
#| label: Create composited graphs for microglia ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Iba1_Ratio_Grid = Iba1_Regions %>%
  data_grid(DPI)

Iba1_Ratio_Means = Iba1_Ratio_Grid %>%
  add_epred_draws(Iba1_Ratio_Fit1)

Iba1_Ratio_Preds = Iba1_Ratio_Grid %>%
  add_predicted_draws(Iba1_Ratio_Fit1)

Iba1_Ratio_Graph <- Iba1_Regions %>%
  ggplot(aes(x = Iba1_Ratio, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Iba1_Ratio_Means) +
   stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Iba1_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Iba1_Ratio_Preds) +
  geom_point(data = Iba1_Regions) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="Microglia ratio (Ipsilateral / Contralateral) \n",
                     position = "top",
                     limits=c(0, 20), 
                     breaks=seq(0,20,2)) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -3.5, vjust = -0.4) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 

Iba1_Ratio_Contrast_Sub <- Iba1_Ratio_Contrast[(Iba1_Ratio_Contrast$contrast=="30D - 15D" | 
                                       Iba1_Ratio_Contrast$contrast=="15D - 5D" | 
                                       Iba1_Ratio_Contrast$contrast=="5D - 0D" ),]

Iba1_Ratio_Contrast_Sub$contrast <- factor(Iba1_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 
              
             
Iba1_Ratio_Contrast_Fig1 <- Iba1_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 2.24))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-2.24, 2.24), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="\n DPI difference",
                     limits=c(-10, 10), 
                     breaks=seq(-10,10,2)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Iba1_Ratio_Patch <- Iba1_Ratio_Graph + plot_spacer() + Iba1_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))
  
ggsave(plot = Iba1_Ratio_Patch, "Plots/Iba1_Ratio_Patch.png", width = 15, height = 12, units = "cm")

```

We plot the graphs

```{r}
#| label: Plot composited graphs for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Ratio_Patch, Gfap_Ratio_Patch, Iba1_Ratio_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

# 4. Point process models (ppm) for cell covariance

Here, we use the `mppm` function of spatstat [@spatstat-3] to fit a common point process model in multiple (replicated) point patterns as contained in our hyperframe. The `mppm` function is analogous to common fitting approaches like lm or glm for linear models and generalized linear models, respectively. For `ppm` and `mppm` in `spatstat`, the left hand side of the formula must comprise the point pattern and the right hand side the form of the logarithm of the intensity function to predict the point pattern.In this sense, please be aware that these approach comprises **loglinear models**. This functions allows to predict the spatial intensity based on predictors or covariants.

## 4.1 Subset the point patterns

We set the DPI factor levels and subset the hyperframe per DPI in order to perform exploratory data analysis. We will use the `rhohat` function from `spatstat` to compute a nonparametric estimate of the point pattern intensity as a function of a covariate.

```{r}
#| label: Subset 5x points patterns
#| include: true
#| warning: false
#| message: false

# We order the DPI factor
PointPatterns_5x$DPI <- factor(PointPatterns_5x$DPI, levels = c("0D", "5D", "15D", "30D"))

# We subset the data frame
PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10)
PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10)
```

## 4.2 Astroytes/neurons relative distribution and covariance

Here we pass the `rhohat` function to each of the point patterns (per DPI), with the density kernel of the neuronal intensity (Neurons_Dens) as a covariant. We explicit set `do.CI = FALSE` to avoid the calculation of confidence intervals (CI). CIs are calculated within the `pool` function to obtain estimates per time point. We perform the same procedure for astrocytes/neurons covariance and microglia/neurons covariance. We plot the resulting functions using the R-base graph system.

**Please note** that the plot limits are constrained by the calculated function. In other cases, we modified the plot limits to enhance visualization of the function. Please consult `Available range of argument Neurons_Dens` line in each object to see plotting limits and comment the `ylim` line to obtain the default plot.

```{r}
#| label: Astrocytes/neurons rhohat
#| include: true
#| warning: false
#| message: false

Astrocytes_Neurons_0D_Rhohat <- with(PointPatterns_5x_0D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_0D_Rhohat_fig <- pool(Astrocytes_Neurons_0D_Rhohat)

png("Plots/Astrocytes_Neurons_0D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_0D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     #ylim = c(0, 100),
     ylab = "p(Astrocytes intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 5 DPI
Astrocytes_Neurons_5D_Rhohat <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_5D_Rhohat_fig <- pool(Astrocytes_Neurons_5D_Rhohat)

png("Plots/Astrocytes_Neurons_5D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_5D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 50),
     ylab = "p(Astrocytes intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 15 DPI
Astrocytes_Neurons_15D_Rhohat <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_15D_Rhohat_fig <- pool(Astrocytes_Neurons_15D_Rhohat)

png("Plots/Astrocytes_Neurons_15D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_15D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 50),
     ylab = "p(Astrocytes intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 30 DPI
Astrocytes_Neurons_30D_Rhohat <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_30D_Rhohat_fig <- pool(Astrocytes_Neurons_30D_Rhohat)

png("Plots/Astrocytes_Neurons_30D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_30D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 50),
     ylab = "p(Astrocytes intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

```

The generated graphs are shown in Figure 2 of th research article and display the correlation between astrocyte and microglia intensity in covariance to neurons.

## 4.3 Fit models for Astrocytes-neurons covariance (mppm)

After the initial visualization, we fit point process models using mppm function. We set the neuronal spatial intensity (Neurons_Dens) as a covariant for glial (astrocyte and microglia) intensity. We allow intercepts and sloped vary per DPI as a grouping (random effect) variable. Given that at 0 DPI (control animals) do not offer a sufficient sampling of reactive glia (GFAP and IBA1+ cells), this time point is used just as a reference and do not intent to provide accurate quantification of glial spatial intensity in healthy conditions. The same procedure is applied for microglia/neurons covariance.

The model results are shown in the **supplementary table 6** of the main research article.

```{r}
#| label: Fit models for astrocytes-neurons covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# We order the DPI factor
PointPatterns_5x$DPI <- factor(PointPatterns_5x$DPI, levels = c("0D", "5D", "15D", "30D"))

# We fit the model
Astrocytes_Neurons_Fit1 <- mppm(Astrocytes ~ Neurons_Dens, random = ~ Neurons_Dens |DPI, data=PointPatterns_5x)
          
summary(Astrocytes_Neurons_Fit1)
```

This results suggest that astrocyte exhibit a bimodal dynamic, showing aggregation in perilesional regions suring the first two weeks post ischemia, and marked invasion of intra-lesional regions at 30 DPI

## 4.4 Microglia/neurons relative distribution and covariance

We create the rhohat graphs for microglia/neurons covariance

```{r}
# For control (0 DPI)
Microglia_Neurons_0D_Rhohat <- with(PointPatterns_5x_0D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_0D_Rhohat_fig <- pool(Microglia_Neurons_0D_Rhohat)

png("Plots/Microglia_Neurons_0D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_0D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     #ylim = c(0, 100),
     ylab = "p(Microglia intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 5 DPI
Microglia_Neurons_5D_Rhohat <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_5D_Rhohat_fig <- pool(Microglia_Neurons_5D_Rhohat)

png("Plots/Microglia_Neurons_5D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_5D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 70),
     ylab = "p(Microglia intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 15 DPI

# For 5 DPI
Microglia_Neurons_15D_Rhohat <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_15D_Rhohat_fig <- pool(Microglia_Neurons_15D_Rhohat)

png("Plots/Microglia_Neurons_15D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_15D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 70),
     ylab = "p(Microglia intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 30 DPI
Microglia_Neurons_30D_Rhohat <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_30D_Rhohat_fig <- pool(Microglia_Neurons_30D_Rhohat)

png("Plots/Microglia_Neurons_30D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_30D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "Neuronal intensity",
     ylim = c(0, 30),
     ylab = "p(Microglia intensity)",
     cex.main = 2,
     cex.lab = 2,
     cex.axis = 2,
     lwd = 5,
     legend=FALSE)
dev.off()
```

## 4.5 Fit models for Microglia-neurons covariance (mppm)

We fit the mppm for microglia/neurons covariance

```{r}
#| label: Fit models for Microglia-neurons covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# We fir the model
Microglia_Neurons_Fit1 <- mppm(Microglia ~ Neurons_Dens, random = ~ Neurons_Dens|DPI, data=PointPatterns_5x)

summary (Microglia_Neurons_Fit1)
```

Contrary to astrocytes, negative slopes for neuronal intensity in all time points demarcate microglial allocation in low-intensity neuronal areas.This portarits a microglial layer formed inside an astrocyte wall located in perilesional tissue.

# 5. Analysis of cell covariance based on tessellations (spatstat)

In section 1, we tessellated NeuN and IBA1 images based on the smoothed density kernels [@baddeley2015, pp.177-178] using quantiles (0, 20, 150), to define regions of low and high intensity. Using the tessellations, we quantified the number of astrocytes and microglia in neuronal regions, as well as the number of astrocytes in microglial regions. The results were saved in a .csv file. Here, we load the data set under the name of `Cells_Tessellation_Raw` and perform scientific inference on glial/neuronal allocation.

## 5.1 Load and prepare the dataset

We rename and subset the relevant columns for the analysis of cell covariance. Columns names respond to AN1 (Astrocytes in low intensity neuronal areas) and AN2 (Astrocytes in mid intensity neuronal areas). The same applies for microglia in neuronal areas (MN) and Astrocytes in microglial areas (AM). For this analysis, we exclude 0 DPI as this time points do not map efficiently the presence of reactive glia.This enables us to perform better statistical modeling.

```{r}
#| label: Load and prepare cell covariance data (tessellations)
#| include: true
#| warning: false
#| message: false

# Load the data set
Cells_Tess_Raw <- read.csv(file = 'ResultsTables/Cells_Covariance.csv', header = TRUE)

## We subset the relevant columns (cell number)
Cells_Tess <- subset(Cells_Tess_Raw, select = -c(X))

## And extract metadata from the image name
Cells_Tess  <- cbind(Cells_Tess, do.call(rbind , strsplit(Cells_Tess$Brain, "[_\\.]"))[,3:4])

## We Rename the relevant columns 
colnames(Cells_Tess) <- c("Brain", "AN1", "AN2", "MN1", "MN2", "AM1", "AM2", "MouseID", "DPI")

## Perform a new subset
Cells_Tess <- subset(Cells_Tess, select = c(MouseID, DPI, AN1, AN2, MN1, MN2, AM1, AM2))

## And organize the DPI factors 
Cells_Tess$DPI <- factor(Cells_Tess $DPI, levels = c("0D", "5D", "15D", "30D"))

## We exclude 0 DPI
Cells_Tess <- Cells_Tess[Cells_Tess$DPI != "0D",]

```

### 5.1.1 Prepare Astrocytes/neurons dataset

We organize the astrocyte/neurons covariance dataset.

```{r}
#| label: Prepare astrocytes/neurons covariance data (tessellations)
#| include: true
#| warning: false
#| message: false

# For astrocytes in neuronal areas

## Subset data for astrocytes in neuronal areas
Astrocytes_Neurons_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, AN1, AN2))

## Transform the data set to long format
Astrocytes_Neurons_Tess <- melt(Astrocytes_Neurons_Tess, id.vars = c("MouseID", "DPI"))

## Set new column names
colnames(Astrocytes_Neurons_Tess) <- c("MouseID", "DPI", "NeuronalDensity", "Astrocytes")

## Set factor levels
levels(Astrocytes_Neurons_Tess$NeuronalDensity) <- list(Low  = "AN1", High = "AN2")

Astrocytes_Neurons_Tess$NeuronalDensity <- factor(Astrocytes_Neurons_Tess$NeuronalDensity, ordered = TRUE, levels = c("Low", "High"))


```

### 5.1.2 Prepare Microglia/neurons dataset

We do the same for microglia/neurons covariance

```{r}
#| label: Prepare microglia/neurons covariance data (tessellations)
#| include: true
#| warning: false
#| message: false

Microglia_Neurons_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, MN1, MN2))

Microglia_Neurons_Tess <- melt(Microglia_Neurons_Tess, id.vars = c("MouseID", "DPI"))

colnames(Microglia_Neurons_Tess) <- c("MouseID", "DPI", "NeuronalDensity", "Microglia")

levels(Microglia_Neurons_Tess$NeuronalDensity) <- list(Low  = "MN1", High = "MN2")

Microglia_Neurons_Tess$NeuronalDensity <- factor(Microglia_Neurons_Tess$NeuronalDensity, ordered = TRUE, levels = c("Low", "High"))

```

### 5.1.3 Prepare astrocytes/microglia dataset

```{r}
#| label: Prepare astrocytes/microglia covariance data (tessellations)
#| include: true
#| warning: false
#| message: false

Astrocytes_Microglia_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, AM1, AM2))

Astrocytes_Microglia_Tess <- melt(Astrocytes_Microglia_Tess, id.vars = c("MouseID", "DPI"))

## We eliminate the 0 DPI given that this point does not exhibit a considerable number of reactive glia or reactive glia-like cells
Astrocytes_Microglia_Tess <- Astrocytes_Microglia_Tess [!(Astrocytes_Microglia_Tess$DPI=="0D"),]

Astrocytes_Microglia_Tess$DPI <- factor(Astrocytes_Microglia_Tess$DPI, ordered = TRUE, levels = c("5D", "15D", "30D"))

colnames(Astrocytes_Microglia_Tess) <- c("MouseID", "DPI", "MicroglialDensity", "Astrocytes")

levels(Astrocytes_Microglia_Tess$MicroglialDensity) <- list(Low  = "AM1", High = "AM2")

Astrocytes_Microglia_Tess$MicroglialDensity <- factor(Astrocytes_Microglia_Tess$MicroglialDensity, ordered = TRUE, levels = c("Low", "High"))

## We eliminate all missing rows to avoid errors in further calculations
Astrocytes_Microglia_Tess[is.na(Astrocytes_Microglia_Tess)] <- 0
```

## 5.2 Plot the data for initial visualization

We create graphs for initial visualization using `geom_density_ridges` and save them in the designated locations.

### 5.2.1 Plot astrocytes / neuronal covariance

```{r}
#| label: Create astrocytes/neurons covariance graph (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

Astrocytes_Neurons_Ridges <- ggplot(Astrocytes_Neurons_Tess, 
                               aes(x = Astrocytes, 
                                   y = DPI, 
                                   fill = NeuronalDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
  scale_y_discrete(name= " DPI \n",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Astrocytes in neuronal regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  
  scale_color_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Neurons_Ridges, "Plots/Astrocytes_Neurons_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")

```

### 5.2.2 Plot microglia / neuronal covariance

```{r}
#| label: Create microglia/neurons covariance graph (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Microglia_Neurons_Ridges <- ggplot(Microglia_Neurons_Tess, 
                               aes(x = Microglia, 
                                   y = DPI, 
                                   fill = NeuronalDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Microglia in neuronal regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  
  scale_color_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Microglia_Neurons_Ridges, "Plots/Microglia_Neurons_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")

```

### 5.2.3 Plot astrocytes / microglia covariance

```{r}
#| label: Create astrocytes/microglia covariance graph (tessellations)
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
# For astrocytes in microglial regions

Astrocytes_Microglia_Ridges <- ggplot(Astrocytes_Microglia_Tess, 
                               aes(x = Astrocytes, 
                                   y = DPI, 
                                   fill = MicroglialDensity)) + 
                                                                                             
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
   
 
  scale_y_discrete(name= " DPI \n",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n Astrocytes in microglial regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,100)) +
  
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="Microglial density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  
  scale_color_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                         breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Microglia_Ridges, "Plots/Astrocytes_Microglia_Ridges.png", 
       width = 13, 
       height = 10, 
       units = "cm")


```

And we plot the graphs:

```{r}
#| label: Plot Tessellation ridges for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Neurons_Ridges, Microglia_Neurons_Ridges, Astrocytes_Microglia_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 5.3 Bayesian modeling of glial-neurons covariance (tessellations)

As done previously, here we employ the `brms` package [@bürkner2017; @bürkner2018; @brms]to perform Bayesian regression. We fit to models. First, fixed effects models with DPI as a grouping variable. Second, a random intercepts/slopes model, allowing cell counts vary by DPI. We use student distributions (robust regression) to reduce the impact of possible extreme data and used brms-default flat priors. We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. We save .rds files containing the models in the designated location. To re fit the models, please erase the .rds file and `file_refit` line. The same considerations apply for microglia in neuronal regions and astrocytes in microglial regions.

### 5.3.1 Modeling of astrocytes / neurons covariance

We set formulas and priors for each cell type.

```{r}
#| label: Model astrocytes / neurons covariance (tessellations)
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Model 1
Astrocytes_Neurons_Tess_Mdl1 <- bf(Astrocytes ~ 0 + NeuronalDensity + (1|DPI))

get_prior(Astrocytes_Neurons_Tess_Mdl1, data = Astrocytes_Neurons_Tess, family = student)

Astrocytes_Neurons_Tess_Fit1 <- brm(data = Astrocytes_Neurons_Tess,
                          family = student(),
                          formula = Astrocytes_Neurons_Tess_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Tess_Fit1.rds",
                          file_refit = "never")

Astrocytes_Neurons_Tess_Fit1<- add_criterion(Astrocytes_Neurons_Tess_Fit1, c("loo", "waic", "bayes_R2"))


## Model 2
Astrocytes_Neurons_Tess_Mdl2 <- bf(Astrocytes ~ NeuronalDensity + (1 + NeuronalDensity|DPI))

get_prior(Astrocytes_Neurons_Tess_Mdl2, data = Astrocytes_Neurons_Tess, family = student)

Astrocytes_Neurons_Tess_Fit2 <- brm(data = Astrocytes_Neurons_Tess,
                          family = student(),
                          formula = Astrocytes_Neurons_Tess_Mdl2,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Tess_Fit2.rds",
                          file_refit = "never")   

Astrocytes_Neurons_Tess_Fit2 <- add_criterion(Astrocytes_Neurons_Tess_Fit2, c("loo", "waic", "bayes_R2"))


Astrocytes_Neurons_Tess_Mdl3 <- bf(Astrocytes ~ 0 + NeuronalDensity:DPI)

get_prior(Astrocytes_Neurons_Tess_Mdl3, data = Astrocytes_Neurons_Tess, family = student)

Astrocytes_Neurons_Tess_Fit3 <- brm(data = Astrocytes_Neurons_Tess,
                          family = student(),
                          formula = Astrocytes_Neurons_Tess_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Tess_Fit3.rds",
                          file_refit = "never")

Astrocytes_Neurons_Tess_Fit3<- add_criterion(Astrocytes_Neurons_Tess_Fit3, c("loo", "waic", "bayes_R2"))
```

### 5.3.2 Modeling of microglia / neurons covariance

We set formulas and priors for each cell type.

```{r}
#| label: Model microglia / neurons covariance (tessellations)
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Model 1
Microglia_Neurons_Tess_Mdl1 <- bf(Microglia ~ 0 + NeuronalDensity + (1|DPI))

get_prior(Microglia_Neurons_Tess_Mdl1, data = Microglia_Neurons_Tess, family = student)

Microglia_Neurons_Tess_Fit1 <- brm(data = Microglia_Neurons_Tess,
                          family = student(),
                          formula = Microglia_Neurons_Tess_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Tess_Fit1.rds",
                          file_refit = "never")

Microglia_Neurons_Tess_Fit1<- add_criterion(Microglia_Neurons_Tess_Fit1, c("loo", "waic", "bayes_R2"))


## Model 2
Microglia_Neurons_Tess_Mdl2 <- bf(Microglia ~ 0 + NeuronalDensity + (NeuronalDensity|DPI))

get_prior(Microglia_Neurons_Tess_Mdl2, data = Microglia_Neurons_Tess, family = student)

Microglia_Neurons_Tess_Fit2 <- brm(data = Microglia_Neurons_Tess,
                          family = student(),
                          formula = Microglia_Neurons_Tess_Mdl2,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Tess_Fit2.rds",
                          file_refit = "never")   

Microglia_Neurons_Tess_Fit2 <- add_criterion(Microglia_Neurons_Tess_Fit2, c("loo", "waic", "bayes_R2"))

# Model 3
Microglia_Neurons_Tess_Mdl3 <- bf(Microglia ~ 0 + NeuronalDensity:DPI)

get_prior(Microglia_Neurons_Tess_Mdl3, data = Microglia_Neurons_Tess, family = student)

Microglia_Neurons_Tess_Fit3 <- brm(data = Microglia_Neurons_Tess,
                          family = student(),
                          formula = Microglia_Neurons_Tess_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Tess_Fit3.rds",
                          file_refit = "never")

Microglia_Neurons_Tess_Fit3<- add_criterion(Microglia_Neurons_Tess_Fit3, c("loo", "waic", "bayes_R2"))
```

## 5.4 Model analysis

### 5.4.1 Analysis of astrocyte / neurons covariance

#### 5.4.1.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: Plot posterior predictive checks for astrocytes/neurons 
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Astrocytes_Neurons_Mdl1_ppchecks <- brms::pp_check(Astrocytes_Neurons_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a grouping factor",
       caption = "Model: Intensity ~ 0 + NeuronalIntensity + (1|DPI)") +
  
  scale_x_continuous(name="\n Astrocytes intensity (GFAP)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Neurons_Mdl1_ppchecks, "Plots/Astrocytes_Neurons_Mdl1_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")

# Model 2
Astrocytes_Neurons_Mdl2_ppchecks <- brms::pp_check(Astrocytes_Neurons_Tess_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "Random intercepts and slopes",
       caption = "Model: Intensity ~ 0 + N.Inten + (N.Inten|DPI)") +
  
  scale_x_continuous(name="\n Astrocytes intensity (GFAP)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Neurons_Mdl2_ppchecks, "Plots/Astrocytes_Neurons_Mdl2_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")


# Model 3
Astrocytes_Neurons_Mdl3_ppchecks <- brms::pp_check(Astrocytes_Neurons_Tess_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ NeuronalDensity:DPI") +
  
  scale_x_continuous(name="\n Astrocytes intensity (GFAP)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Neurons_Mdl3_ppchecks, "Plots/Astrocytes_Neurons_Mdl3_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: Plot graphs for astrocytes/neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Neurons_Mdl1_ppchecks, Astrocytes_Neurons_Mdl2_ppchecks, Astrocytes_Neurons_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe there are no meaningful deviance between the posterior predictions in the three models. Then, we compare the models using WAIC.

#### 2.4.1.2 We compare the models

```{r}
#| label: WAIC comparison for astroytes/neurons covariance
#| include: true
#| warning: false
#| message: false
#| results: false

#Perform model comaprison
w <- loo_compare(Astrocytes_Neurons_Tess_Fit1, Astrocytes_Neurons_Tess_Fit2, Astrocytes_Neurons_Tess_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Astrocytes_Neurons_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Astrocytes_Neurons_Tess_Fit1", "Astrocytes_Neurons_Tess_Fit2", "Astrocytes_Neurons_Tess_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "Astrocytes/Neurons WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Astrocytes_Neurons_WAIC, "Plots/Astrocytes_Neurons_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")
```

The results suggest that the models perform very similar. Based on this, we selected model 3 (Mdl3) with interaction given that is favorable for making further comparisons.

#### 5.4.1.3 Plot model diagnostics

We plot the model diagnostics using functions from the bayesplot packages

```{r}
#| label: Plot model diagnostics  for astrocytes / Neurons covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Astrocytes_Neurons_Tess_Fit3)
color_scheme_set("viridis")

Astrocytes_Neurons_Tess_Trace <- mcmc_trace(Astrocytes_Neurons_Tess_Fit3, pars = c("b_NeuronalDensityLow:DPI5D", "b_NeuronalDensityLow:DPI15D", "b_NeuronalDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

ggsave(plot = Astrocytes_Neurons_Tess_Trace, "Plots/Astrocytes_Neurons_Tess_Trace.png", 
       width = 40, 
       height = 10, 
       units = "cm")

# We plot the sample traces
Astrocytes_Neurons_Tess_Trace
```

#### 5.4.1.4 Model summary

We print the summary for *Mdl2* to visualize the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7**.

```{r}
#| label: Print summary for NeuN intensity Mdl3
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Neurons_Tess_Fit3)
```

### 5.4.2 Analysis of Microglia / neurons covariance

#### 5.4.2.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: Plot posterior predictive checks for microglia/neurons
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Microglia_Neurons_Mdl1_ppchecks <- brms::pp_check(Microglia_Neurons_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a grouping factor",
       caption = "Model: Intensity ~ 0 + NeuronalIntensity + (1|DPI)") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Microglia_Neurons_Mdl1_ppchecks, "Plots/Microglia_Neurons_Mdl1_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")

# Model 2
Microglia_Neurons_Mdl2_ppchecks <- brms::pp_check(Microglia_Neurons_Tess_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "Random intercepts and slopes",
       caption = "Model: Intensity ~ 0 + N.Inten + (N.Inten|DPI)") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Microglia_Neurons_Mdl2_ppchecks, "Plots/Microglia_Neurons_Mdl2_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")


# Model 3
Microglia_Neurons_Mdl3_ppchecks <- brms::pp_check(Microglia_Neurons_Tess_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ NeuronalDensity:DPI") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Microglia_Neurons_Mdl3_ppchecks, "Plots/Microglia_Neurons_Mdl3_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")
```

Next, plot the posterior predictive checks

```{r}
#| label: Plot graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Microglia_Neurons_Mdl1_ppchecks, Microglia_Neurons_Mdl2_ppchecks, Microglia_Neurons_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

Although there are no major deviations it can be seen that the predictions of model 2 fit a bit more to the data.

#### 2.4.2.2 We compare the models

```{r}
#| label: LOO comparison for NeuN intensity
#| include: true
#| warning: false
#| message: false
#| results: false
#| 
#Perform model comaprison
w <- loo_compare(Microglia_Neurons_Tess_Fit1, Microglia_Neurons_Tess_Fit2, Microglia_Neurons_Tess_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Microglia_Neurons_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Microglia_Neurons_Tess_Fit1", "Microglia_Neurons_Tess_Fit2", "Microglia_Neurons_Tess_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "Microglia/Neurons WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Microglia_Neurons_WAIC, "Plots/Microglia_Neurons_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")
```

Model 3 is the less penalized.

#### 5.4.2.3 Plot model diagnostics

We plot the model diagnostics using functions from the bayesplot packages

```{r}
#| label: Plot model diagnostics  for Microglia / Neurons covariance
#| include: true
#| warning: false
#| message: false
#| cache: true

parnames(Microglia_Neurons_Tess_Fit3)
color_scheme_set("viridis")

Microglia_Neurons_Tess_Trace <- mcmc_trace(Microglia_Neurons_Tess_Fit3, pars = c("b_NeuronalDensityLow:DPI5D", "b_NeuronalDensityLow:DPI15D", "b_NeuronalDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

ggsave(plot = Microglia_Neurons_Tess_Trace, "Plots/Microglia_Neurons_Tess_Trace.png", 
       width = 40, 
       height = 10, 
       units = "cm")

# We plot the sample traces
Microglia_Neurons_Tess_Trace
```

#### 5.4.2.4 Model summary

We print the summary for *Mdl3* to visualize the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7** of the research article.

```{r}
#| label: Print summary for microglia/neurons covariance 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Microglia_Neurons_Tess_Fit3)
```

## 5.5 Calculate contrast between time points

We employ the the `emmeans` package [@emmeans] to compute contrast between the time points using the posterior distributions. In contrast to previous fixed effects models, here w need to handle the model results to extract tidy posterior distributions and make coparisons after.

### 5.5.1 Constranst for Astrocytes / Neurons covariance

```{r}
#| label: Calculate constrast for asrocyte / neurons covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Astrocytes_Neurons_Contrast <- Astrocytes_Neurons_Tess_Fit3%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(1000)

# We calculate difference between 15 and 5 DPI
hypothesis(Astrocytes_Neurons_Tess_Fit3, "NeuronalDensityLow:DPI15D > NeuronalDensityLow:DPI5D", class = "b", seed = 8807)

Astrocytes_Neurons_hypothesis <- Astrocytes_Neurons_Contrast %>%
  filter(contrast == "15D - 5D" & NeuronalDensity == "Low") 

sum(Astrocytes_Neurons_hypothesis$.value < 184) / 1000

# We calculate difference between 30 and 15 DPI
hypothesis(Astrocytes_Neurons_Tess_Fit3, "NeuronalDensityLow:DPI30D < NeuronalDensityLow:DPI15D", class = "b", seed = 8807)

Astrocytes_Neurons_hypothesis <- Astrocytes_Neurons_Contrast %>%
  filter(contrast == "30D - 15D" & NeuronalDensity == "Low") 

sum(Astrocytes_Neurons_hypothesis$.value > -184) / 1000
```

### 5.5.2 Constranst for microglia / Neurons covariance

```{r}
#| label: Calculate constrast for microglia / neurons covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Microglia_Neurons_Contrast <- Microglia_Neurons_Tess_Fit3%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(1000)

# We calculate difference between 30 and 5 DPI
hypothesis(Microglia_Neurons_Tess_Fit3, "NeuronalDensityHigh:DPI30D <   NeuronalDensityHigh:DPI5D", class = "b", seed = 8807)

Microglia_Neurons_hypothesis <- Microglia_Neurons_Contrast %>%
  filter(contrast == "30D - 5D" & NeuronalDensity == "High") 

sum(Microglia_Neurons_hypothesis$.value > -184) / 1000

# We calculate difference between 30 and 15 DPI
hypothesis(Microglia_Neurons_Tess_Fit3, "NeuronalDensityLow:DPI30D <   NeuronalDensityLow:DPI15D", class = "b", seed = 8807)

Microglia_Neurons_hypothesis <- Microglia_Neurons_Contrast %>%
  filter(contrast == "30D - 15D" & NeuronalDensity == "Low") 

sum(Microglia_Neurons_hypothesis$.value > -184) / 1000

```

## 5.6 Visualize estimates and uncertainty for cell covariance

### 5.6.1 For astrocytes-neurons covariance

We generate the graphs showing uncertainty in the estimates and contrast.

```{r}
#| label: Create contrats graphs for astrocytes / neurons covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Astrocytes_Neurons_Contrast_Sub <- Astrocytes_Neurons_Contrast[
  (Astrocytes_Neurons_Contrast$contrast=="30D - 5D"|
  Astrocytes_Neurons_Contrast$contrast=="30D - 15D"|
   Astrocytes_Neurons_Contrast$contrast=="15D - 5D"),]
   

Astrocytes_Neurons_Contrast_Sub$contrast <- factor(Astrocytes_Neurons_Contrast_Sub$contrast, levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Astrocytes_Neurons_Contrast_Fig1 <- Astrocytes_Neurons_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 184))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-184, 184), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  ggtitle("Astrocytes / Neurons covariance") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-500, 500), 
                     breaks=seq(-500,500, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ NeuronalDensity, ncol = 1)
  
ggsave(plot = Astrocytes_Neurons_Contrast_Fig1, "Plots/Astrocytes_Neurons_Tess_Patch.png", width = 12, height = 12, units = "cm")

```

### 5.6.2 For Microglia-neurons covariance

We generate the graphs showing uncertainty in the estimates and contrast.

```{r}
#| label: Create contrats graphs for microglia / neurons covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Microglia_Neurons_Contrast_Sub <- Microglia_Neurons_Contrast[
  (Microglia_Neurons_Contrast$contrast=="30D - 5D"|
  Microglia_Neurons_Contrast$contrast=="30D - 15D"|
   Microglia_Neurons_Contrast$contrast=="15D - 5D"),]
   

Microglia_Neurons_Contrast_Sub$contrast <- factor(Microglia_Neurons_Contrast_Sub$contrast, levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Microglia_Neurons_Contrast_Fig1 <- Microglia_Neurons_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 127))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-127, 127), linetype = "dashed") +
  
  ggtitle("Microglia / Neurons covariance") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-600, 400), 
                     breaks=seq(-600,400, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ NeuronalDensity, ncol = 1)
  
ggsave(plot = Microglia_Neurons_Contrast_Fig1, "Plots/Microglia_Neurons_Tess_Patch.png", width = 12, height = 12, units = "cm")

```

Here we plot the graphs

```{r}
#| label: Plot composited graphs for cell covariance (tessellations)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


ggarrange(Astrocytes_Neurons_Contrast_Fig1, Microglia_Neurons_Contrast_Fig1 + rremove("x.text"), 
          labels = c("A", "B"),
          ncol = 3, nrow = 1)
```

## 5.7 Plot Tesselations

Here we plot sample tessellations for astrocytes/neuorns and microglia/neurons using the R-base graphs system.

### 5.7.1 Plot tesselations for astrocytes / neurons

```{r}
#| label: Plot tesselations for astrocytes / neurons covariance
#| include: true
#| warning: false
#| message: false


# Mouse 33, 5 DPI
png("Plots/Astrocytes_Neurons_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Neurons_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "") 
     
plot(PointPatterns_5x$Astrocytes$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
     
dev.off()

# Mouse 04, 15 DPI
png("Plots/Astrocytes_Neurons_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "") 
     
plot(PointPatterns_5x$Astrocytes$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()

# Mouse 05, 30 DPI
png("Plots/Astrocytes_Neurons_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "") 
 
plot(PointPatterns_5x$Astrocytes$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()
```

### 5.7.2 Plot tesselations for Microglia / neurons

```{r}
#| label: Plot tesselations for Microglia / neurons covariance
#| include: true
#| warning: false
#| message: false


# Mouse 33, 5 DPI
png("Plots/Microglia_Neurons_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Neurons_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "") 
     
plot(PointPatterns_5x$Microglia$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
     
dev.off()

# Mouse 04, 15 DPI
png("Plots/Microglia_Neurons_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "") 
     
plot(PointPatterns_5x$Microglia$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()

# Mouse 05, 30 DPI
png("Plots/Microglia_Neurons_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "") 
 
plot(PointPatterns_5x$Microglia$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()
```

## 5.8 Estimate the degree of influence of neuronal density in glial arregement

Our goal in this section is to use the `dfbetas` function from `spatstat` to measure the influence for a point pattern model, calculating the change in estimates whit leave-one-out validation. This results in a matrix with depicting changes in the corresponding coefficients. We aim to obtain graphical outputs as a way of summary.

### 5.8.1 Superimpose brains

Here we use the `superimpose` function to merge all the point patterns per DPI in a single window. This procedure is carried out given that the dfbetas function is not available in spatstat for multiple (replicated) point pattern. Therefore, no graphical summaries can be generated. In the procedure, we use the `unmark` function eliminates the object marks identifying each animal. This step is required becasuse marked point patterns are not accepted by dfbetas. We performed the same procedure for each cell type and time point.

```{r}
#| label: Superimpose 5x brains
#| include: true
#| warning: false
#| message: false


# For neurons

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
NeuN_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Neurons) 
NeuN_Superimposed_5x_0D <- unmark(NeuN_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
NeuN_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Neurons) 
NeuN_Superimposed_5x_5D <- unmark(NeuN_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
NeuN_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Neurons) 
NeuN_Superimposed_5x_15D <- unmark(NeuN_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
NeuN_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Neurons) 
NeuN_Superimposed_5x_30D <- unmark(NeuN_Superimposed_5x_30D)


# For astrocytes

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
Gfap_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Astrocytes) 
Gfap_Superimposed_5x_0D <- unmark(Gfap_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
Gfap_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Astrocytes) 
Gfap_Superimposed_5x_5D <- unmark(Gfap_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
Gfap_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Astrocytes) 
Gfap_Superimposed_5x_15D <- unmark(Gfap_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
Gfap_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Astrocytes) 
Gfap_Superimposed_5x_30D <- unmark(Gfap_Superimposed_5x_30D)


# For microglia

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
Iba1_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Microglia) 
Iba1_Superimposed_5x_0D <- unmark(Iba1_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
Iba1_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Microglia) 
Iba1_Superimposed_5x_5D <- unmark(Iba1_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
Iba1_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Microglia) 
Iba1_Superimposed_5x_15D <- unmark(Iba1_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
Iba1_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Microglia) 
Iba1_Superimposed_5x_30D <- unmark(Iba1_Superimposed_5x_30D)
```

### 5.8.2 Compute density kernelS for superimposed brains

We use the `density` function from `spatstat` to obtain a nonparametric density kernel [@baddeley2015, pp.168-174] to retrieve cell intensity in the observation window. The bandwidth (sigma) was manually choose and consistently used for each cell type.

```{r}
#| label: Calculate density kernel for superiposed brains at 5x
#| include: true
#| warning: false
#| message: false

NeuN_Intensity_0D <- density(NeuN_Superimposed_5x_0D, sigma=0.3, main = "Neurons 0D")
NeuN_Intensity_5D <- density(NeuN_Superimposed_5x_5D, sigma=0.3, main = "Neurons 5D")
NeuN_Intensity_15D <- density(NeuN_Superimposed_5x_15D, sigma=0.3, main = "Neurons 15D")
NeuN_Intensity_30D <- density(NeuN_Superimposed_5x_30D, sigma=0.3, main = "Neurons 30D")


Gfap_Intensity_0D <- density(Gfap_Superimposed_5x_0D, sigma=0.2, main = "Astrocytes 0D")
Gfap_Intensity_5D <- density(Gfap_Superimposed_5x_5D, sigma=0.2, main = "Astrocytes 5D")
Gfap_Intensity_15D <- density(Gfap_Superimposed_5x_15D, sigma=0.2, main = "Astrocytes 15D")
Gfap_Intensity_30D <- density(Gfap_Superimposed_5x_30D, sigma=0.2, main = "Astrocytes 30D")

Iba1_Intensity_0D <- density(Iba1_Superimposed_5x_0D, sigma=0.2, main = "Microglia 0D")
Iba1_Intensity_5D <- density(Iba1_Superimposed_5x_5D, sigma=0.2, main = "Microglia 5D")
Iba1_Intensity_15D <- density(Iba1_Superimposed_5x_15D, sigma=0.2, main = "Microglia 15D")
Iba1_Intensity_30D <- density(Iba1_Superimposed_5x_30D, sigma=0.2, main = "Microglia 30D")
```

### 5.8.3 Influence of neurons in astrocyte allocation

#### 5.8.3.1 Fit the models with superimpoed brains for astrocytes/neurons covariance

We fit non-stationary poisson process models using the `ppm` function from `spatstat`. However, please note that our model of reference is the one generated using `mppm`. The current models aim to use the dfbetas function exclusively. The same consideration apply for miroglia/neurons covariance.

```{r}
#| label: Fit models for astrocytes-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We fit the model
Astrocytes_Neurons_Covariance_0D <- ppm(Gfap_Superimposed_5x_0D ~ NeuN_Intensity_0D)

# For 5D
Astrocytes_Neurons_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ NeuN_Intensity_5D)

# For 15D
Astrocytes_Neurons_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ NeuN_Intensity_15D)

# For 30D
Astrocytes_Neurons_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ NeuN_Intensity_30D)
```

#### 5.8.3.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: Print summary for astrocytes-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Neurons_Covariance_0D
Astrocytes_Neurons_Covariance_5D
Astrocytes_Neurons_Covariance_15D
Astrocytes_Neurons_Covariance_30D
```

#### 5.8.3.3 Calculate the influence

We calculate the actual impact (influence) of each data point in the final outcome. The anomalous point (with higher residuals) load the greater influence.Here, we used the `dfbetas` function from spatstat to appreciate the direction of which the data points (neuronal intensity) affects astrocyte allocation.

```{r}
#| label: Calculate influence for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Astrocytes_Neurons_Covariance_Influence_0D <- dfbetas(Astrocytes_Neurons_Covariance_0D)

# For 5 DPI
Astrocytes_Neurons_Covariance_Influence_5D <- dfbetas(Astrocytes_Neurons_Covariance_5D)

# For 15 DPI
Astrocytes_Neurons_Covariance_Influence_15D <- dfbetas(Astrocytes_Neurons_Covariance_15D)

# For 30 DPI
Astrocytes_Neurons_Covariance_Influence_30D <- dfbetas(Astrocytes_Neurons_Covariance_30D)
```

#### 5.8.3.4 Plot the influence

We plot the influence as shown in the supplementary figure 6A.

```{r}
#| label: Plot influence for astrocyte-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Astrocyte_Influence_colourmap <- colourmap(heat.colors(12), range = c(-8e-04, 8e-04))

# For 0 DPI
par(mfrow=c(1,4))
plot(Astrocytes_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 0D")

# For 5 DPI
plot(Astrocytes_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 5D")

# For 15 DPI
plot(Astrocytes_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 15D")

# For 30 DPI
plot(Astrocytes_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Neurons influence 30D")

```

### 5.8.4 Influence of neurons in microglia allocation

#### 5.8.3.1 Fit the models with superimpoed brains for Microglia/neurons covariance

```{r}
#| label: Fit models for Microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D

## We fit the model
Microglia_Neurons_Covariance_0D <- ppm(Iba1_Superimposed_5x_0D ~ NeuN_Intensity_0D)

# For 5D
Microglia_Neurons_Covariance_5D <- ppm(Iba1_Superimposed_5x_5D ~ NeuN_Intensity_5D)

# For 15D
Microglia_Neurons_Covariance_15D <- ppm(Iba1_Superimposed_5x_15D ~ NeuN_Intensity_15D)

# For 30D
Microglia_Neurons_Covariance_30D <- ppm(Iba1_Superimposed_5x_30D ~ NeuN_Intensity_30D)
```

#### 5.8.3.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: Print summary for Microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Microglia_Neurons_Covariance_0D
Microglia_Neurons_Covariance_5D
Microglia_Neurons_Covariance_15D
Microglia_Neurons_Covariance_30D
```

#### 5.8.3.3 Calculate the influence

We use the `dfbetas` function as done for astrocytes

```{r}
#| label: Calculate influence for microglia-neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Microglia_Neurons_Covariance_Influence_0D <- dfbetas(Microglia_Neurons_Covariance_0D)

# For 5 DPI
Microglia_Neurons_Covariance_Influence_5D <- dfbetas(Microglia_Neurons_Covariance_5D)

# For 15 DPI
Microglia_Neurons_Covariance_Influence_15D <- dfbetas(Microglia_Neurons_Covariance_15D)

# For 30 DPI
Microglia_Neurons_Covariance_Influence_30D <- dfbetas(Microglia_Neurons_Covariance_30D)
```

#### 5.8.3.4 Plot the influence

We plot the influence

```{r}
#| label: Plot influence for microglia/neurons covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Microglia_Influence_colourmap <- colourmap(heat.colors(12), range = c(-8e-04, 8e-04))

# For 0 DPI
par(mfrow=c(1,4))
plot(Microglia_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "Microglia-Neurons influence 0D")

# For 5 DPI
plot(Microglia_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "Microglia-Neurons influence 5D")

# For 15 DPI
plot(Microglia_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "Microglia-Neurons influence 15D")

# For 30 DPI
plot(Microglia_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "Microglia-Neurons influence 30D")

```

# 6. Compartimentalization of glial scar

## 6.1 Relative distribution (x-axis) of astrocytes

We use the `rhohat` function, as previously, specifying the x-axis as an argument. We specify `do.CI=FALSE` to calculate confidence intervals from the pooled functions (brains). The rhohat is calculated for each brain and then the estimates are merged.

```{r}
#| label: Calculate the relative distribution of x-axis for astrocytes
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_RhohatX_5D <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_5D <- pool(Astrocytes_RhohatX_5D)


# For 15 DPI
Astrocytes_RhohatX_15D <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_15D <- pool(Astrocytes_RhohatX_15D)


# For 30 DPI
Astrocytes_RhohatX_30D <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_30D <- pool(Astrocytes_RhohatX_30D)
```

### 6.1.1 Plot the rhohat

We plot the rhohat for each time point.

```{r}
#| label: Save the rhohat of x-axis for astrocytes
#| include: false
#| warning: false
#| message: false


# For 5 DPI
png("Plots/Astrocytes_RhohatX_5D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6","-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()


# For 15 DPI
png("Plots/Astrocytes_RhohatX_15D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()

# For 30 DPI
png("Plots/Astrocytes_RhohatX_30D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()
```

### 6.1.2 Fit the model for relative distribution to X axis

We fit a mppm model, having the x-axis as a random effect (variyng by DPI). The control group is excluded given that it does not represent accurately the distribution of glial cells in the healthy brain. The same considerations apply for reacive microglia

```{r}
#| label: Fit the model for astrocytes relative distribution to X axis
#| include: false
#| warning: false
#| message: false
PointPatterns_5x_sub <- PointPatterns_5x[PointPatterns_5x$DPI != "0D",]


Astrocytes_XDistribution <- mppm (Astrocytes ~ x, random = ~ x| DPI, data = PointPatterns_5x_sub)

```

## 6.2 Relative distribution (x-axis) of microglia

We perform the same calculation for microglia point patterns.

```{r}
#| label: Calculate the relative distribution of x-axis for microglia
#| include: true
#| warning: false
#| message: false


# For 5 DPI
Microglia_RhohatX_5D <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_5D <- pool(Microglia_RhohatX_5D)


# For 15 DPI
Microglia_RhohatX_15D <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_15D <- pool(Microglia_RhohatX_15D)


# For 30 DPI
Microglia_RhohatX_30D <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_30D <- pool(Microglia_RhohatX_30D)
```

### 6.2.1 Plot the rhohat

We save the displayed graphs

```{r}
#| label: Save the rhohat of x-axis for microglia
#| include: false
#| warning: false
#| message: false

# For 5 DPI
png("Plots/Microglia_RhohatX_5D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6","-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()


# For 15 DPI
png("Plots/Microglia_RhohatX_15D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()

# For 30 DPI
png("Plots/Microglia_RhohatX_30D.png", width = 700, height = 500)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_30D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(Microglia)", mgp = c(5, 1, 0), cex.lab = 3)

dev.off()
```

### 6.2.1 Fit the model for relative distribution to X axis

```{r}
#| label: Fit the model for microglia relative distribution to X axis
#| include: false
#| warning: false
#| message: false

Microglia_XDistribution <- mppm (Microglia ~ x, random = ~ x| DPI, data = PointPatterns_5x_sub)

```

## 6.3 Plot perspective figures for astrocytes and microglia

We can also visualize astrocytes and microglia distribution using perspective plots accounting for position and intensity of the patterns. The `persp` function and respective arguments to control angle and intensity scale allow this visualization. Perspective plots are displayed in **Figure 3 and supplementary figure 5**.

### 6.3.1 Plot perspective plot for astrocytes

```{r}
#| label: Plot perspective figures for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
#| fig-width: 15
#| fig-height: 5

Pers_Colmap <- colourmap(topo.colors(256), range = c(0, 600))

par(mfrow=c(1,4))
D0 <- persp(Gfap_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_0D, Z= Gfap_Intensity_0D, M=D0, pch=20, cex=0.1, col = "white")

D5 <- persp(Gfap_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_5D, Z= Gfap_Intensity_5D, M=D5, pch=20, cex=0.1, col = "white")

D15 <- persp(Gfap_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_15D, Z= Gfap_Intensity_15D, M=D15, pch=20, cex=0.1, col = "white")

D30 <- persp(Gfap_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_30D, Z= Gfap_Intensity_30D, M=D30, pch=20, cex=0.1, col = "white")

```

### 6.3.2 Plot perspective figures for microglia

We do the same for microglia

```{r}
#| label: Plot perspective figures for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
#| fig-width: 15
#| fig-height: 5

par(mfrow=c(1,4))
persp(Iba1_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")



```

## 6.4 Point process models for astrocytes/microglia covariance (mppm)

```{r}
#| label: Fit models for astrocytes-microglia covariance (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# We order the DPI factor

Astrocytes_Microglia_Fit1 <- mppm(Astrocytes ~ Microglia_Dens, random = ~ Microglia_Dens |DPI, data=PointPatterns_5x_sub) 
```

## 6.5 Modeling of astrocytes / microglia covariance

We set formulas and priors for each cell type.

```{r}
#| label: Model astrocytes / Microglia covariance (tessellations)
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Model 1
Astrocytes_Microglia_Tess_Mdl1 <- bf(Astrocytes ~ 0 + MicroglialDensity + (1|DPI))

get_prior(Astrocytes_Microglia_Tess_Mdl1, data = Astrocytes_Microglia_Tess, family = student)

Astrocytes_Microglia_Tess_Fit1 <- brm(data = Astrocytes_Microglia_Tess,
                          family = student(),
                          formula = Astrocytes_Microglia_Tess_Mdl1,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Tess_Fit1.rds",
                          file_refit = "never")

Astrocytes_Microglia_Tess_Fit1<- add_criterion(Astrocytes_Microglia_Tess_Fit1, c("loo", "waic", "bayes_R2"))


## Model 2
Astrocytes_Microglia_Tess_Mdl2 <- bf(Astrocytes ~ MicroglialDensity + (1 + MicroglialDensity|DPI))

get_prior(Astrocytes_Microglia_Tess_Mdl2, data = Astrocytes_Microglia_Tess, family = student)

Astrocytes_Microglia_Tess_Fit2 <- brm(data = Astrocytes_Microglia_Tess,
                          family = student(),
                          formula = Astrocytes_Microglia_Tess_Mdl2,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Tess_Fit2.rds",
                          file_refit = "never")   

Astrocytes_Microglia_Tess_Fit2 <- add_criterion(Astrocytes_Microglia_Tess_Fit2, c("loo", "waic", "bayes_R2"))


Astrocytes_Microglia_Tess_Mdl3 <- bf(Astrocytes ~ 0 + MicroglialDensity:DPI)

get_prior(Astrocytes_Microglia_Tess_Mdl3, data = Astrocytes_Microglia_Tess, family = student)

Astrocytes_Microglia_Tess_Fit3 <- brm(data = Astrocytes_Microglia_Tess,
                          family = student(),
                          formula = Astrocytes_Microglia_Tess_Mdl3,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Tess_Fit3.rds",
                          file_refit = "never")

Astrocytes_Microglia_Tess_Fit3<- add_criterion(Astrocytes_Microglia_Tess_Fit3, c("loo", "waic", "bayes_R2"))

```

## 6.6 Model analysis

### 6.6.1 Analysis of astrocyte / neurons covariance

#### 6.6.1.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: Plot posterior predictive checks for Microglia (NeuN)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Astrocytes_Microglia_Mdl1_ppchecks <- brms::pp_check(Astrocytes_Microglia_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a grouping factor",
       caption = "Model: Intensity ~ 0 + MicroglialIntensity + (1|DPI)") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Microglia_Mdl1_ppchecks, "Plots/Astrocytes_Microglia_Mdl1_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")

# Model 2
Astrocytes_Microglia_Mdl2_ppchecks <- brms::pp_check(Astrocytes_Microglia_Tess_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "Random intercepts and slopes",
       caption = "Model: Intensity ~ 0 + N.Inten + (N.Inten|DPI)") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Microglia_Mdl2_ppchecks, "Plots/Astrocytes_Microglia_Mdl2_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")


# Model 3
Astrocytes_Microglia_Mdl3_ppchecks <- brms::pp_check(Astrocytes_Microglia_Tess_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ MicroglialDensity:DPI") +
  
  scale_x_continuous(name="\n Microglia intensity (IBA1)",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Microglia_Mdl3_ppchecks, "Plots/Astrocytes_Microglia_Mdl3_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: Plot graphs for astrocytes/Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Microglia_Mdl1_ppchecks, Astrocytes_Microglia_Mdl2_ppchecks, Astrocytes_Microglia_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe similar patterns on the posterior predictions in the three models. Then, we compare the models using WAIC.

#### 6.6.1.2 We compare the models

```{r}
#| label: WAIC comparison for astroytes/Microglia covariance
#| include: true
#| warning: false
#| message: false
#| results: false

#Perform model comparison
w <- loo_compare(Astrocytes_Microglia_Tess_Fit1, Astrocytes_Microglia_Tess_Fit2, Astrocytes_Microglia_Tess_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Astrocytes_Microglia_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Astrocytes_Microglia_Tess_Fit1", "Astrocytes_Microglia_Tess_Fit2", "Astrocytes_Microglia_Tess_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "Astrocytes/Microglia WAIC") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Astrocytes_Microglia_WAIC, "Plots/Astrocytes_Microglia_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")
```

Based on the results, we selected model 3 (Mdl3) with interaction given that is favorable for making further comparisons.

#### 6.6.1.3 Plot model diagnostics

We plot the model diagnostics using functions from the bayesplot packages

```{r}
#| label: Plot model diagnostics  for astrocytes / Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Astrocytes_Microglia_Tess_Fit3)
color_scheme_set("viridis")

Astrocytes_Microglia_Tess_Trace <- mcmc_trace(Astrocytes_Microglia_Tess_Fit3, pars = c("b_MicroglialDensityLow:DPI5D", "b_MicroglialDensityLow:DPI15D", "b_MicroglialDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

ggsave(plot = Astrocytes_Microglia_Tess_Trace, "Plots/Astrocytes_Microglia_Tess_Trace.png", 
       width = 40, 
       height = 10, 
       units = "cm")

# We plot the sample traces
Astrocytes_Microglia_Tess_Trace
```

#### 6.6.1.4 Model summary

We print the summary for *Mdl2* to visualize the estimates and uncertainty. All models satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7**.

```{r}
#| label: Print summary for astrocytes/microglia covariance (Mdl3)
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Microglia_Tess_Fit3)
```

## 6.7 Calculate contrast for astrocytes / microglia covariance

```{r}
#| label: Calculate constrast for astrocytes / microglia covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For astrocytes-microglia covariance
Astrocytes_Microglia_Contrast <- Astrocytes_Microglia_Tess_Fit3%>%
emmeans(~ MicroglialDensity | DPI) %>%
contrast(method = "revpairwise", by = "MicroglialDensity") %>%
gather_emmeans_draws() %>% sample_n(100)


# We calculate difference between 30 and 15 DPI for low
hypothesis(Astrocytes_Microglia_Tess_Fit3, "MicroglialDensityLow:DPI30D >   MicroglialDensityLow: DPI15D", class = "b", seed = 8807)

Astrocytes_Microglia_hypothesis <- Astrocytes_Microglia_Contrast %>%
  filter(contrast == "30D - 15D" & MicroglialDensity == "Low") 

sum(Astrocytes_Microglia_hypothesis$.value > 141) / 600

# We calculate difference between 15 and 5 DPI for high
hypothesis(Astrocytes_Microglia_Tess_Fit3, "MicroglialDensityHigh:DPI30D >   MicroglialDensityHigh: DPI15D", class = "b", seed = 8807)

Astrocytes_Microglia_hypothesis <- Astrocytes_Microglia_Contrast %>%
  filter(contrast == "30D - 15D" & MicroglialDensity == "High") 

sum(Astrocytes_Microglia_hypothesis$.value < - 141) / 600

```

## 6.8 Visualize estimates and uncertainty for astrocytes microglia covariance

We generate the graphs showing uncertainty in the estimates and contrast.

```{r}
#| label: Create contrats graphs for astrocytes / microglia covariance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Astrocytes_Microglia_Contrast_Sub <- Astrocytes_Microglia_Contrast[
  (Astrocytes_Microglia_Contrast$contrast=="30D - 5D"|
  Astrocytes_Microglia_Contrast$contrast=="30D - 15D"|
   Astrocytes_Microglia_Contrast$contrast=="15D - 5D"),]
   

Astrocytes_Microglia_Contrast_Sub$contrast <- factor(Astrocytes_Microglia_Contrast_Sub$contrast, levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Astrocytes_Microglia_Contrast_Fig1 <- Astrocytes_Microglia_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 141))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-141, 141), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  ggtitle("Astrocytes / Microglia covariance") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-500, 500), 
                     breaks=seq(-500,500, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ MicroglialDensity, ncol = 1)
  
ggsave(plot = Astrocytes_Microglia_Contrast_Fig1, "Plots/Astrocytes_Microglia_Tess_Patch.png", width = 12, height = 12, units = "cm")

```

## 6.9 Plot Tesselations for astrocytes / microglia covariance

```{r}
#| label: Plot tesselations for astrocytes / microglia covariance
#| include: true
#| warning: false
#| message: false


# Mouse 33, 5 DPI
png("Plots/Astrocytes_Microglia_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Microglia_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "") 
plot(PointPatterns_5x$Astrocytes$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
     
dev.off()

# Mouse 04, 15 DPI
png("Plots/Astrocytes_Microglia_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "") 
plot(PointPatterns_5x$Astrocytes$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()

# Mouse 05, 30 DPI
png("Plots/Astrocytes_Microglia_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "") 
plot(PointPatterns_5x$Astrocytes$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
dev.off()
```

## 6.10 Influence of microglia in astrocyte allocation

### 6.10.1 Fit the models with superimpoed brains for astrocytes/microglia covariance

```{r}
#| label: Fit models for astrocytes-microglia covariance superimposed (mppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 5D
Astrocytes_Microglia_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ Iba1_Intensity_5D)

# For 15D
Astrocytes_Microglia_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ Iba1_Intensity_15D)

# For 30D
Astrocytes_Microglia_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ Iba1_Intensity_30D)
```

### 6.10.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: Print summary for astrocytes-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Microglia_Covariance_5D
Astrocytes_Microglia_Covariance_15D
Astrocytes_Microglia_Covariance_30D
```

### 6.10.3 Calculate the influence

```{r}
#| label: Calculate influence for astrocyte-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Microglia_Covariance_Influence_5D <- dfbetas(Astrocytes_Microglia_Covariance_5D)

# For 15 DPI
Astrocytes_Microglia_Covariance_Influence_15D <- dfbetas(Astrocytes_Microglia_Covariance_15D)

# For 30 DPI
Astrocytes_Microglia_Covariance_Influence_30D <- dfbetas(Astrocytes_Microglia_Covariance_30D)
```

### 6.10.4 Plot the influence

We plot the influence as shown in the supplementary figure 6A.

```{r}
#| label: Plot influence for astrocyte-microglia covariance (ppm)
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Astrocyte_Influence_colourmap <- colourmap(heat.colors(12), range = c(-0.001, 0.001))

# For 5 DPI
plot(Astrocytes_Microglia_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Microglia influence 5D")

# For 15 DPI
plot(Astrocytes_Microglia_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Microglia influence 15D")

# For 30 DPI
plot(Astrocytes_Microglia_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "Astrocytes-Microglia influence 30D")

```

# 7. Centroids/Distance measurements

## 7.1 Create restar layers

### 7.1.1 For astrocytes Create raster layers (per brain) for astrocytes

```{r}
#Create raster layers

# For 5 DPI
PointPatterns_5x_5D$Astrocytes_Dens2 <- with(PointPatterns_5x_5D, density(Astrocytes, sigma= 0.3))

PointPatterns_5x_5D$Astrocytes_Raster <- with(PointPatterns_5x_5D, raster(Astrocytes_Dens2))

PointPatterns_5x_5D$Astrocytes_High <- with(PointPatterns_5x_5D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))


# FOr 15 DPI
PointPatterns_5x_15D$Astrocytes_Dens2 <- with(PointPatterns_5x_15D, density(Astrocytes, sigma= 0.3))

PointPatterns_5x_15D$Astrocytes_Raster <- with(PointPatterns_5x_15D, raster(Astrocytes_Dens2))

PointPatterns_5x_15D$Astrocytes_High <- with(PointPatterns_5x_15D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))


# For 30 DPI
PointPatterns_5x_30D$Astrocytes_Dens2 <- with(PointPatterns_5x_30D, density(Astrocytes, sigma= 0.3))

PointPatterns_5x_30D$Astrocytes_Raster <- with(PointPatterns_5x_30D, raster(Astrocytes_Dens2))

PointPatterns_5x_30D$Astrocytes_High <- with(PointPatterns_5x_30D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))
```

### 7.1.2 Create raster layers (per brain) for Microglia

```{r}
#Create raster layers

# For 5 DPI
PointPatterns_5x_5D$Microglia_Dens2 <- with(PointPatterns_5x_5D, density(Microglia, sigma= 0.3))

PointPatterns_5x_5D$Microglia_Raster <- with(PointPatterns_5x_5D, raster(Microglia_Dens2))

PointPatterns_5x_5D$Microglia_High <- with(PointPatterns_5x_5D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))


# FOr 15 DPI
PointPatterns_5x_15D$Microglia_Dens2 <- with(PointPatterns_5x_15D, density(Microglia, sigma= 0.3))

PointPatterns_5x_15D$Microglia_Raster <- with(PointPatterns_5x_15D, raster(Microglia_Dens2))

PointPatterns_5x_15D$Microglia_High <- with(PointPatterns_5x_15D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))


# For 30 DPI
PointPatterns_5x_30D$Microglia_Dens2 <- with(PointPatterns_5x_30D, density(Microglia, sigma= 0.3))

PointPatterns_5x_30D$Microglia_Raster <- with(PointPatterns_5x_30D, raster(Microglia_Dens2))

PointPatterns_5x_30D$Microglia_High <- with(PointPatterns_5x_30D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))
```

## 7.2 Calculte centroids and standart deviations

### 7.2.1 Sd for astrocytes

```{r}

Astrocytes_sd_5D <- with(PointPatterns_5x_5D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))

Astrocytes_sd_15D <- with(PointPatterns_5x_15D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))

Astrocytes_sd_30D <- with(PointPatterns_5x_30D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))

```

### 7.2.2 Calculate centroids for astrocytes

```{r}

# For 5 DPI
Astrocytes_Centroid_5D <- with(PointPatterns_5x_5D, colMeans(Astrocytes_High))
Astrocytes_Centroid_5D  <- as.data.frame(Astrocytes_Centroid_5D )
Astrocytes_Centroid_5D  <- Astrocytes_Centroid_5D [,1:2]
Astrocytes_Centroid_5D <- cbind(Astrocytes_Centroid_5D, Astrocytes_sd_5D)
names(Astrocytes_Centroid_5D)[3] <- "sd"

Astrocytes_Centroid_5D <- cbind(Astrocytes_Centroid_5D, DPI = rep("5D", nrow(Astrocytes_Centroid_5D)))

# For 15 DPI
Astrocytes_Centroid_15D <- with(PointPatterns_5x_15D, colMeans(Astrocytes_High))
Astrocytes_Centroid_15D  <- as.data.frame(Astrocytes_Centroid_15D )
Astrocytes_Centroid_15D  <- Astrocytes_Centroid_15D [,1:2]
Astrocytes_Centroid_15D <- cbind(Astrocytes_Centroid_15D, Astrocytes_sd_15D)
names(Astrocytes_Centroid_15D)[3] <- "sd"

Astrocytes_Centroid_15D <- cbind(Astrocytes_Centroid_15D, DPI = rep("15D", nrow(Astrocytes_Centroid_15D)))

# For 30 DPI
Astrocytes_Centroid_30D <- with(PointPatterns_5x_30D, colMeans(Astrocytes_High))
Astrocytes_Centroid_30D  <- as.data.frame(Astrocytes_Centroid_30D )
Astrocytes_Centroid_30D  <- Astrocytes_Centroid_30D [,1:2]
Astrocytes_Centroid_30D <- cbind(Astrocytes_Centroid_30D, Astrocytes_sd_30D)
names(Astrocytes_Centroid_30D)[3] <- "sd"

Astrocytes_Centroid_30D <- cbind(Astrocytes_Centroid_30D, DPI = rep("30D", nrow(Astrocytes_Centroid_30D)))

# Bind data tables
Astrocytes_Centroid <- rbind (Astrocytes_Centroid_5D, Astrocytes_Centroid_15D, Astrocytes_Centroid_30D)

# Create cell factor
Astrocytes_Centroid <- cbind(Astrocytes_Centroid, Cell = rep("Astrocytes", nrow(Astrocytes_Centroid)))
```

### 7.2.3 Calculte standart deviations for Microglia

```{r}

Microglia_sd_5D <- with(PointPatterns_5x_5D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))

Microglia_sd_15D <- with(PointPatterns_5x_15D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))

Microglia_sd_30D <- with(PointPatterns_5x_30D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))

```

### 7.2.4 Calculate centroids for microglia

```{r}

# For 5 DPI
Microglia_Centroid_5D <- with(PointPatterns_5x_5D, colMeans(Microglia_High))
Microglia_Centroid_5D  <- as.data.frame(Microglia_Centroid_5D )
Microglia_Centroid_5D  <- Microglia_Centroid_5D [,1:2]
Microglia_Centroid_5D <- cbind(Microglia_Centroid_5D, Microglia_sd_5D)
names(Microglia_Centroid_5D)[3] <- "sd"

Microglia_Centroid_5D <- cbind(Microglia_Centroid_5D, DPI = rep("5D", nrow(Microglia_Centroid_5D)))

# For 15 DPI
Microglia_Centroid_15D <- with(PointPatterns_5x_15D, colMeans(Microglia_High))
Microglia_Centroid_15D  <- as.data.frame(Microglia_Centroid_15D )
Microglia_Centroid_15D  <- Microglia_Centroid_15D [,1:2]
Microglia_Centroid_15D <- cbind(Microglia_Centroid_15D, Microglia_sd_15D)
names(Microglia_Centroid_15D)[3] <- "sd"

Microglia_Centroid_15D <- cbind(Microglia_Centroid_15D, DPI = rep("15D", nrow(Microglia_Centroid_15D)))

# For 30 DPI
Microglia_Centroid_30D <- with(PointPatterns_5x_30D, colMeans(Microglia_High))
Microglia_Centroid_30D  <- as.data.frame(Microglia_Centroid_30D )
Microglia_Centroid_30D  <- Microglia_Centroid_30D [,1:2]
Microglia_Centroid_30D <- cbind(Microglia_Centroid_30D, Microglia_sd_30D)
names(Microglia_Centroid_30D)[3] <- "sd"

Microglia_Centroid_30D <- cbind(Microglia_Centroid_30D, DPI = rep("30D", nrow(Microglia_Centroid_30D)))

# Bind data tables
Microglia_Centroid <- rbind (Microglia_Centroid_5D, Microglia_Centroid_15D, Microglia_Centroid_30D)

# Create cell factor
Microglia_Centroid <- cbind(Microglia_Centroid, Cell = rep("Microglia", nrow(Microglia_Centroid)))
```

## 7.3 Plot raw Centroids

```{r}
# Bind astrocytes and microglia data sets
Scar_Centroid <- rbind (Astrocytes_Centroid, Microglia_Centroid)
Scar_Centroid$DPI <- factor(Scar_Centroid$DPI, levels = c("5D", "15D", "30D"))
Scar_Centroid$Cell <- factor(Scar_Centroid$Cell, levels = c("Astrocytes", "Microglia"))

Scar_Centroid_summary <- aggregate(Scar_Centroid[, c("x", "y")], by = Scar_Centroid[, c("DPI", "Cell")], mean)

Scar_Centroid_fig <- ggplot(Scar_Centroid, aes (x=x, y=y, color = Cell, fill = Cell)) + 
  geom_point() +
  geom_point (data=Scar_Centroid_summary, aes(x=x, y=y, shape = Cell), size = 5, color = "black" ) +

stat_ellipse(type = "norm", level = 0.80, geom = "polygon", aes(fill = Cell), alpha = 0.1) +
 scale_fill_manual(values = c("blue", "red")) +
scale_color_manual(values = c("blue", "red")) +
  
geom_text(data=Scar_Centroid_summary, aes(label=paste0("(", round(x, 1), ", ", round(y, 1), ")")), color = "black", hjust = c(-0.2, -0.1, 1, 0.1, -0.2, 0.1), vjust = c(-0.2, -0.4, -1, 2, 1, 2) ) +
   
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.7,0.9),
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) +
      
    facet_grid(~DPI)

ggsave(plot = Scar_Centroid_fig, "Plots/Scar_Centroid_fig.png", 
       width = 13, 
       height = 10, 
       units = "cm")

```

## 7.4 Calculate the centroid distance

```{r}
# calculate the distance between the points

dist_fun <- function(x1, y1, x2, y2) {
  sqrt((x2 - x1)^2 + (y2 - y1)^2)
}

Scar_Centroid_Wide <- cbind (Astrocytes_Centroid, Microglia_Centroid)
Scar_Centroid_Wide <- Scar_Centroid_Wide[,c(1:4,6:8)]
colnames(Scar_Centroid_Wide) <- c("xA", "yA","sdA", "DPI", "xM", "yM", "sdM")
Scar_Centroid_Wide$DPI <- factor(Scar_Centroid_Wide$DPI, levels = c("5D", "15D", "30D"))

# Apply the function to each row of the data frames
Scar_Centroid_Wide$Distance_Microglia <- mapply(dist_fun, Scar_Centroid_Wide$xA, Scar_Centroid_Wide$yA, Scar_Centroid_Wide$xM, Scar_Centroid_Wide$yM)
```

### 7.4.1 Plot the centroid distance

```{r}

Scar_Distance_fig <- ggplot(Scar_Centroid_Wide, aes(x = xA, y = yA)) +
  geom_point(color = "blue") +
  geom_point(data = Scar_Centroid_Wide, aes(x = xM, y = yM), color = "red" ) +
  
  geom_segment(aes(x = xA, y = yA, xend = xM, yend = yM),
               color = "black", size = 1) +
  
  scale_y_continuous(name= "x") +
  
  scale_x_continuous(name="y") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.7,0.9),
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) +
      
    facet_grid(~DPI)

ggsave(plot = Scar_Distance_fig , "Plots/Scar_Distance.png", 
       width = 13, 
       height = 10, 
       units = "cm")
 
```

## 7.5 Modeling of Distance

```{r}

Scar_Distance_Mdl1 <- bf(Distance_Microglia ~ 0 + DPI) 

get_prior(Scar_Distance_Mdl1, data = Scar_Centroid_Wide) 

Scar_Distance_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))
                              
Scar_Distance_Fit1 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_Distance_Mdl1,
                          #prior = ScarDistance_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/ScarDistance_Fit1.rds",
                          file_refit = "never")


```

### Calculate contrast

```{r}
Scar_Distance_Contrast <- Scar_Distance_Fit1 %>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(Scar_Distance_Fit1, "DPI15D >   DPI5D", class = "b", seed = 8807)
Scar_Distance_hypothesis <- Scar_Distance_Contrast %>%
  filter(contrast == "15D - 5D")
sum(Scar_Distance_hypothesis$.value > -0.43) / 1000 
```

### 6.11.9 Plot Modeling estimates and uncertainty

```{r}
#| label: Create contrats for astrocytes/microglia distance
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

Scar_Distance_Grid = Scar_Centroid_Wide %>%
  data_grid(DPI)

Scar_Distance_Means = Scar_Distance_Grid %>%
  add_epred_draws(Scar_Distance_Fit1)

Scar_Distance_Preds = Scar_Distance_Grid %>%
  add_predicted_draws(Scar_Distance_Fit1)

Scar_Distance_fig1 <- Scar_Centroid_Wide %>%
  ggplot(aes(x = Distance_Microglia, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Scar_Distance_Means) +
    stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Scar_Distance_Means) +
  stat_interval(aes(x = .prediction), data = Scar_Distance_Preds) +
  geom_point(data = Scar_Centroid_Wide) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="Distance (astrocytes/microglia) \n",
                     position = "top",
                     limits=c(-1, 3), 
                     breaks=seq(-1,3,1)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 



Scar_Distance_Contrast$contrast <- factor(Scar_Distance_Contrast$contrast, levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Scar_Distance_Contrast_Fig1 <- Scar_Distance_Contrast %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.43))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.43, 0.43), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-1.5, 1), 
                     breaks=seq(-1.5,1, 0.5)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.5),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Scar_Distance_Patch <- Scar_Distance_fig1 +  
                           plot_spacer() + 
                           Scar_Distance_Contrast_Fig1 + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.5))

ggsave(plot = Scar_Distance_Patch, 
       "Plots/Scar_Distance_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")




```

#### Modeling of standart deviation

```{r}
Scar_sd_Mdl1 <- bf(sdA ~ sdM + (sdM|DPI))

get_prior(Scar_sd_Mdl1, data = Scar_Centroid_Wide) 

ScarDistance_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))
                              
Scar_sd_Fit1 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_sd_Mdl1,
                          #prior = ScarDistance_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/Scar_sd_Fit1.rds",
                          file_refit = "never")

library(psych)

random_effects <- ranef(Scar_sd_Fit1 , summary = FALSE)
var_components <- lapply(random_effects, function(x) {
  apply(x, 2, var)
})
total_var <- var(unlist(random_effects))
within_var <- mean(unlist(var_components))
between_var <- total_var - within_var
icc <- between_var / total_var

performance::r2(Scar_sd_Fit1)

```

### Plot standrat deviation

```{r}

Astrocytes_sd_dens <- ggplot(Scar_Centroid_Wide, aes(x = sdA, group = DPI, color = DPI)) +
  geom_density(size = 2) +
  
  ggtitle("Astrocytes") +
  scale_x_continuous(name = "Cell dispersion (sd)") +
  
  scale_y_continuous(name = "Density \n") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= "none",
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Astrocytes_sd_dens

Microglia_sd_dens <- ggplot(Scar_Centroid_Wide, aes(x = sdM, group = DPI, color = DPI)) +
  geom_density(size = 2) +
  
  ggtitle("Microglia") +
  scale_x_continuous(name = "Cell dispersion (sd)") +
  
  scale_y_continuous(name = "Density \n ") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= "bottom",
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Scar_sd_Patch <- Astrocytes_sd_dens +  
                          
                           Microglia_sd_dens +
                           plot_layout(ncol = 2, nrow = 1, widths = c(3, 3), 
                           heights = c(1, 1))

ggsave(plot = Scar_sd_Patch, 
       "Plots/Scar_sd_Patch.png", 
       width = 20, 
       height = 10, 
       units = "cm")


Scar_sd_coef <- coef(Scar_sd_Fit1)

Scar_sd_Posterior <- Scar_sd_Fit1 %>%
spread_draws(`b_Intercept`, r_DPI[DPI,term], `b_sdM`) %>%
pivot_wider(names_from = term, names_glue = "r_{term}",
values_from = r_DPI) %>%
mutate(DPI_intercept = `b_Intercept` + `r_Intercept`,
sdM = b_sdM + r_sdM)

Scar_sd_summary <- Scar_sd_Posterior %>%
dplyr::group_by(DPI) %>%
dplyr::summarize(DPI_intercept = median(DPI_intercept),
sdM = median(sdM))


Scar_sd_line <- ggplot(Scar_Centroid_Wide, aes(x = sdA, y = sdM,  group = DPI, color = DPI)) +
  geom_point(size = 2) +
  geom_abline(data = Scar_sd_summary,
  aes(intercept = DPI_intercept, slope = sdM, color = DPI), size = 2) +
  
  scale_x_continuous(name = "\n Astrocytes (sd)") +
  
  scale_y_continuous(name = "Microglia (sd) \n") +
  
  annotate("text", x = 3, y = 5.2, size = 3.5, colour = "red", parse = TRUE, label = as.character(expression(paste(2.6[(1.7-3.7)], + 0.1 [(-0.2 - 0.4)])))) +
  
  annotate("text", x = 3, y = 4.7, size = 3.5, colour = "darkgreen", parse = TRUE, label = as.character(expression(paste(2.5[(1.5-3.5)], + 0.1 [(-0.2 - 0.4)])))) +
  
    annotate("text", x = 3, y = 4.2, size = 3.5, colour = "blue", parse = TRUE, label = as.character(expression(paste(2.2[(1.5-2.9)], + 0.09 [(-0.1 - 0.3)])))) +

  theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.8),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=11),
      legend.text = element_text(colour="black", size=11)
      ) 

ggsave(plot = Scar_sd_line, 
       "Plots/Scar_sd_line.png", 
       width = 10, 
       height = 7, 
       units = "cm")

```

### 6.11.1 Create densities and raster layers for astrocytes

```{r}
#| label: Create densities and raster layers for astrocytes
#| include: true
#| warning: false
#| message: false

# Create densities
Astrocytes_Density_5D <- density(Gfap_Superimposed_5x_5D, sigma= 0.3)
Astrocytes_Density_15D <- density(Gfap_Superimposed_5x_15D, sigma= 0.3)
Astrocytes_Density_30D <- density(Gfap_Superimposed_5x_30D, sigma= 0.3)

# Create raster layers
Astrocytes_Raster_5D <- raster(Astrocytes_Density_5D)
Astrocytes_Raster_15D <- raster(Astrocytes_Density_15D)
Astrocytes_Raster_30D <- raster(Astrocytes_Density_30D)

# Convert raster to points and extract high density
Astrocytes_Scar_5D <- rasterToPoints(Astrocytes_Raster_5D, fun=function(x){x>250})
Astrocytes_Scar_5D <- Astrocytes_Scar_5D[,1:2]

Astrocytes_Scar_15D <- rasterToPoints(Astrocytes_Raster_15D, fun=function(x){x>250})
Astrocytes_Scar_15D <- Astrocytes_Scar_15D[,1:2]

Astrocytes_Scar_30D <- rasterToPoints(Astrocytes_Raster_30D, fun=function(x){x>250})
Astrocytes_Scar_30D <- Astrocytes_Scar_30D[,1:2]


#Calculate mean center of mass and standart deviation
Astrocytes_Scar_Center_5D <- apply(Astrocytes_Scar_5D, 2, mean)
# standard distance
Astrocytes_Scar_sd_5D <- sqrt(sum((Astrocytes_Scar_5D[,1] - Astrocytes_Scar_Center_5D[1])^2 + (Astrocytes_Scar_5D[,2] - Astrocytes_Scar_Center_5D[2])^2) / nrow(Astrocytes_Scar_5D))

Astrocytes_Scar_Center_15D <- apply(Astrocytes_Scar_15D, 2, mean)
# standard distance
Astrocytes_Scar_sd_15D <- sqrt(sum((Astrocytes_Scar_15D[,1] - Astrocytes_Scar_Center_15D[1])^2 + (Astrocytes_Scar_15D[,2] - Astrocytes_Scar_Center_15D[2])^2) / nrow(Astrocytes_Scar_15D))

Astrocytes_Scar_Center_30D <- apply(Astrocytes_Scar_30D, 2, mean)
# standard distance
Astrocytes_Scar_sd_30D <- sqrt(sum((Astrocytes_Scar_30D[,1] - Astrocytes_Scar_Center_30D[1])^2 + (Astrocytes_Scar_30D[,2] - Astrocytes_Scar_Center_30D[2])^2) / nrow(Astrocytes_Scar_30D))


```

### 6.11.2 Create densities and raster layers for Microglia

```{r}
#| label: Create densities and raster layers for Microglia
#| include: true
#| warning: false
#| message: false

# Create densities
Microglia_Density_5D <- density(Iba1_Superimposed_5x_5D, sigma= 0.2)
Microglia_Density_15D <- density(Iba1_Superimposed_5x_15D, sigma= 0.2)
Microglia_Density_30D <- density(Iba1_Superimposed_5x_30D, sigma= 0.2)

# Create raster layers
Microglia_Raster_5D <- raster(Microglia_Density_5D)
Microglia_Raster_15D <- raster(Microglia_Density_15D)
Microglia_Raster_30D <- raster(Microglia_Density_30D)

# Convert raster to points and extract high density
Microglia_Scar_5D <- rasterToPoints(Microglia_Raster_5D, fun=function(x){x>250})
Microglia_Scar_5D <- Microglia_Scar_5D[,1:2]

Microglia_Scar_15D <- rasterToPoints(Microglia_Raster_15D, fun=function(x){x>250})
Microglia_Scar_15D <- Microglia_Scar_15D[,1:2]

Microglia_Scar_30D <- rasterToPoints(Microglia_Raster_30D, fun=function(x){x>250})
Microglia_Scar_30D <- Microglia_Scar_30D[,1:2]


#Calculate mean center of mass and standart deviation
Microglia_Scar_Center_5D <- apply(Microglia_Scar_5D, 2, mean)
# standard distance
Microglia_Scar_sd_5D <- sqrt(sum((Microglia_Scar_5D[,1] - Microglia_Scar_Center_5D[1])^2 + (Microglia_Scar_5D[,2] - Microglia_Scar_Center_5D[2])^2) / nrow(Microglia_Scar_5D))

Microglia_Scar_Center_15D <- apply(Microglia_Scar_15D, 2, mean)
# standard distance
Microglia_Scar_sd_15D <- sqrt(sum((Microglia_Scar_15D[,1] - Microglia_Scar_Center_15D[1])^2 + (Microglia_Scar_15D[,2] - Microglia_Scar_Center_15D[2])^2) / nrow(Microglia_Scar_15D))

Microglia_Scar_Center_30D <- apply(Microglia_Scar_30D, 2, mean)
# standard distance
Microglia_Scar_sd_30D <- sqrt(sum((Microglia_Scar_30D[,1] - Microglia_Scar_Center_30D[1])^2 + (Microglia_Scar_30D[,2] - Microglia_Scar_Center_30D[2])^2) / nrow(Microglia_Scar_30D))


```

### 6.11.3 Plor raster layers

```{r}
#| label: Plot raster layers for astroytes and microglia
#| include: true
#| warning: false
#| message: false

# For 5 DPI
plot(Astrocytes_Raster_5D, col = Raster_colourmap )
points(Microglia_Scar_5D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_5D[1] + Astrocytes_Scar_sd_5D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_5D[2] + Astrocytes_Scar_sd_5D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_5D[1] + Microglia_Scar_sd_5D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_5D[2] + Microglia_Scar_sd_5D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)


# For 15 DPI
plot(Astrocytes_Raster_15D)
points(Microglia_Scar_15D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_15D[1] + Astrocytes_Scar_sd_15D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_15D[2] + Astrocytes_Scar_sd_15D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_15D[1] + Microglia_Scar_sd_15D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_15D[2] + Microglia_Scar_sd_15D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)


# For 30 DPI
plot(Astrocytes_Raster_30D)
points(Microglia_Scar_30D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_30D[1] + Astrocytes_Scar_sd_30D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_30D[2] + Astrocytes_Scar_sd_30D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_30D[1] + Microglia_Scar_sd_30D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_30D[2] + Microglia_Scar_sd_30D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)

plot(PointPatterns_5x_30D$Astrocytes_Raster$`113`)

```

### 6.11.4 Plor scar distance

Here we calculate the distance between coordinates using the function distm for the geosphere package

```{r}
#| label: Plot scar distance for astrocytes and microglia
#| include: true
#| warning: false
#| message: false

# calculate the distance between the points
Scar_Distance_5D <- sqrt(sum((Astrocytes_Scar_Center_5D - Microglia_Scar_Center_5D)^2))

Scar_Distance_15D <- sqrt(sum((Astrocytes_Scar_Center_15D - Microglia_Scar_Center_15D)^2))

Scar_Distance_30D <- sqrt(sum((Astrocytes_Scar_Center_30D - Microglia_Scar_Center_30D)^2))

# plot the two points and the distance between them

png("Plots/Scar_Distance.png", width = 600, height = 400)
par(mar=c(6,8,2,2))
plot(0, 0, xlim = c(-6, -3),
     ylim = c(-7, -4), 
     type = "n", 
     xlab = "", 
     ylab = "", 
     lwd = 6,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-6, -3, 1), labels = c("-6", "-5", "-4", "-3"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-7, -4, 1), labels = c("-7","-6", "-5", "-4"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "y (mm)", mgp = c(5, 1, 0), cex.lab = 3)


points(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2], Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2], lwd = 5, col = "green")
text(-5.5, -4.7, cex = 2, paste0("Dist = ", round(Scar_Distance_5D, 2), " mm"))

# Plot 15 D

points(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2], Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2], lwd = 5, col = "green")
text(-5.4, -5.7, cex = 2, paste0("Dist = ", round(Scar_Distance_15D, 2), "mm"))

# Plot 30D

points(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2], Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2], lwd = 5, col = "green")
text(-4.5, -6.5, cex = 2, paste0("Dist = ", round(Scar_Distance_30D, 2), "mm"))

dev.off()


# Plor the sdantard deviantios

# Add some values to the data frame
Astrocytes_sd <- c(2.52, 2.09, 1.86)
Microglia_sd <- c(2.05, 1.51, 0.89)
DPI <- c("5D", "15D", "30D")

Scar_sd <- cbind(Astrocytes_sd, Microglia_sd, DPI)
Scar_sd <- as.data.frame(Scar_sd)
Scar_sd$Astrocytes_sd <- as.numeric(Scar_sd$Astrocytes_sd)
Scar_sd$Microglia_sd <- as.numeric(Scar_sd$Microglia_sd)
Scar_sd$DPI <- as.factor(Scar_sd$DPI)

ggplot(Scar_sd , aes(x = Astrocytes_sd, y = Microglia_sd, color = DPI)) +
         geom_point() +
  geom_smooth(method = lm, se = FALSE)
 
plot(Astrocytes_sd ~ Microglia_sd, data = Scar_sd)
abline(xx )

ggplotRegression(lm(Astrocytes_sd ~ Microglia_sd, data = Scar_sd))

xx <- lm(Astrocytes_sd ~ Microglia_sd, data =Scar_sd)

```

# 8. Analysis of intralesional areas

We have analyzed cell allocation assuming that their intensity is related (or is a function) of a covariate (neuronal or microglial allocation). We can perform a non-parametric estimation of a function revealing how the intensity of the point pattern of interest depends on a defined covariate. This estimation is performed using the `rhohat` function from `spatstat`. The result of `rhohat` is an object representing the estimated function ρˆ(z) against covariate values z, accompanied by 95% confidence bands [@spatstat]. We performed the same procedures described above for the covariate pairs of interest (astrocytes-neurons, microglia-neurons, astrocytes-microglia) Using the `Point_Patterns_10x` hyperframe.

## 8.1 Load and subset the 10x hyperframes

We load a **Hyperframes R-object** containing the point patterns and density kernels. The `Point_Patterns_10x` object contains cell in the whole ischemic hemisphere (as shown in supplementary figure 1).

```{r}
#| label: Subset the PointPattern_10x data frame per time point
#| include: true
#| warning: false
#| message: false

PointPatterns_10x <- readRDS("Hyperframes/PointPatterns_10x.rds")

# We exclude 0 DPI
PointPatterns_10x <- PointPatterns_10x[PointPatterns_10x$DPI != "0D",]

PointPatterns_10x$DPI <- factor(PointPatterns_10x$DPI , levels = c("5D", "15D", "30D")) 

# Add distance maps for microglia and neurons before subset
PointPatterns_10x$Microglia_Dist <- with(PointPatterns_10x, distfun(Microglia))
PointPatterns_10x$Neurons_Dist <- with(PointPatterns_10x, distfun(Neurons))

PointPatterns_10x_5D <- subset(PointPatterns_10x, DPI=="5D", select = 1:13) 
PointPatterns_10x_15D <- subset(PointPatterns_10x, DPI=="15D", select = 1:13) 
PointPatterns_10x_30D <- subset(PointPatterns_10x, DPI=="30D", select = 1:13)
```

## 8.2 Analysis of astrocytes / microglia (distance maps)

### 8.2.1 Plot reference distance maps

```{r}
#| label: Plot representative images of distance for astrocytes-microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For astrocytes
Distance_colourmap1 <- colourmap(topo.colors(256), range = c(0, 0.12))
Distance_colourmap2 <- colourmap(topo.colors(256), range = c(0, 0.025))

plot(PointPatterns_10x_5D$Microglia_Dist$`121`, main = "Microglia (distfun) 5D", col = Distance_colourmap1)
plot(PointPatterns_10x_5D$Astrocytes$`121`, add = TRUE, pch = 16, cex= 0.4, col = "white")

plot(PointPatterns_10x_15D$Microglia_Dist$`13`, main = "Microglia (distfun) 15D", col = Distance_colourmap2)
plot(PointPatterns_10x_15D$Astrocytes$`13`, add = TRUE, pch = 16, cex= 0.4, col = "white")

plot(PointPatterns_10x_30D$Microglia_Dist$`14`, main = "Microglia (distfun) 30D", col = Distance_colourmap2)
plot(PointPatterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.4, col = "white")

```

### 8.2.2 Relative distribution (rhohat) for astrocytes in microglial regions

We pass the `rhohat` function to each of the DPIs. We set up do.CI=FALSE to avoid the calculation of coefficient intervals. This metric will be obtained by pooling of all images per time point with the `pool` function. The `pool` function allows the estimation of a single graphical summary per time point, reflecting the data variability.

```{r}
#| label: Calculate rhohat for astrocytes/microglia distance
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Microglia_Dist_5D <- with(PointPatterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_5D <- pool(Astrocytes_Microglia_Dist_5D)

# For 15 DPI
Astrocytes_Microglia_Dist_15D <- with(PointPatterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_15D <- pool(Astrocytes_Microglia_Dist_15D)

# For 30 DPI
Astrocytes_Microglia_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_30D <- pool(Astrocytes_Microglia_Dist_30D)
```

### 8.2.3 Plot the rhohat

We plot the calculated rhohat

```{r}
#| label: Plot rhohat for astrocytes-Microglia covariance
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 15
#| fig-height: 4


# For 5D
par(mfrow=c(1,3))
par(mar=c(5,7,0.5,0.5)+2)
plot(Astrocytes_Microglia_Dist_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c("0",  "3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 8000, 2000), labels = c("0","2000", "4000", "6000", "8000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

# For 15D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_Dist_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(4000, 13000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

# For 30D
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_Microglia_Dist_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 10000, 3000), labels = c(expression("4x10"^3), expression("6x10"^3), expression("9x10"^3), expression("1.2x10"^4)), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 3000), labels = c("0","3000", "6000", "9000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Microglia (inten)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)


```

### 8.2.4 Save rhohat figures

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save rhohat for astrocytes-Microglia covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Microglia_Dist_10x_5D.png", width = 600, height = 500)
par(mar=c(7,9,2,2))
plot(Astrocytes_Microglia_Dist_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 5000, 1000), labels = c("0","1000", "2000", "3000", "4000", "5000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(7, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_Microglia_Dist_10x_15D.png", width = 600, height = 500)
par(mar=c(7,10,2,2))
plot(Astrocytes_Microglia_Dist_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 12000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 12000, 3000), labels = c("0","3000", "6000", "9000", "12000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)


dev.off()

png("Plots/Astrocytes_Microglia_Dist_10x_30D.png", width = 600, height = 500)
par(mar=c(7,10,2,2))
plot(Astrocytes_Microglia_Dist_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 20000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.035, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 20000, 5000), labels = c("0","5000", "10000", "15000", "20000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to microglia (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()

```

### 8.2.5 Fit a mppm model

```{r}
#| label: Fit mppm model for astrocytes/microglia distance
#| include: false
#| warning: false
#| message: false

Astrocytes_Microglia_Dist_Fit <- mppm(Astrocytes ~ Microglia_Dist, random = ~ Microglia_Dist|DPI, data = PointPatterns_10x)

```

## 8.3 Analysis of astrocytes / neurons and microglia / neurons at 30 DPI

### 8.3.1 Plot reference distance maps

```{r}
#| label: Plot representative images of distance for astrocytes / neuronas and microglia / neurons at 30 DPI.
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

Neurons_Distmap <- colourmap(topo.colors(256), range = c(0, 0.35))

plot(PointPatterns_10x_30D$Neurons_Dist$`14`, main = "Microglia (distfun) 30D", col = Neurons_Distmap)
plot(PointPatterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.4, col = "black")
plot(PointPatterns_10x_30D$Microglia$`14`, add = TRUE, pch = 16, cex= 0.4, col = "white")
```

### 8.3.2 Relative distribution (rhohat) for astrocytes in microglial regions

```{r}
#| label: Calculate rhohat for astrocytes/neurons microglia/neurons ditance at 30 DPI
#| include: true
#| warning: false
#| message: false


# For astrocytes
Astrocytes_Neurons_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_Dist_30D <- pool(Astrocytes_Neurons_Dist_30D)

# For microglia
Microglia_Neurons_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_Dist_30D <- pool(Microglia_Neurons_Dist_30D)



# For astrocytes
Astrocytes_X_10x_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_X_10x_30D <- pool(Astrocytes_X_10x_30D)

# For microglia
Microglia_X_10x_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_X_10x_30D <- pool(Microglia_X_10x_30D)

```

### 8.3.4 Plot the rhohat

Now we plot the figures using the R-base graphic system. The argument `shade` allows the conversion of higher and lowers estimate lines to a shadowed region.

```{r}
#| label: Plot rhohat for astrocytes/neurons and microglia/neurons distance at 30 DPI
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5



```

### 8.3.5 Save rhohat figures for distance

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save rhohat for astrocytes-neurons covariance
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_Neurons_Dist_10x_30D.png", width = 600, height = 500)
par(mar=c(6,10,2,2))
plot(Astrocytes_Neurons_Dist_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Neurons (intensity)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()



png("Plots/Microglia_Neurons_Dist_10x_30D.png", width = 600, height = 500)
par(mar=c(6,10,2,2))
plot(Microglia_Neurons_Dist_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to neurons (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()
```

### 8.3.6 Save rhohat figures for x coordinates

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save rhohat for astrocytes and microglia x coordinates 
#| include: false
#| warning: false
#| message: false

png("Plots/Astrocytes_X_10x_30D.png", width = 600, height = 500)
par(mar=c(6,10,2,2))
plot(Astrocytes_X_10x_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 2000), labels = c("0","2000", "4000", "6000", "8000", "10000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x coordinates (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(astrocytes)", mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()



png("Plots/Microglia_X_10x_30D.png", width = 600, height = 500)
par(mar=c(6,10,2,2))
plot(Microglia_X_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 2000), labels = c("0","2000", "4000", "6000", "8000", "10000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x coordinates (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "p(microglia)", mgp = c(8, 1, 0), cex.lab = 3)

dev.off()
```

### 8.3.7 Fit a mppm model for astrocytes and microglia

```{r}
#| label: Fit mppm model for astrocytes/microglia x axis
#| include: false
#| warning: false
#| message: false

Astrocytes_X_10x_Fit <- mppm(Astrocytes ~ "x", data = PointPatterns_10x_30D)

Microglia_X_10x_Fit <- mppm(Microglia ~ "x", data = PointPatterns_10x_30D)


Astrocytes_Neurons_10x_Fit <- mppm(Astrocytes ~ Neurons_Dens, data = PointPatterns_10x_30D)

Microglia_Neurons_10x_Fit <- mppm(Microglia ~ Neurons_Dens, data = PointPatterns_10x_30D)


```

# 9. Interaction/correlation within point patterns

After evaluating point pattern allocation in reference to covariants, we are interested in assessing whether each point pattern exhibit interpoint dependence. In spatial point pattern analysis this is referred as interaction or correlation [@spatstat]. We evaluated spatial correlation in point pattern using the **L-function**, a zero-centered transformation of the **K-function**, which allows to determine whether a point pattern is random, clustered, or regularly spaced. The K-function can be defined as "the cumulative average number of data points lying within a distance *r* of a typical data point, corrected for edge effects, and standardized by dividing by the intensity" [@spatstat, p. 204].

## 8.1 Calculate L function for astrocytes

We calculated an L-inhomogeneous function using the `linhom` function from `spatstat`, assuming that our point patterns are inhomogeneous. Given that our imaging procedure comprises all cells of interest in the lesioned hemisphere, we considered the **isotropic correction** to be more useful than the border correction given that with do not expect more interacting cells outside the observation window. With the following procedure, a new *LInhom* column in generated in the `Point_Patterns_5x` hyperframe, which we pool latter to obtain estimates per time point.

```{r}
#| label: Calculate interaction L-function for astrocytes and microglia
#| include: false
#| warning: false
#| message: false

# For astrocytes

PointPatterns_10x$AstrocytesLInhom <- with (PointPatterns_10x, Linhom(Astrocytes, correction = "isotropic"))
Astrocytes_Lsplit <- split(PointPatterns_10x$AstrocytesLInhom, PointPatterns_10x$DPI)
Astrocytes_LPool <- anylapply(Astrocytes_Lsplit, pool)

```

### 8.1.2 Plot L-functions for astrocytes

We plot the L-functions (.fv objects) using the r-base graphic system. Lower and higher 95% CI are displayed as a shadowed region.

```{r}
#| label: Plot L-function for astrocytes
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 5 DPI
par(mar=c(5,8,2,2))
plot(Astrocytes_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.02, 0),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.0", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.03, 0.01, 0.01), labels = c("-0.03","-0.02", "-0.01", "0", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.005, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.0", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.005, 0.001, 0.001), labels = c("-0.005","-0.004", "-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Astrocytes_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.005, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.0", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.005, 0.001, 0.001), labels = c("-0.005","-0.004", "-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

```

### 8.1.3 Save L-function for astrocytes

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save L-function for astrocytes
#| include: false
#| warning: false
#| message: false


png("Plots/Astrocytes_LFunction_5D.png", width = 600, height = 500)
par(mar=c(7,10,2,2))
plot(Astrocytes_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.02, 0),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.03, 0.01, 0.01), labels = c("-0.03","-0.02", "-0.01", "0", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_LFunction_15D.png", width = 600, height = 500)
par(mar=c(7,12,2,2))
plot(Astrocytes_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
      shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Astrocytes_LFunction_30D.png", width = 600, height = 500)
par(mar=c(7,12,2,2))
plot(Astrocytes_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
      shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()
```

### 8.2.3 Perform permutation test for astrocytes

```{r}
#| label: Permutation test for astrocytes
#| include: false
#| warning: false
#| message: false

Astrocytes_Permutation <- studpermu.test(PointPatterns_10x, summaryfunction = Lest, use.Tbar = TRUE, Astrocytes ~ DPI)

png("Plots/Astrocytes_Permutation.png", width = 600, height = 500)
par(mar=c(5,8,2,2))
plot(Astrocytes_Permutation,
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     cex.legend = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 0.08),
     ylim=c(0, 0.15),
     lwd = 4,
     legend=TRUE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.08, 0.02), labels = c("0", "0.02", "0.04", "0.06", "0.08"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 0.15, 0.03), labels = c("0","0.3", "0.6", "0.9", "0.12", "0.15"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L (r)"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()
     

```

## 8.2 Calculate L function for microglia

```{r}
#| label: Calculate L-function for microglia
#| include: true
#| warning: false
#| message: false


PointPatterns_10x$MicrogliaLInhom <- with (PointPatterns_10x, Linhom(Microglia, correction = "isotropic"))
Microglia_Lsplit <- split(PointPatterns_10x$MicrogliaLInhom, PointPatterns_10x$DPI)
Microglia_LPool <- anylapply(Microglia_Lsplit, pool)

```

### 8.2.1 Plot L-function for for microglia

As done for astrocytes, we plot the rhohat for microglia

```{r}
#| label: Plot L-function for microglia
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


# For 0 DPI
par(mfrow=c(1,4))
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`0D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.1, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.1, 0.04, 0.04), labels = c("-0.1","-0.06", "-0.02", "0.02"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 


# For 5 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 15 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)


axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)


title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)


# For 30 DPI
par(mar=c(5,8,0.5,0.5)+2)
plot(Microglia_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlab = "",
     ylab = "",
     xlim=c(0, 1),
     ylim=c(-0.04, 0.04),
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 1, 0.3), labels = c("0", "0.3", "0.6", "0.9"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.04, 0.04, 0.02), labels = c("-0.04","-0.02", "0", "0.02", "0.04"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3)
```

### 8.2.2 Save L-function for Microglia

We save the displayed graphs (code not shown in htlm rendering)

```{r}
#| label: Save L-function for microglia
#| include: false
#| warning: false
#| message: false


png("Plots/Microglia_LFunction_5D.png", width = 600, height = 500)
par(mar=c(7,10,2,2))
plot(Microglia_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.02, 0),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.03, 0.01, 0.01), labels = c("-0.03","-0.02", "-0.01", "0", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_LFunction_15D.png", width = 600, height = 500)
par(mar=c(7,12,2,2))
plot(Microglia_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()


png("Plots/Microglia_LFunction_30D.png", width = 600, height = 500)
par(mar=c(7,12,2,2))
plot(Microglia_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()

```

### 8.2.3 Perform permutation test for microglia

```{r}
#| label: Permutation test for microglia
#| include: false
#| warning: false
#| message: false

Microglia_Permutation <- studpermu.test(PointPatterns_10x, summaryfunction = Lest, use.Tbar = TRUE, Microglia ~ DPI)

```

## 8.3 Create stienen maps for astrocytes and microglia

First, we create stienen maps of the evaluated 10x images for visualization porpuses. Ploting of the images is avoided in the rendered .htlm.Representative images are dispayed in **Figure 6C-D** of the main research article.

```{r}
#| label: Plot Stienen maps for astrocytes and microglia
#| include: false
#| warning: false
#| message: false

# We set a different scale for 0 DPI given the wide distance of the cells at this stage

Stienen_colmap <- colourmap(topo.colors(250), range=c(0,0.05))
Stienen_symap <- symbolmap(size=function(x) x/1, bg=Stienen_colmap, range=c(0,0.05))


# We plot for astrocytes 
with (PointPatterns_10x_5D, stienen (Astrocytes, symap=Stienen_symap))
with (PointPatterns_10x_15D, stienen (Astrocytes, symap=Stienen_symap))
with (PointPatterns_10x_30D, stienen (Astrocytes, symap=Stienen_symap))


# We plot for microglia

with (PointPatterns_10x_5D, stienen (Microglia, symap=Stienen_symap))
with (PointPatterns_10x_15D, stienen (Microglia, symap=Stienen_symap))
with (PointPatterns_10x_30D, stienen (Microglia, symap=Stienen_symap))
```

### References

::: {#refs}
:::
