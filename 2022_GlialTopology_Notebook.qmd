---
title: "Dissecting glial scar formation by spatial point pattern and topological data analysis"
subtitle: "Supplementary data analysis notebook"
date-format: full
author: 
  - name: "Daniel Manrique-Castano"
    orcid: 0000-0002-1912-1764
    degrees:
      - PhD
    affiliation: 
      - name: Univerisity Laval 
        department: Psychiatry and Neuroscience
        group: Laboratory of neurovascular interactions 
note: "GitHub: https://daniel-manrique.github.io/"

keywords: 
  - Point patterns analysis (PPA)
  - Tpological data analysis (TDA)
  - Spatstat
  - Cell covariance
  - Brain injury
  - Bayesian modeling 
  
license: "CC BY"

format:
   pdf: 
    toc: true
    number-sections: true
    colorlinks: true
   html:
    code-fold: true
    embed-resources: true
    toc: true
    toc-depth: 2
    toc-location: left
    theme: spacelab

knitr:
  opts_chunk: 
    warning: false
    message: false

csl: nature-communications.csl
bibliography: references.bib
editor: 
  markdown: 
    wrap: sentence
 
---

This notebook contains the analysis pipeline employed for the article "Dissecting glial scar formation by spatial point pattern and topological data analysis" published in XXX. This notebook allows the replication of results and the implementation of point pattern analysis (PPA) in multiple context. If the analysis approach is useful for your own experimental purposes, please cite us:

(L) 

# I. Install and load required packages

Install and load the required libraries. Please uncomment (erase #) in the 'install.packages' line if installation is required.

## Install required Packages

```{r}
#| label: Install_Packages
#| include: true
#| warning: false
#| message: false

# To install packcages uncomment the following line

#install.packages(c("ggplot2","dpylr", "ggridges", "raincloudplots", "cowplot", "data.table", "ggrepel", "sjPlot", "bayesplot", "reshape2", "purrr", "tidyr", "brms", "emmeans", "modelr", "modelsummary", "plyr", "pacthwork", "spatstat", "ggdist", "ggpubr", "bayesplot", "RandomFieldsUtils", "RandomFields", "gt", "gtsummary","bayestestR"))

#library(devtools)
#install_github ("cran/RandomFields")
```

## Load required packages

Load the libraries required for script execution every time a new R-session is started. Load also `R_rainclouds` and `summarySE.R` functions [@allen2021] available on Github (make sure are in the workng directory).

```{r}
#| label: Load_Packages
#| include: true
#| warning: false
#| message: false

library(ggplot2)
library(ggridges)
library(dplyr)
library(sjPlot)
library(ggrepel)
library(reshape2)
library(purrr)
library(tidyr)
library(gt)
library(gtsummary)
library(modelsummary)
library(tibble)
library(brms)
library(emmeans)
library(modelr)
library(bayestestR)
library(tidybayes)
library(plyr)
library(patchwork)
library(spatstat)
library(data.table)
library(cowplot)
library(geosphere)
library(ggdist)
library(readr)
library(ggpubr)
library(raster)
library(bayesplot)
library(RandomFieldsUtils)
library(RandomFields)

# The following functions are available on the github site. Please change the root directory if required
source("R_Functions/R_rainclouds.R")
source("R_Functions/summarySE.R")
```

## Functions

### Plotting

```{r}
Plot_theme <- theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 2,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 
```

# 1. Process data and generate point patterns

## 1.1 Process annotations files

We performed automated cell detection using QuPath [@bankhead2017a]. The software generates `_annotations.tsv` files containing the summary of detected cells per project (brain). These files are located in folders inside the `QupathProjects_5x` folder available in Zenodo (XXX). Download it and place it it the working directory.

Here we merge all the `_annotations.tsv`files to create a summary .csv file for all brains. Different scripts are generated for GFAP and IBA1/NeuN detection, as the latter contain additional cell classifiers from QuPath.

### 1.1.1 Annotations files for GFAP+ cells

```{r}
#| label: 5x_Anotations_GFAP
#| include: true
#| warning: false
#| message: false

append_annotations <- function(base_path, brain_name, results_path) {
  
  Gfap_csv_path <- paste0(results_path, "/5x_Gfap_AnnotationsSummary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/Gfap/")
  process_annotation(results_path = Gfap_csv_path, Annotations_Path)
  
}

process_annotation <- function(results_path, path) {
  
  print (path)
  
  Annotations <- list.files(path = path, pattern = "annotations.tsv", full.names = TRUE) %>% 
    lapply(read_tsv) %>%                              
    bind_rows
 
   print(Annotations)
  
  Annotations <- as.data.frame(Annotations)
  names(Annotations) <- NULL
  
  write.table(Annotations, results_path, append = TRUE, sep=",")
}

basePath <- "QupathProjects_5x"
resultsPath <- "DataTables"

Gfap_csv_path <- paste0(resultsPath, "/5x_Gfap_AnnotationsSummary.csv")

Annotations_Header <- c("Image",	"Name",	"Class",	"Parent",	"ROI",	"Centroid X ?m",	"Centroid Y ?m",	"ID",	"Parent ID",	"Side",	"Num Detections",	"Area ?m^2",	"Perimeter ?m")

df_header <- data.frame(matrix(ncol = 13, nrow = 0))
names(df_header) <- Annotations_Header

write.csv(df_header, Gfap_csv_path)

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)

for (brain in brains){
  append_annotations(basePath, brain, resultsPath)
}
```

### 1.1.1 Annotations files for IBA1+ and NeuN+ cells

We perform the same procedure for IBA1 and NeuN

```{r}
#| label: 5x_Anotations_Iba1/NeuN
#| include: true
#| warning: false
#| message: false


append_annotations <- function(base_path, brain_name, results_path) {
  
  Iba1_csv_path <- paste0(results_path, "/5x_Iba1_AnnotationsSummary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/Iba1/")
  process_annotation(results_path = Iba1_csv_path, Annotations_Path)
  
  NeuN_csv_path <- paste0(results_path, "/5x_NeuN_AnnotationsSummary.csv")
  Annotations_Path <- paste0(base_path, "/", brain_name, "/NeuN/")
  process_annotation(results_path = NeuN_csv_path, Annotations_Path)
}

process_annotation <- function(results_path, path) {
  
  print (path)
  
  Annotations <- list.files(path = path, pattern = "annotations.tsv", full.names = TRUE) %>% 
    lapply(read_tsv) %>%                              
    bind_rows
 
   print(Annotations)
  
  Annotations <- as.data.frame(Annotations)
  names(Annotations) <- NULL
  
  write.table(Annotations, results_path, append = TRUE, sep=",")
}


basePath <- "QupathProjects_5x"
resultsPath <- "DataTables"

Iba1_csv_path <- paste0(resultsPath, "/5x_Iba1_AnnotationsSummary.csv")
NeuN_csv_path <- paste0(resultsPath, "/5x_NeuN_AnnotationsSummary.csv")

Annotations_Header <- c("Image",	"Name",	"Class",	"Parent",	"ROI",	"Centroid X ?m",	"Centroid Y ?m",	"ID",	"Parent ID",	"Side",	"Num Detections",	"Num Negatie", "Num Positive", "Positive %", "Num Positive per mm^2",  "Area ?m^2",	"Perimeter ?m")

df_header <- data.frame(matrix(ncol = 17, nrow = 0))
names(df_header) <- Annotations_Header

write.csv(df_header, Iba1_csv_path)
write.csv(df_header, NeuN_csv_path)

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)


for (brain in brains){
  append_annotations(basePath, brain, resultsPath)
}
```

After executing the previous chunks, three files are located in the `DataTables` folder corresponding to each marker.

## 1.2 Process cell detection files

QuPath also generates `_detections.tsv` files containing the coordinates of individual cells per brain. In the following chunk, we handle the coordinates, clean and subset the data to obtain .csv summaries (per brain) containing relevant information, including cell coordinates. The results are stored in several files in the `ResultsTables/5x_Coordinates` folder.

```{r}
#| label: 5x_Detections
#| include: true
#| warning: false
#| message: false

process_initial_data <- function(Cells_Path, pattern, coordinates_columns, filename, brain_name) {
  
  Cells_Raw <- list.files(path=Cells_Path, pattern = pattern, full.names=TRUE) %>%        # Create object with all .tsv files in directory
    lapply(read_tsv) %>%                              # Store all files in list
    bind_rows                                         # Combine data sets into one data set 
  
  # Convert to data frame
  Cells <- as.data.frame(Cells_Raw) 
  
  # Transform coordinates from mm to microns for adecuate plotting in BrainRender
  Cells$Z <- (Cells[,c(coordinates_columns[[1]])]*1000)
  Cells$X <- (Cells[,c(coordinates_columns[[2]])]*1000)
  Cells$Y <- (Cells[,c(coordinates_columns[[3]])]*1000)
  
  # Subset the date set to keep only relevant columns
  Cells <- subset(Cells, select = c(Image, Name, Parent, Z, X, Y))
  Cells <- Cells[!(Cells$Name=="Negative" | Cells$Name=="Necrosis"),]
  Cells <- Cells %>% sample_frac(.1)
  
  # Extract metadata information from image name
  Cells <- cbind(Cells, do.call(rbind , strsplit(Cells$Image , "[_\\.]"))[,3:5])
  colnames(Cells) <- c( colnames(Cells[1:3]), paste0("New" , 1:3))
  Cells <- cbind(Cells[c(-2,-3)] , Cells[c(2,3)])
  
  # Rename columns
  colnames(Cells) <- c("Image", "Z", "X", "Y", "MouseID", "DPI", "Section", "ObjectID", "Region")
  
  Cells <- subset(Cells, select = c(MouseID, DPI, Region, Section, ObjectID, Z, X, Y))
  
  # Write a .csv file
  write.csv(Cells, filename)
  
  }

process_brain <- function(basePath, resultsPath, path) {
  
  set.seed(88071)
  
  # Load cells data set
  
  Iba1_Path <- paste0(basePath, "/", path, "/Iba1")
  Iba1_Filename <- paste0(resultsPath, "/", path, "_Iba1_Coordinates.csv")
  Iba1 <- process_initial_data(Iba1_Path, "detections.tsv", coordinates_columns = c(46, 47, 48), filename = Iba1_Filename, brain_name = path)
  
  
  Gfap_Path <- paste0(basePath, "/", path, "/Gfap")
  Gfap_Filename <- paste0(resultsPath, "/", path, "_Gfap_Coordinates.csv")
  process_initial_data(Gfap_Path, "detections.tsv", c(46, 47, 48), Gfap_Filename, path)
  
  
  Neun_Path <- paste0(basePath, "/", path, "/NeuN")
  Neun_Filename <- paste0(resultsPath, "/", path, "_NeuN_Coordinates.csv")
  process_initial_data(Neun_Path, "detections.tsv", c(46, 47, 48), Neun_Filename, path)
}

basePath <- "QupathProjects_5x"
resultsPath <- "DataTables/5x_Coordinates"

brains <- list.dirs(basePath, full.names = FALSE, recursive = FALSE)

for (brain in brains){
  process_brain(basePath, resultsPath, brain)
}
```

## 1.3 Generate hyperframes and additional data tables

Now, we retrieve the files located in the `ResultsTables/5x_Coordinates` folder to generate point patterns, density kernels and tessellations, which are stored in a hyperframe. We also generate files containing intensity summaries and cell locations in tessellated images. This features will be explained later in the work flow.

```{r}
#| label: 5x_Hyperframe
#| include: true
#| warning: false
#| message: false

coordinatesPath <- "DataTables/5x_Coordinates"
densityTablesPath <- "DataTables"

CellsIntensity_5x_CSV_Path <- paste0(densityTablesPath, "/5x_CellsIntensity.csv")
CellsIntensity_5x_Header <- c("Brain", "Neurons_Intensity", "Astrocytes_Intensity", "Microglia_Intensity")

Tesselation_CSV_Path <- paste0(densityTablesPath, "/5x_CellsCovariance.csv")
Tesselation_Test_Header <- c("Brain", "AN1", "AN2", "MN1", "MN2", "AM1", "AM2")

# Results to generate
Result_Hyperframe <- NULL

# Functions

add_to_hyperframe <- function (...) {
    if (is.null(Result_Hyperframe)){
      Result_Hyperframe <<- hyperframe(...)
    } else {
      Result_Hyperframe <<- rbind(Result_Hyperframe, hyperframe(...))
    }
}


create_empty_table <- function (path, header) {
  df_header <- data.frame(matrix(ncol = length(header), nrow = 0))
  names(df_header) <- header

  write.csv(df_header, path)
}

create_empty_table(CellsIntensity_5x_CSV_Path, CellsIntensity_5x_Header)
create_empty_table(Tesselation_CSV_Path, Tesselation_Test_Header)


# handle coordinates for correct plotting in R
coordinates_manipulation <- function (Raw_Table) {
  Cell_Coor_X <- Raw_Table$Y
  Cell_Coor_Y <- Raw_Table$X

  ## Bind the vectors, rotate and bind to original table
  Coords <- cbind(Cell_Coor_X, Cell_Coor_Y)
  Coords <- secr::rotate(Coords, 180)
  Coords <- as.data.frame(Coords)
  return(cbind(Raw_Table, Coords))
}

# Cretate a point pattern (PPP) object

create_point_pattern <- function(Subset) {
  # We define the limits of the window according to Neuron coordinates
  xlim <- range(Subset$Cell_Coor_X)
  ylim <- range(Subset$Cell_Coor_Y)

  # Create point pattern for neurons
  Cells_PPP <- with(Subset, ppp(x = Subset$Cell_Coor_X, y = Subset$Cell_Coor_Y, xrange = xlim, yrange = ylim))
  unitname(Cells_PPP)  <- list("mm", "mm", 1.3/1000)
  Cells_PPP <- spatstat.geom::rescale (Cells_PPP)
  
  ## We rescale the unit to obtain measurements in mm2
  return(Cells_PPP)
}

define_convex_hull <- function(Neurons_PPP, Cells_PPP) {
  chull <- convexhull(Neurons_PPP)
  Window(Cells_PPP) <- chull
  return(Cells_PPP)
}


tesselation <- function(Cells_Density) {
  ## We define the quantiles for Neurons
  Cells_Quantiles <- c(0, 20, 150)

  ## We define the cutting spots according to quantiles
  Cells_Cut <- cut(Cells_Density, breaks = Cells_Quantiles, labels = c ("Low", "High"))

  ## We generate the tesselation image
  return(tess(image = Cells_Cut))
}

tesselation_data <- function(Cells_PPP, Cells_Tess) {
  Result <- quadratcount(Cells_PPP, tess = Cells_Tess )
  return(Result)
}

Neurons_Astrocytes_Function_Vector <- c()
Microglia_Neurons_Function_Vector <- c()
Astrocytes_Microglia_Function_Vector <- c()


process_file <- function (basePath, path) {

  Neurons_Raw <- read.csv(file = paste0(basePath, '/', path, '_NeuN_Coordinates.csv'), header = TRUE)
  Astrocytes_Raw <- read.csv(file = paste0(basePath, '/', path, '_Gfap_Coordinates.csv'), header = TRUE)
  Microglia_Raw <- read.csv(file = paste0(basePath, '/', path, '_Iba1_Coordinates.csv'), header = TRUE)

  Neurons <- coordinates_manipulation(Neurons_Raw)
  Astrocytes <- coordinates_manipulation(Astrocytes_Raw)
  Microglia <- coordinates_manipulation(Microglia_Raw)

  # Subset neurons
  Neurons_Subset <- Neurons[(Neurons$Section=="Scene3"),]
  Neurons_Subset <- Neurons_Subset[(Neurons_Subset$Y < 5000),]

  # We subset astrocytes
  Astrocytes_Subset <- Astrocytes[(Astrocytes$Section=="Scene3"),]
  Astrocytes_Subset <- Astrocytes_Subset[(Astrocytes_Subset$Y < 5000),]

  # We subset microglia
  Microglia_Subset <- Microglia[(Microglia$Section=="Scene3"),]
  Microglia_Subset <- Microglia_Subset [(Microglia_Subset$Y < 5000),]

  Neurons_PPP <- create_point_pattern(Neurons_Subset)
  Astrocytes_PPP <- create_point_pattern(Astrocytes_Subset)
  Microglia_PPP <- create_point_pattern(Microglia_Subset)

  Neurons_PPP <- define_convex_hull(Neurons_PPP, Neurons_PPP)
  Astrocytes_PPP <- define_convex_hull(Neurons_PPP, Astrocytes_PPP)
  Microglia_PPP <- define_convex_hull(Neurons_PPP, Microglia_PPP)

  Neurons_Intensity <- summary(Neurons_PPP)$intensity
  Astrocytes_Intensity <- summary(Astrocytes_PPP)$intensity
  Microglia_Intensity <- summary(Microglia_PPP)$intensity

  Intensity_Row <- t(c(path, Neurons_Intensity, Astrocytes_Intensity, Microglia_Intensity))
  write.table(Intensity_Row, CellsIntensity_5x_CSV_Path, append = TRUE, sep=",", col.names = FALSE)

  Microglia_Density <- density(Microglia_PPP, sigma =0.2, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")
  Astrocytes_Density <- density(Astrocytes_PPP, sigma =0.2, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")
  Neurons_Density <- density(Neurons_PPP, sigma =0.3, positive=TRUE, equal.ribbon = TRUE, col = topo.colors, main = "")

  Neurons_Tess <- tesselation(Neurons_Density)
  Astrocytes_Tess <- tesselation(Astrocytes_Density)
  Microglia_Tess <- tesselation(Microglia_Density)

  Astrocytes_in_Neurons <-tesselation_data(Astrocytes_PPP, Neurons_Tess)
  Microglia_in_Neurons <- tesselation_data(Microglia_PPP, Neurons_Tess)
  Astrocytes_in_Microglia <- tesselation_data(Astrocytes_PPP, Microglia_Tess)

  Tesselation_Row <- t(c(path, Astrocytes_in_Neurons, Microglia_in_Neurons, Astrocytes_in_Microglia))
  write.table(Tesselation_Row, Tesselation_CSV_Path, append = TRUE, sep=",", col.names = FALSE)

  Astrocytes_Neurons_Correlation <- ppm(Astrocytes_PPP ~ Neurons_Density)
  Microglia_Neurons_Correlation <- ppm(Microglia_PPP ~ Neurons_Density)
  Astrocytes_Microglia_Correlation <- ppm(Astrocytes_PPP ~ Microglia_Density)

  fragments <- strsplit(path, "_")[[1]]
  len <- length(fragments)
  mouse <- fragments[3]
  dpi <- fragments[4]

  add_to_hyperframe(Neurons = Neurons_PPP, Astrocytes = Astrocytes_PPP, Microglia = Microglia_PPP, Neurons_Dens = Neurons_Density, Astrocytes_Dens = Astrocytes_Density, Microglia_Dens = Microglia_Density, Neurons_Tess = Neurons_Tess, Microglia_Tess = Microglia_Tess, ID = mouse, DPI=dpi, stringsAsFactors=TRUE)
}

csv_files <- list.files(coordinatesPath, full.names = FALSE, recursive = FALSE)

brains <- c()

for (csv in csv_files) {
  fragments <- strsplit(csv, "_")[[1]]
  len <- length(fragments)
  brain_name <- paste(fragments[1:(len-2)], collapse="_")
  brains <- append(brains, brain_name)
}

brains <- unique(brains)

for (brain in brains) {
  process_file(coordinatesPath, brain)
}

saveRDS(Result_Hyperframe, "Hyperframes/5x_PointPatterns.rds")

```

The preceding generates an hyperframe called ``` 5x_``PointPatterns``.rds ``` stored in the hyperframes folder, and two files, 5x\_`CellsCovariance.csv` and 5x\_`CellsIntensity.csv` stored in the `DataTables` folder. With these files we are ready to start data analysis.

# 2. Analysis of cell intensity

We used the `spatstat` R-package [@baddeley2005; @baddeley2015; @spatstat] to convert the xy coordinates of detected cells into point patterns (ppp), using the code in [1.3 Generate hyperframes and additional data tables]. The point patterns were scaled in mm (1.3 mm/1000 px) and stored in the hyperframe. Additionally, we generated .csv files containing the estimated intensity (summary(Cells_PPP)\$intensity) in image #3 of each brain (see supplementary table 1 in the research article).

In the following sections, we handle the 5x\_`CellsIntensity.csv` data frame to perform scientific inference on the spatial intensity of NeuN, GFAP, and IBA1-expressing cells.

## 2.1 Load and prepare the dataset

Here, we load and handle the spatial intensity measurements to produce a tidy data frame.

```{r}
#| label: 5x_Handling_Cellintensity
#| include: true
#| warning: false
#| message: false

# Load raw data table
CellsIntensity_5x_Raw <- read.csv(file = 'DataTables/5x_CellsIntensity.csv', 
                                header = TRUE)

# We subset the relevant columns
CellsIntensity_5x <- subset(CellsIntensity_5x_Raw, select = -c(X))

# Extract metadata from the image name and rename columns
CellsIntensity_5x  <- cbind(CellsIntensity_5x, do.call(rbind , strsplit(CellsIntensity_5x$Brain, "[_\\.]"))[,3:4])
colnames(CellsIntensity_5x) <- c("Brain", "Neurons_Intensity", "Astrocytes_Intensity", "Microglia_Intensity", "MouseID", "DPI")

# We subset the relevant columns
CellsIntensity_5x <- subset(CellsIntensity_5x, select = c(MouseID, DPI, Neurons_Intensity, Astrocytes_Intensity, Microglia_Intensity))

# We convert DPI to a numeric variable (Perform this step if required by the model)
#CellsIntensity_5x$DPI[CellsIntensity_5x$DPI == '0D'] <- '0'
#CellsIntensity_5x$DPI[CellsIntensity_5x$DPI == '5D'] <- '5'
#CellsIntensity_5x$DPI[CellsIntensity_5x$DPI == '15D'] <- '15'
#CellsIntensity_5x$DPI[CellsIntensity_5x$DPI == '30D'] <- '30'
#CellsIntensity_5x$DPI <- as.numeric(CellsIntensity_5x$DPI)

# We set explicitly the factor level for DPI 
CellsIntensity_5x$DPI <- factor(CellsIntensity_5x$DPI, levels = c("0D", "5D", "15D", "30D"))

# We plot the head of the data table to verify the transformation
gt(CellsIntensity_5x)

write.csv(CellsIntensity_5x, "DataTables/5x_CellsIntensity_Post.csv")


```

The data frame contain five columns: MouseId (animal unique identifier), DPI (days post-ischemia), Neurons_intensity (neuronal spatial intensity based on NeuN expression), Astrocytes_intensity (astrocytes spatial intensity based on GFAP expression), and Microglia_intensity (microglia spatial intensity based on IBA1 expression). As we refer in the research article, we are aware that GFAP and IBA1 are expressed by other cell types in the nervous system. However, this fact does not limit our approach. This usable table is also stored as `5x_CellsIntensity_Post.csv`in the DataTables folder.

## 2.2 Exploratory data visualization

We use `geom_density_ridges` [@ggridges] to visualize the data sets. The same graphical parameters are applied to all cell types. Graphs are stored in the `Plots` folder.

### 2.2.1 Visualization for NeuN

```{r}
#| label: 5x_Visualization_NeuN
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

NeuN_Intensity_Ridges <- ggplot(CellsIntensity_5x, 
                               aes(x = Neurons_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "NeuN") +
    
  scale_x_continuous(name="Spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,100,10)) +
  
  scale_y_discrete(name= "DPI",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = NeuN_Intensity_Ridges, "Plots/SpatialIntensity/NeuN_Intensity_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")

NeuN_Intensity_Ridges
```

### 2.2.2 Visualization for GFAP

```{r}
#| label: 5x_Visualization_Gfap
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Gfap_Intensity_Ridges <- ggplot(CellsIntensity_5x, 
                               aes(x = Astrocytes_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "GFAP") +
    
  scale_x_continuous(name="Spatial intensity",
                     limits=c(0, 50), 
                     breaks=seq(0,100,10)) +
  scale_y_discrete(name= " DPI",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = Gfap_Intensity_Ridges, "Plots/SpatialIntensity/Gfap_Intensity_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

### 2.2.3 Visualization for IBA1

```{r}
#| label: 5x_Visualization_Iba1
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)
Iba1_Intensity_Ridges <- ggplot(CellsIntensity_5x, 
                               aes(x = Microglia_Intensity, 
                                   y = DPI, 
                                  group = DPI)) +                               geom_density_ridges(
  quantile_lines = TRUE,
  rel_min_height = 0.01,
  alpha = 0.8, 
  scale = 2,
  jittered_points = TRUE,
  point_alpha = 1, 
  point_size = 3) +
  
  labs(title = "IBA1") +
    
  scale_x_continuous(name="Spatial intensity",
                     limits=c(0, 60), 
                     breaks=seq(0,100,10)) +
  scale_y_discrete(name= " DPI",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=18, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="right",
      legend.direction="vertical",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) 

ggsave(plot = Iba1_Intensity_Ridges, "Plots/SpatialIntensity/Iba1_Intensity_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

### 2.2.4 Plot the spatial intensity raw data

Here we plot the graphs for NeuN, GFAP and IBA1 generated in the previous chunks. These graphs are displayed in supplementary figure 2 of the research article.

```{r}
#| label: 5x_IntensityRidges
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Intensity_Ridges, Gfap_Intensity_Ridges, Iba1_Intensity_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 2.3 Bayesian modeling for cell spatial intensity

Here we employ the `brms` package [@bürkner2017; @bürkner2018; @brms]to perform statistical inference based on parameter estimation and uncertainty. Considering the initial data visualization, we fitted different models using student distributions (robust regression) to reduce the impact of extreme data. We also evaluated heteroskedasticity models to account for different variances in the data. In particular, we set DPI as a predictor and not a groping variable (multilevel model) given that that the control condition (sham animals) does not share information with stroked mice.

We set formulas and fit the models using 4 chains, 5000 iterations (2500 as a warm up) and seed 8807 (important for reproducibility purposes). Given that we have previous information regarding the expected decrease in spatial intensity, we used a weak informative prior to favor the random sampling. The models are saved as .rds objects and become available in the `BayesianModels/CellIntensity` folder. The model is loaded (not refitted) when the .rds file is available. To refit the model, erase the respective file in the output folder.

### 2.3.1 Modeling for neuronal intensity (NeuN)

Here we fir two bayesian models:

-   **NeuNIntensity_5x_Mdl1:** We regress the neuronal intensity (Neurons_Intensity) on DPI, with out the calculation of an intercept (0 +).

$NeuN_{i} = \beta_{1} DPI_{i} + \epsilon_{i}$

This model uses the following user-defined prior:

$\beta \sim Student-t(df = 3, location = 15, scale = 5)$

All other priors are default by `brms`.

-   **NeuNIntensity_5x_Mdl2:** We use the same regression that in `Mdl1`, including a term for heteroskedasticity (sigma) to account for non-constant variance. The model use the same user-defined priors for `Mdl1`and default priors by `brms`.

```{r}
#| label: 5x_Modeling_NeuNIntensity
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a single predictor)
NeuNIntensity_5x_Mdl1 <- bf(Neurons_Intensity ~ 0 + DPI) 

get_prior(NeuNIntensity_5x_Mdl1, data = CellsIntensity_5x) 

NeuNIntensity_5x_Mdl1_Prior <- c(prior(student_t(3, 30, 20), class = b, lb= 0))
                              
NeuNIntensity_5x_Fit1 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = NeuNIntensity_5x_Mdl1,
                          prior = NeuNIntensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuNIntensity_5x_Fit1.rds",
                          file_refit = "never")

NeuNIntensity_5x_Fit1 <- add_criterion(NeuNIntensity_5x_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
NeuNIntensity_5x_Mdl2 <- bf(Neurons_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI)

get_prior(NeuNIntensity_5x_Mdl2, data = CellsIntensity_5x) 

NeuNIntensity_5x_Fit2 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = NeuNIntensity_5x_Mdl2,
                          prior = NeuNIntensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/NeuNIntensity_5x_Fit2.rds",
                          file_refit = "never")

NeuNIntensity_5x_Fit2 <- add_criterion(NeuNIntensity_5x_Fit2, c("loo", "waic", "bayes_R2"))
```

### 2.3.2 Modeling for Astrocyte intensity (GFAP)

We perform the same procedure for GFAP and later IBA1. We took into consideration using neuronal intensity as an additional predictor. However, this may induce model confounding given that the neuronal spatial intensity can be understood as a post-treatment effect of DPI.For this reason, we fit models with DPI as unique predictor as done for NeuN:

$Gfap_{i} = \beta_{1} DPI_{i} + \epsilon_{i}$

We set the following weak informative prior for `Mdl1` and `Mdl2` for facilitating exploration of the parameter space:

$\beta \sim Student-t(df = 3, location = 30, scale = 20)$

We fitted an additional model (`Mdl3`), having the neuronal intensity (Neurons_Intensity) as unique prediction to see their relation with GFAP following injury.The models uses default `brms` priors.

```{r}
#| label: 5x_Modeling_GfapIntensity
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a predictor)
GfapIntensity_5x_Mdl1 <- bf(Astrocytes_Intensity ~ 0 + DPI) 

get_prior(GfapIntensity_5x_Mdl1, data = CellsIntensity_5x) 

GfapIntensity_5x_Mdl1_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))

GfapIntensity_5x_Fit1 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = GfapIntensity_5x_Mdl1,
                          prior = GfapIntensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/GfapIntensity_5x_Fit1.rds",
                          file_refit = "never")

GfapIntensity_5x_Fit1 <- add_criterion(GfapIntensity_5x_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
GfapIntensity_5x_Mdl2 <- bf(Astrocytes_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI)

get_prior(GfapIntensity_5x_Mdl2, data = CellsIntensity_5x) 

GfapIntensity_5x_Fit2 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = GfapIntensity_5x_Mdl2,
                          prior = GfapIntensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/GfapIntensity_5x_Fit2.rds",
                          file_refit = "never")

GfapIntensity_5x_Fit2 <- add_criterion(GfapIntensity_5x_Fit2, c("loo", "waic", "bayes_R2"))

# Model 3 (Neuronal intensity as a predictor) 
GfapIntensity_5x_Mdl3 <- bf(Astrocytes_Intensity ~ 1 + Neurons_Intensity) 

get_prior(GfapIntensity_5x_Mdl3, data = CellsIntensity_5x) 

GfapIntensity_5x_Fit3 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = GfapIntensity_5x_Mdl3,
                          #prior = GfapIntensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/GfapIntensity_5x_Fit3.rds",
                          file_refit = "never")

GfapIntensity_5x_Fit3 <- add_criterion(GfapIntensity_5x_Fit3, c("loo", "waic", "bayes_R2"))
```

### 2.3.3 Modeling for microglia intensity (IBA1)

We perform the same procedure for IBA1, as done for GFAP.

```{r}
#| label: 5x_Modeling_Iba1Intensity
#| include: true
#| warning: false
#| message: false

# Model 1 (DPI as a predictor)
Iba1Intensity_5x_Mdl1 <- bf(Microglia_Intensity ~ 0 + DPI) 

get_prior(Iba1Intensity_5x_Mdl1, data = CellsIntensity_5x) 

Iba1Intensity_5x_Mdl1_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))

Iba1Intensity_5x_Fit1 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = Iba1Intensity_5x_Mdl1,
                          prior = Iba1Intensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1Intensity_5x_Fit1.rds",
                          file_refit = "never")

Iba1Intensity_5x_Fit1 <- add_criterion(Iba1Intensity_5x_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2 (DPI as a predictor with heteroskedasticity)
Iba1Intensity_5x_Mdl2 <- bf(Microglia_Intensity ~ 0 + DPI,
                          sigma ~ 0 + DPI) 

get_prior(Iba1Intensity_5x_Mdl2, data = CellsIntensity_5x) 

Iba1Intensity_5x_Fit2 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = Iba1Intensity_5x_Mdl2,
                          prior = Iba1Intensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1Intensity_5x_Fit2.rds",
                          file_refit = "never")

Iba1Intensity_5x_Fit2 <- add_criterion(Iba1Intensity_5x_Fit2, c("loo", "waic", "bayes_R2"))

# Model 3 (Neuronal intensity as a predictor) 
Iba1Intensity_5x_Mdl3 <- bf(Microglia_Intensity ~ 1 + Neurons_Intensity)

get_prior(Iba1Intensity_5x_Mdl3, data = CellsIntensity_5x) 

Iba1Intensity_5x_Fit3 <- brm(data = CellsIntensity_5x,
                          family = student,
                          formula = Iba1Intensity_5x_Mdl3,
                          #prior = Iba1Intensity_5x_Mdl1_Prior,
                          chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellIntensity/Iba1Intensity_5x_Fit3.rds",
                          file_refit = "never")

Iba1Intensity_5x_Fit3 <- add_criterion(Iba1Intensity_5x_Fit3, c("loo", "waic", "bayes_R2"))
```

## 2.4 Analysis of fitted models

### 2.4.1 Analysis of neuronal intensity (NeuN) {#analysis-of-neuronal-intensity-neun}

#### 2.4.1.1 Posterior predictive checks for NeuN intensity

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: 5x_PPchecks_NeuNIntensity
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
NeuNIntensity_5x_Mdl1_ppchecks <- brms::pp_check(NeuNIntensity_5x_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="NeuN spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = NeuNIntensity_5x_Mdl1_ppchecks, "Plots/SpatialIntensity/NeuNIntensity_5x_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 2
NeuNIntensity_5x_Mdl2_ppchecks <- brms::pp_check(NeuNIntensity_5x_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI)") +
  
  scale_x_continuous(name="NeuN spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = NeuNIntensity_5x_Mdl2_ppchecks, "Plots/SpatialIntensity/NeuNIntensity_5x_Mdl2_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")
```

Next, we plot the posterior predictive checks

```{r}
#| label: 5x_PPchecksPlot_NeuNIntensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuNIntensity_5x_Mdl1_ppchecks, NeuNIntensity_5x_Mdl2_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe there are no meaningful deviance between the posterior predictions in the two models. Next, we use the Watanabe-Akaike information criterion (WAIC) to evaluate the model predictions [@gelman2013].

#### 2.4.1.2 Model coparison for NeuN intensity

We use the `loo_compare` function from `brms` to compare the fitted models. Then, we plot the estimates using ggplot.

```{r}
#| label: 5x_NeuNIntensity_WAIC
#| include: true
#| warning: false
#| message: false
#| results: false

#Perform model comparison
w <- loo_compare(NeuNIntensity_5x_Fit1, NeuNIntensity_5x_Fit2,
                 criterion = "waic")

# Generate WAIC graph
Neurons_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("NeuNIntensity_5x_Fit1", "NeuNIntensity_5x_Fit2"),
                    labels=c("Fit1", "Fit2")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "NeuN spatial intensity (WAIC)") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Neurons_Inteinsity_WAIC, "Plots/SpatialIntensity/NeuNIntensity_5x_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")

Neurons_Inteinsity_WAIC
```

The results suggest that the two models have a similar performance for making out of sample predictions. The comparison graph is shown in supplementary figure 2.Based on this results, we will go further with Mdl1, which has DPI as a predictor.

#### 2.4.1.3 Plot model MCMC chains

We plot the Mdl1 diagnostics using functions from the `bayesplot` package.

```{r}
#| label: 5x_NeuNIntensity_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(NeuNIntensity_5x_Fit1)
color_scheme_set("viridis")

NeuNIntensity_5x_Trace <- mcmc_trace(NeuNIntensity_5x_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

NeuNIntensity_5x_Trace
```

This shows that the four chains mixed well and explored the same parameter space

#### 2.4.1.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty using the summary and `describe_posterior` function from the `bayestestR` package [@bayestestR]. The model satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) are shown in **supplementary table 5** of the research article.

```{r}
#| label: 5x_NeuNIntensity_Posterior
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuNIntensity_5x_Fit1)

gt(describe_posterior(NeuNIntensity_5x_Fit1))
```

Additionally, we create a .doc file with the main output:

```{r}
#| label: 5x_NeuNIntensity_SaveSummary
#| include: true
#| warning: false
#| message: false
#| results: false

NeuNIntensity_5x_Fit1_Table <- modelsummary(NeuNIntensity_5x_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (NeuNIntensity_5x_Fit1_Table, filename = "Tables/NeuNIntensity_5x_Fit1_Table.tex")
```

### 2.4.2 Analysis of astrocyte intensity (GFAP)

We perform the same procedure described in [2.4.1 Analysis of neuronal intensity (NeuN)](#analysis-of-neuronal-intensity-neun) for astrocytes (GFAP)

#### 2.4.2.1 Posterior predictive checks

```{r}
#| label: 5x_PPchecks_GfapIntensity
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
GfapIntensity_5x_Mdl1_ppchecks <- brms::pp_check(GfapIntensity_5x_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="GFAP spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = GfapIntensity_5x_Mdl1_ppchecks, "Plots/SpatialIntensity/GfapIntensity_5x_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 2
GfapIntensity_5x_Mdl2_ppchecks <- brms::pp_check(GfapIntensity_5x_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI") +
  
  scale_x_continuous(name="GFAP spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = GfapIntensity_5x_Mdl2_ppchecks, "Plots/SpatialIntensity/GfapIntensity_5x_Mdl2_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 3
GfapIntensity_5x_Mdl3_ppchecks <- brms::pp_check(GfapIntensity_5x_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Neuronal intensity as a predictor",
       caption = "Model: Intensity ~ 1 + Neurons_Inten") + 
  
  scale_x_continuous(name="GFAP spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
          
      ) + 
    
    legend_none()  

ggsave(plot = GfapIntensity_5x_Mdl3_ppchecks, "Plots/SpatialIntensity/GfapIntensity_5x_Mdl3_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: 5x_PPchecksPlot_GfapIntensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(GfapIntensity_5x_Mdl1_ppchecks, GfapIntensity_5x_Mdl2_ppchecks, GfapIntensity_5x_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe that Mdl3 shows visible deviations compared to models 1 and 2. To verify this observation we perform model comparison.

#### 2.4.2.2 We compare the models

```{r}
#| label: 5x_GfapIntensity_WAIC
#| include: true
#| warning: false
#| message: false
#| results: false

w <- loo_compare(GfapIntensity_5x_Fit1, GfapIntensity_5x_Fit2, GfapIntensity_5x_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Astrocytes_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("GfapIntensity_5x_Fit1", "GfapIntensity_5x_Fit2", "GfapIntensity_5x_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "GFAP spatial intensity (WAIC)") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = Astrocytes_Inteinsity_WAIC, 
       "Plots/SpatialIntensity/GfapIntensity_5x_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")

```

As implicated by pp_cheks, neuronal intensity is a worst predictor than DPI for astrocytes spatial intensity. Furthermore, similar to models for NeuN, heteroskedasticity does not substantially improve model estimations.

#### 2.4.2.3 Plot model MCMC chains

We plot the model diagnostics

```{r}
#| label: 5x_GfapIntensity_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(GfapIntensity_5x_Fit1)
color_scheme_set("viridis")

GfapIntensity_5x_Trace <- mcmc_trace(GfapIntensity_5x_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

GfapIntensity_5x_Trace 
```

There are not visible issues with the chains.

#### 2.4.2.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty.The model satisfactorily reached a chain convergence (Rhat = 1) and achieved an effective sample size (Bulk_ESS). The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 5** of the research article.

```{r}
#| label: 5x_GfapIntensity_Posterior
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(GfapIntensity_5x_Fit1)

gt(describe_posterior(GfapIntensity_5x_Fit1))
```

We create a .doc files with the main output:

```{r}
#| label: 5x_GfapIntensity_SaveSummary
#| include: true
#| warning: false
#| message: false
#| results: false

GfapIntensity_5x_Fit1_Table <- modelsummary(GfapIntensity_5x_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (GfapIntensity_5x_Fit1_Table, filename = "Tables/GfapIntensity_5x_Fit1_Table.tex")
```

#### 2.4.2.5 NeuN-GFAP correlation

Regression of Gfap intensity on Neuronal intensity suggest a negative correlation between both variables as shown below:

```{r}
#| label: 5x_NeuN-Gfap_correlation
#| include: true
#| warning: false
#| message: false
#| results: false

# We convert the estimates to a data frame
NeuN_Gfap_Correlation_5x <- 
  conditional_effects(GfapIntensity_5x_Fit3)

NeuN_Gfap_Correlation_5xdf <- 
  as.data.frame(NeuN_Gfap_Correlation_5x$Neurons_Intensity)

NeuN_Gfap_Correlation_5x_pred <- 
  CellsIntensity_5x %>%
  data_grid(Neurons_Intensity, n = 5) %>%
  add_predicted_draws(
    GfapIntensity_5x_Fit3, 
    ndraws = 20)

NeuN_Gfap_Correlation_5x_DPI_Fig <-  
  ggplot(
    data  = NeuN_Gfap_Correlation_5xdf,
    aes(x = Neurons_Intensity,
        y = estimate__)
    )+
  geom_jitter(
    data  = NeuN_Gfap_Correlation_5x_pred, 
    aes(x = Neurons_Intensity, 
        y = .prediction), 
    width = 0.5, 
    color = "navyblue", 
    shape = 1, 
    size  = 1.5, 
    alpha = 1/3)+
  geom_jitter(
    data  = CellsIntensity_5x, 
    aes(x = Neurons_Intensity, y=Astrocytes_Intensity),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  geom_ribbon(
    aes(ymin  = lower__, 
        ymax  = upper__),
        alpha = 0.2)+
  geom_line(
    size     = 1,
    position = position_dodge(0.05), 
    color    = "blue") +
  scale_y_continuous(name = "GFAP spatial intensity") +
  scale_x_continuous(name="NeuN spatial intensity") +
  Plot_theme

ggsave(
  plot     = NeuN_Gfap_Correlation_5x_DPI_Fig, 
  filename = "Plots/SpatialIntensity/NeuN_Gfap_Correlation_5x_DPI_Fig.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

NeuN_Gfap_Correlation_5x_DPI_Fig

```

The preliminary visualization of this relationship suggests the feasibility of a more in-depth study with point pattern analysis tools, as conducted in [4. Point process models (ppm) for cell covariance](#point-process-models-ppm-for-cell-covariance).

### 2.4.3 Analysis of microglia intensity (IBA1)

#### 2.4.3.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: 5x_PPchecks_Iba1Intensity
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Iba1Intensity_5x_Mdl1_ppchecks <- brms::pp_check(Iba1Intensity_5x_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Intensity ~ 0 + DPI") +
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Iba1Intensity_5x_Mdl1_ppchecks, "Plots/SpatialIntensity/Iba1Intensity_5x_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 2
Iba1Intensity_5x_Mdl2_ppchecks <- brms::pp_check(Iba1Intensity_5x_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "DPI as a predictor with heteroskedasticity",
       caption = "Model: Intensity ~ 0 + DPI, sigma ~ 0 + DPI") +
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Iba1Intensity_5x_Mdl2_ppchecks, "Plots/SpatialIntensity/Iba1Intensity_5x_Mdl2_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 3
Iba1Intensity_5x_Mdl3_ppchecks <- brms::pp_check(Iba1Intensity_5x_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "Neuronal intensity as a predictor",
       caption = "Model: Intensity ~ 1 + Neurons_Inten") + 
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     limits=c(0, 70), 
                     breaks=seq(0,70,10)) +
  
  scale_y_continuous(limits=c(0, 0.08), 
                     breaks=seq(0,0.08,0.02)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
          
      ) + 
    
    legend_none()  

ggsave(plot = Iba1Intensity_5x_Mdl3_ppchecks, "Plots/SpatialIntensity/Iba1Intensity_5x_Mdl3_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")
```

We plot the posterior predictive checks:

```{r}
#| label: 5x_PPchecksPlot_Iba1Intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Iba1Intensity_5x_Mdl1_ppchecks, Iba1Intensity_5x_Mdl2_ppchecks, Iba1Intensity_5x_Mdl3_ppchecks, rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We observe that model three shows a different performance compared to model 1 and 2. We perform model comparison based on WAIC scores to evaluate the out-of-sample accuracy as done for NeuN and GFAP.

#### 2.4.3.2 We compare the models

```{r}
#| label: 5x_Iba1Intensity_WAIC
#| include: true
#| warning: false
#| message: false
#| results: false

w <- loo_compare(Iba1Intensity_5x_Fit1, Iba1Intensity_5x_Fit2, Iba1Intensity_5x_Fit3,
                 criterion = "waic")

# Generate WAIC graph
Microglia_Inteinsity_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Iba1Intensity_5x_Fit1", "Iba1Intensity_5x_Fit2", "Iba1Intensity_5x_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
  
  scale_y_continuous (breaks=seq(150,250,20))+
 
  labs(x = NULL, y = NULL,
       title = "Microglia intensity (WAIC)") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1)) +

      coord_flip() 

# Save WAIC graph
ggsave(plot = Microglia_Inteinsity_WAIC, 
       "Plots/SpatialIntensity/Iba1Inteinsity_5x_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")
```

Similar to GFAP, the neuronal intensity does not improve out-of-sample accuracy. Interestingly, the difference between model 1 and 2 for IBA1 is slightly higher than for GFAP. Nonetheless, the divergence is not substantial to claim that including heteroskedasticity improved model predictions.

#### 2.4.3.3 Plot model MCMC chains

We plot the model diagnostics with `bayesplot`

```{r}
#| label: 5x_Iba1Intensity_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Iba1Intensity_5x_Fit1)
color_scheme_set("viridis")

Iba1Intensity_5x_Trace <- mcmc_trace(Iba1Intensity_5x_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

Iba1Intensity_5x_Trace
```

#### 2.4.3.4 Model summary

We print the summary for *Mdl1* to visualize the estimates and uncertainty, as done for NeuN and Gfap. The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 5** of the research article.

```{r}
#| label: 5x_Iba1Intensity_Posterior
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Iba1Intensity_5x_Fit1)

gt(describe_posterior(Iba1Intensity_5x_Fit1))
```

We create a .doc files with the main output:

```{r}
#| label: 5x_Iba1Intensity_SaveSummary
#| include: true
#| warning: false
#| message: false
#| results: false

Iba1Intensity_5x_Fit1_Table <- modelsummary(Iba1Intensity_5x_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Iba1Intensity_5x_Fit1_Table, filename = "Tables/Iba1Intensity_5x_Fit1_Table.tex")
```

#### 2.4.3.5 NeuN IBA1 correlation

Regression of Iba1 intensity on Neuronal intensity suggest a negative correlation between both variables as shown below:

```{r}
#| label: 5x_NeuN-Iba1_correlation
#| include: true
#| warning: false
#| message: false
#| results: false

describe_posterior(Iba1Intensity_5x_Fit3)

# We convert the estimates to a data frame
NeuN_Iba1_Correlation_5x <- 
  conditional_effects(Iba1Intensity_5x_Fit3)

NeuN_Iba1_Correlation_5xdf <- 
  as.data.frame(NeuN_Iba1_Correlation_5x$Neurons_Intensity)

NeuN_Iba1_Correlation_5x_pred <- 
  CellsIntensity_5x %>%
  data_grid(Neurons_Intensity, n = 5) %>%
  add_predicted_draws(
    Iba1Intensity_5x_Fit3, 
    ndraws = 20)

NeuN_Iba1_Correlation_5x_DPI_Fig <-  
  ggplot(
    data  = NeuN_Iba1_Correlation_5xdf,
    aes(x = Neurons_Intensity,
        y = estimate__)
    )+
  geom_jitter(
    data  = NeuN_Iba1_Correlation_5x_pred, 
    aes(x = Neurons_Intensity, 
        y = .prediction), 
    width = 0.5, 
    color = "navyblue", 
    shape = 1, 
    size  = 1.5, 
    alpha = 1/3)+
  geom_jitter(
    data  = CellsIntensity_5x, 
    aes(x = Neurons_Intensity, y=Astrocytes_Intensity),
    width = 0.5, 
    color = "black", 
    shape = 18, 
    size  = 2.5, 
    alpha = 2/3) +
  geom_ribbon(
    aes(ymin  = lower__, 
        ymax  = upper__),
        alpha = 0.2)+
  geom_line(
    size     = 1,
    position = position_dodge(0.05), 
    color    = "blue") +
  scale_y_continuous(name = "IBA1 spatial intensity") +
  scale_x_continuous(name="NeuN spatial intensity") +
  Plot_theme

ggsave(
  plot     = NeuN_Iba1_Correlation_5x_DPI_Fig, 
  filename = "Plots/SpatialIntensity/NeuN_Iba1_Correlation_5x_DPI_Fig.png", 
  width    = 9, 
  height   = 9, 
  units    = "cm")

NeuN_Iba1_Correlation_5x_DPI_Fig

```

## 2.5 Calculate contrast between time points

Now, we compute the contrast between time points using the `emmeans` function from the `emmeans` package [@emmeans], and `hypothesis` function from `brms`. We established a region of practical equivalence (ROPE) [@makowski2019] using the residual standard deviation (sigma) as equal to null value for a robust evaluation of time point differences. We calculate the probability of falling within the ROPE using the whole posterior distribution as shown in the following chunk.

### 2.5.1 Contrast for neurons (NeuN)

We calculate contrasts for all time points and then obtain estimates and uncertainty for comparisons of interest.

```{r}
#| label: 5x_NeuNIntensity_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# Calculate contrasts for all time points
NeuNIntensity_5x_Contrast <- NeuNIntensity_5x_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)


# We obtain the estimates for the hypothesis 0 DPI is minor than 5 DPI
hypothesis(NeuNIntensity_5x_Fit1, "DPI0D <   DPI5D", class = "b", seed = 8807)

# We obtain the estimates for the hypothesis 15 DPI is minor than 5 DPI
hypothesis(NeuNIntensity_5x_Fit1, "DPI15D <   DPI5D", class = "b", seed = 8807)

# We obtain the probability of falling within the ROPE for "15D - 5D"
NeuN_hypothesis <- NeuNIntensity_5x_Contrast %>%
  filter(contrast == "15D - 5D")
sum(NeuN_hypothesis$.value > -7) / 1000


hypothesis(NeuNIntensity_5x_Fit1, "DPI30D >   DPI15D", class = "b", seed = 8807)
NeuN_hypothesis <- NeuNIntensity_5x_Contrast %>%
  filter(contrast == "30D - 15D")
sum(NeuN_hypothesis$.value > 7) / 1000 
```

### 2.5.2 Contrast for astrocytes (Gfap)

```{r}
#| label:  5x_GfapIntensity_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

GfapIntensity_5x_Contrast <- GfapIntensity_5x_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(GfapIntensity_5x_Fit1, "DPI30D >   DPI15D", class = "b", seed = 8807)
Gfap_hypothesis <- GfapIntensity_5x_Contrast %>%
  filter(contrast == "30D - 15D")
sum(Gfap_hypothesis$.value > -5) / 1000 


hypothesis(GfapIntensity_5x_Fit1, "DPI30D <   DPI0D", class = "b", seed = 8807)
Gfap_hypothesis <- GfapIntensity_5x_Contrast %>%
  filter(contrast == "30D - 0D")
sum(Gfap_hypothesis$.value < 5) / 1000
```

### 2.5.3 Contrast for microglia (Iba1)

```{r}
#| label: 5x_Iba1Intensity_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Iba1Intensity_5x_Contrast <- Iba1Intensity_5x_Fit1%>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(Iba1Intensity_5x_Fit1, "DPI5D >   DPI0D", class = "b", seed = 8807)
Iba1_hypothesis <- Iba1Intensity_5x_Contrast %>%
  filter(contrast == "5D - 0D")
sum(Iba1_hypothesis$.value < 3) / 1000 

hypothesis(Iba1Intensity_5x_Fit1, "DPI30D >   DPI0D", class = "b", seed = 8807)
Iba1_hypothesis <- Iba1Intensity_5x_Contrast %>%
  filter(contrast == "30D - 0D")
sum(Iba1_hypothesis$.value < 3) / 1000
```

## 2.6 Visualize estimates and uncertainty for cell Intensity

Now, we use `ggdist` [@ggdist]and `patchwork` [@patchwork] packages to create composited graphs showing estimates, uncertainty, and contrast between time points of interest as generated in [2.5 Calculate contrast between time points].

We show estimates as `stat_halfeye` and `stat_interval`, with 0.5, 0.8, 0.95 predictive intervals (Brewer scale). The contrasts of interest display the ROPE as a shaded (blue) area. We perform the same visualization strategy for neurons, astrocytes and microglia.

### 2.6.1 Visualization of NeuN

```{r}
#| label: 5x_NeuNIntensity_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = CellsIntensity_5x %>%
  data_grid(DPI)

NeuNIntensity_5x_Means = Intensity_Grid %>%
  add_epred_draws(NeuNIntensity_5x_Fit1)

NeuNIntensity_5x_Preds = Intensity_Grid %>%
  add_predicted_draws(NeuNIntensity_5x_Fit1)

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

NeuNIntensity_5x_Graph <- CellsIntensity_5x %>%
  ggplot(aes(x = Neurons_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = NeuNIntensity_5x_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = NeuNIntensity_5x_Preds) +
  
  geom_point(data = CellsIntensity_5x) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="\n NeuN spatial intensity",
                     position = "top",
                     limits=c(0, 70), 
                     breaks=seq(0,70,20)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


NeuNIntensity_5x_Contrast_Sub <- NeuNIntensity_5x_Contrast[
  (NeuNIntensity_5x_Contrast$contrast=="30D - 0D"|
  NeuNIntensity_5x_Contrast$contrast=="30D - 15D"|
   NeuNIntensity_5x_Contrast$contrast=="15D - 5D" |
   NeuNIntensity_5x_Contrast$contrast=="5D - 0D"),]

NeuNIntensity_5x_Contrast_Sub$contrast <- factor(NeuNIntensity_5x_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
NeuNIntensity_5x_Contrast_Graph <- NeuNIntensity_5x_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 7))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-7, 7), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-30, 30), 
                     breaks=seq(-30,30, 10)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

NeuNIntensity_5x_Patch <- NeuNIntensity_5x_Graph +  
                           plot_spacer() + 
                           NeuNIntensity_5x_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = NeuNIntensity_5x_Patch, 
       "Plots/SpatialIntensity/NeuNIntensity_5x_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

### 2.6.2 Visualization of Gfap

```{r}
#| label: 5x_GfapIntensity_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = CellsIntensity_5x %>%
  data_grid(DPI)

GfapIntensity_5x_Means = Intensity_Grid %>%
  add_epred_draws(GfapIntensity_5x_Fit1)

GfapIntensity_5x_Preds = Intensity_Grid %>%
  add_predicted_draws(GfapIntensity_5x_Fit1)

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

GfapIntensity_5x_Graph <- CellsIntensity_5x %>%
  ggplot(aes(x = Astrocytes_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = GfapIntensity_5x_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = GfapIntensity_5x_Preds) +
  
  geom_point(data = CellsIntensity_5x) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP spatial intensity",
                     position = "top",
                     limits=c(0, 50), 
                     breaks=seq(0,50,10)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


GfapIntensity_5x_Contrast_Sub <- GfapIntensity_5x_Contrast[
  (GfapIntensity_5x_Contrast$contrast=="30D - 0D"|
  GfapIntensity_5x_Contrast$contrast=="30D - 15D"|
   GfapIntensity_5x_Contrast$contrast=="15D - 5D" |
   GfapIntensity_5x_Contrast$contrast=="5D - 0D"),]

GfapIntensity_5x_Contrast_Sub$contrast <- factor(GfapIntensity_5x_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
GfapIntensity_5x_Contrast_Graph <- GfapIntensity_5x_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 5))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-5, 5), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-20, 40), 
                     breaks=seq(-20,40, 10)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

GfapIntensity_5x_Patch <- GfapIntensity_5x_Graph +  
                           plot_spacer() + 
                           GfapIntensity_5x_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = GfapIntensity_5x_Patch, 
       "Plots/SpatialIntensity/GfapIntensity_5x_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

### 2.6.3 Visualization of Iba1

```{r}
#| label: 5x_Iba1Intensity_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false

Intensity_Grid = CellsIntensity_5x %>%
  data_grid(DPI)

Iba1Intensity_5x_Means = Intensity_Grid %>%
  add_epred_draws(Iba1Intensity_5x_Fit1)

Iba1Intensity_5x_Preds = Intensity_Grid %>%
  add_predicted_draws(Iba1Intensity_5x_Fit1)

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = as.character(MouseID))

MousePlot <- c("M04", "M05", "M33", "M43")

CellsIntensity_5x <- CellsIntensity_5x %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Iba1Intensity_5x_Graph <- CellsIntensity_5x %>%
  ggplot(aes(x = Microglia_Intensity, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Iba1Intensity_5x_Means) +
  
  stat_interval(aes(x = .prediction), 
                data = Iba1Intensity_5x_Preds) +
  
  geom_point(data = CellsIntensity_5x) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     position = "top",
                     limits=c(0, 50), 
                     breaks=seq(0,50,10)) +
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                        name="DPI",
                        breaks=c("0D", "5D", "15D", "30D"),
                        labels=c("Control", "5D", "15D", "30D")) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 3.5, hjust = -3.5, vjust = -0.5) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "top",
      legend.position= c(1, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 


Iba1Intensity_5x_Contrast_Sub <- Iba1Intensity_5x_Contrast[
  (Iba1Intensity_5x_Contrast$contrast=="30D - 0D"|
  Iba1Intensity_5x_Contrast$contrast=="30D - 15D"|
   Iba1Intensity_5x_Contrast$contrast=="15D - 5D" |
   Iba1Intensity_5x_Contrast$contrast=="5D - 0D"),]

Iba1Intensity_5x_Contrast_Sub$contrast <- factor(Iba1Intensity_5x_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D", "30D - 0D")) 
              
Iba1Intensity_5x_Contrast_Graph <- Iba1Intensity_5x_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 3))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-3, 3), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI contrast",
                     limits=c(-20, 40), 
                     breaks=seq(-30,40, 20)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +


theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      #legend.position= "bottom",
      legend.position= c(1, 0.8),
      #legend.margin = margin(1, 1, 1, -50),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      )

Iba1Intensity_5x_Patch <- Iba1Intensity_5x_Graph +  
                           plot_spacer() + 
                           Iba1Intensity_5x_Contrast_Graph + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.4))

ggsave(plot = Iba1Intensity_5x_Patch, 
       "Plots/SpatialIntensity/Iba1Intensity_5x_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")
```

And we plot the intensity graphs

```{r}
#| label: Plot composite graphs for cell intensity
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuNIntensity_5x_Patch, GfapIntensity_5x_Patch, Iba1Intensity_5x_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 2.6 Visualize spatial Intensity

In addition, we plot graphs for the density kernels representing the spatial intensity of NeuN, Gfap and Iba1. To do so, we load the hyperframe generated in [1.3 Generate hyperframes and additional data tables]. We name this object `PointPatterns_5x`.

### 2.6.1 Load Point patterns

```{r}
#| label: 5x_LoadHyperframe
#| include: true
#| warning: false
#| message: false

PointPatterns_5x <- readRDS("Hyperframes/PointPatterns_5x.rds")
```

### 2.6.2 Plot density kernels for NeuN

Here, we plot the animals specified by labels in the composited plots from Bayesian estimates.

```{r}
#| label: 5X_NeuN_PlotDensity
#| include: true
#| warning: false
#| message: false

Neurons_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

par(mfrow = c(1,4), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 43, 0 DPI
plot(PointPatterns_5x$Neurons_Dens$`130`, col = Neurons_Colmap, main = "0D", ribbon = FALSE)  

# Mouse 33, 5 DPI
plot(PointPatterns_5x$Neurons_Dens$`121`, col = Neurons_Colmap, main = "5D", ribbon = FALSE) 

# Mouse 04, 15 DPI
plot(PointPatterns_5x$Neurons_Dens$`13`, col = Neurons_Colmap, main = "15D", ribbon = FALSE) 

# Mouse 05, 30 DPI
plot(PointPatterns_5x$Neurons_Dens$`14`, col = Neurons_Colmap, main = "30D", ribbon = FALSE) 

```

### 2.6.3 Plot density kernels for GFAP

```{r}
#| label: 5X_Gfap_PlotDensity
#| include: true
#| warning: false
#| message: false


Astrocytes_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

par(mfrow = c(1,4), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 43, 0 DPI
#png("Plots/Astrocytes_Intensity_0D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`130`, col = Astrocytes_Colmap, main = "0D", ribbon = FALSE)  
#dev.off()

# Mouse 33, 5 DPI
#png("Plots/Astrocytes_Intensity_5D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`121`, col = Astrocytes_Colmap, main = "5D", ribbon = FALSE) 
#dev.off()

# Mouse 04, 15 DPI
#png("Plots/Astrocytes_Intensity_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`13`, col = Astrocytes_Colmap, main = "15D", ribbon = FALSE) 
#dev.off()

# Mouse 05, 30 DPI
#png("Plots/Astrocytes_Intensity_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Astrocytes_Dens$`14`, col = Astrocytes_Colmap, main = "30D", ribbon = FALSE) 
#dev.off()
```

### 2.6.4 Plot density kernels for Iba1

```{r}
#| label: 5X_Iba1_PlotDensity
#| include: true
#| warning: false
#| message: false

Microglia_Colmap <- colourmap(topo.colors(256), range = c(0, 100))

par(mfrow = c(1,4), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 43, 0 DPI
#png("Plots/Microglia_Intensity_0D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`130`, col = Microglia_Colmap, main = "0D", ribbon = FALSE)  
#dev.off()

# Mouse 33, 5 DPI
#png("Plots/Microglia_Intensity_5D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`121`, col = Microglia_Colmap, main = "5D", ribbon = FALSE) 
#dev.off()

# Mouse 04, 15 DPI
#png("Plots/Microglia_Intensity_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`13`, col = Microglia_Colmap, main = "15D", ribbon = FALSE) 
#dev.off()

# Mouse 05, 30 DPI
#png("Plots/Microglia_Intensity_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Dens$`14`, col = Microglia_Colmap, main = "30D", ribbon = FALSE) 
#dev.off()
```

# 3. Analysis of cell ratio (ipsilateral/contralateral)

We used QuPath [@bankhead2017] to quantify the cell number in different brain regions (cortex \[CTX\], cerebral nuclei \[CNU\], midbrin \[MB\], interbrain \[IB\], and fiber tracts) according to the [Allen Reference Atlases](https://atlas.brain-map.org/). Here, we handle the data to obtain the total cell ratio (ipsilateral/contralateral) and cell ratios by cerebral regions. The results are shown in supplementary figure 3.

## 3.1 Load the experimental data

We load the **QuPath-generated annotations file** containing cell detection in different brain regions.

```{r}
#| label: Load data tables
#| include: true
#| warning: false
#| message: false

set.seed(88071)

# 1) Load Qupath-generated annotations file
NeuN_Raw <- read.csv(file = 'DataTables/5x_NeuN_AnnotationsSummary.csv', header = TRUE)
Gfap_Raw <- read.csv(file = 'DataTables/5x_Gfap_AnnotationsSummary.csv', header = TRUE)
Iba1_Raw <- read.csv(file = 'DataTables/5x_Iba1_AnnotationsSummary.csv', header = TRUE)

```

## 3.2 Handle the data tables

We subset the tables to obtain solely the number of cells. We perform a comparable procedure for NeuN, Iba1 and Gfap-positive cells.

```{r}
#| label: Subset relevant columns for cell ratio
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells dataset

## We subset the relevant columns
NeuN <- subset(NeuN_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
NeuN <- cbind(NeuN  , do.call(rbind , strsplit(NeuN$Image , "[_\\.]"))[,3:5])
colnames(NeuN) <- c( colnames(NeuN[1:3]), paste0("Name" , 1:3))
NeuN <- cbind(NeuN[c(-2,-3)] , NeuN[c(2,3)])

## We rename the columns
colnames(NeuN) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
NeuN <- subset(NeuN, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
NeuN$Region <- factor(NeuN$Region)
NeuN$DPI <- factor(NeuN$DPI, levels = c("0D", "5D", "15D", "30D"))
NeuN$Section <- factor(NeuN$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Gfap-positive cells dataset

## We subset the relevant columns
Gfap <- subset(Gfap_Raw, select = c(Image, Class, Num.Detections))

## Extract metadata from the image name to generate required factors for data analysis
Gfap <- cbind(Gfap  , do.call(rbind , strsplit(Gfap$Image , "[_\\.]"))[,3:5])
colnames(Gfap) <- c( colnames(Gfap[1:3]), paste0("Name" , 1:3))
Gfap <- cbind(Gfap[c(-2,-3)] , Gfap[c(2,3)])

## We rename the columns
colnames(Gfap) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Gfap <- subset(Gfap, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Gfap$Region <- factor(Gfap$Region)
Gfap$DPI <- factor(Gfap$DPI, levels = c("0D", "5D", "15D", "30D"))
Gfap$Section <- factor(Gfap$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))


# For Iba1-positive cells dataset

## We subset the relevant columns
Iba1 <- subset(Iba1_Raw, select = c(Image, Class, Num.Positive))

## Extract metadata from the image name to generate required factors for data analysis
Iba1 <- cbind(Iba1  , do.call(rbind , strsplit(Iba1$Image , "[_\\.]"))[,3:5])
colnames(Iba1) <- c( colnames(Iba1[1:3]), paste0("Name" , 1:3))
Iba1 <- cbind(Iba1[c(-2,-3)] , Iba1[c(2,3)])

## We rename the columns
colnames(Iba1) <- c("Image", "MouseId", "DPI", "Section", "Region", "Cells")
Iba1 <- subset(Iba1, select = -c(Image))

## Set 'Region' as factor and Order 'DPI' and 'Section' factors for analysis 
Iba1$Region <- factor(Iba1$Region)
Iba1$DPI <- factor(Iba1$DPI, levels = c("0D", "5D", "15D", "30D"))
Iba1$Section <- factor(Iba1$Section, levels = c("Scene1", "Scene2", "Scene3", "Scene4", "Scene5", "Scene6", "Scene7"))
```

We print the head of one of the tables to verify the result:
  
  ```{r}
#| label: Print Iba1 cell ratios table
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Iba1)
```

Now, we summarize the data by hemispheres (ipsilateral and contralateral) to calculate cell ratios. We transform long format data tables into wide format.

```{r}
#| label: Transform to wide format for cell ratios
#| include: true
#| warning: false
#| message: false

NeuN_Wide <- reshape2::dcast(NeuN, MouseId + DPI ~ Section + Region, value.var="Cells")
Gfap_Wide <- reshape2::dcast(Gfap, MouseId + DPI ~ Section + Region, value.var="Cells")
Iba1_Wide <- reshape2::dcast(Iba1, MouseId + DPI ~ Section + Region, value.var="Cells")

```

We print one of the results to verify the transformation:
  
  ```{r}
#| label: Print Gfap table for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: margin

head(Gfap_Wide, c(10, 5))
```

Next, we summarize the information by brain sections as shown in **supplementary table 1** and calculate the respective cell ratios

```{r}
#| label: Summary by section for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(NeuN_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(NeuN_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(NeuN_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(NeuN_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(NeuN_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(NeuN_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(NeuN_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(NeuN_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(NeuN_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(NeuN_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(NeuN_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(NeuN_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(NeuN_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Calculation of cells ratios per brain sections (ipsilateral/Contralateral)

NeuN_Wide$S1_diff <- NeuN_Wide$Scene1_Left_Sum / NeuN_Wide$Scene1_Right_Sum
NeuN_Wide$S2_diff <- NeuN_Wide$Scene2_Left_Sum / NeuN_Wide$Scene2_Right_Sum
NeuN_Wide$S3_diff <- NeuN_Wide$Scene3_Left_Sum / NeuN_Wide$Scene3_Right_Sum
NeuN_Wide$S4_diff <- NeuN_Wide$Scene4_Left_Sum / NeuN_Wide$Scene4_Right_Sum
NeuN_Wide$S5_diff <- NeuN_Wide$Scene5_Left_Sum / NeuN_Wide$Scene5_Right_Sum
NeuN_Wide$S6_diff <- NeuN_Wide$Scene6_Left_Sum / NeuN_Wide$Scene6_Right_Sum
NeuN_Wide$S7_diff <- NeuN_Wide$Scene7_Left_Sum / NeuN_Wide$Scene7_Right_Sum


# For Gfap-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Gfap_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Gfap_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Gfap_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Gfap_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Gfap_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Gfap_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Gfap_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Gfap_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Gfap_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Gfap_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Gfap_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Gfap_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Gfap_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$S1_diff <- Gfap_Wide$Scene1_Left_Sum / Gfap_Wide$Scene1_Right_Sum
Gfap_Wide$S2_diff <- Gfap_Wide$Scene2_Left_Sum / Gfap_Wide$Scene2_Right_Sum
Gfap_Wide$S3_diff <- Gfap_Wide$Scene3_Left_Sum / Gfap_Wide$Scene3_Right_Sum
Gfap_Wide$S4_diff <- Gfap_Wide$Scene4_Left_Sum / Gfap_Wide$Scene4_Right_Sum
Gfap_Wide$S5_diff <- Gfap_Wide$Scene5_Left_Sum / Gfap_Wide$Scene5_Right_Sum
Gfap_Wide$S6_diff <- Gfap_Wide$Scene6_Left_Sum / Gfap_Wide$Scene6_Right_Sum
Gfap_Wide$S7_diff <- Gfap_Wide$Scene7_Left_Sum / Gfap_Wide$Scene7_Right_Sum


# For Iba1-positive cells

## summary per section (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Scene1_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Left")]
setDT(Iba1_Wide)[, Scene1_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene1_Right")]

setDT(Iba1_Wide)[, Scene2_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Left")]
setDT(Iba1_Wide)[, Scene2_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene2_Right")]

setDT(Iba1_Wide)[, Scene3_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Left")]
setDT(Iba1_Wide)[, Scene3_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene3_Right")]

setDT(Iba1_Wide)[, Scene4_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Left")]
setDT(Iba1_Wide)[, Scene4_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene4_Right")]

setDT(Iba1_Wide)[, Scene5_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Left")]
setDT(Iba1_Wide)[, Scene5_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene5_Right")]

setDT(Iba1_Wide)[, Scene6_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Left")]
setDT(Iba1_Wide)[, Scene6_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene6_Right")]

setDT(Iba1_Wide)[, Scene7_Left_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Left")]
setDT(Iba1_Wide)[, Scene7_Right_Sum := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Scene7_Right")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$S1_diff <- Iba1_Wide$Scene1_Left_Sum / Iba1_Wide$Scene1_Right_Sum
Iba1_Wide$S2_diff <- Iba1_Wide$Scene2_Left_Sum / Iba1_Wide$Scene2_Right_Sum
Iba1_Wide$S3_diff <- Iba1_Wide$Scene3_Left_Sum / Iba1_Wide$Scene3_Right_Sum
Iba1_Wide$S4_diff <- Iba1_Wide$Scene4_Left_Sum / Iba1_Wide$Scene4_Right_Sum
Iba1_Wide$S5_diff <- Iba1_Wide$Scene5_Left_Sum / Iba1_Wide$Scene5_Right_Sum
Iba1_Wide$S6_diff <- Iba1_Wide$Scene6_Left_Sum / Iba1_Wide$Scene6_Right_Sum
Iba1_Wide$S7_diff <- Iba1_Wide$Scene7_Left_Sum / Iba1_Wide$Scene7_Right_Sum
```

Next, we summarize the data by brain region and calculate the respective cell ratio

```{r}
#| label: Summary by region for cell ratios
#| include: true
#| warning: false
#| message: false

# For NeuN-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(NeuN_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(NeuN_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(NeuN_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(NeuN_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(NeuN_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(NeuN_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(NeuN_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(NeuN_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(NeuN_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(NeuN_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for NeuN-positive cells
NeuN_Wide$CTX_diff <- NeuN_Wide$Sum_Left_CTX / NeuN_Wide$Sum_Right_CTX
NeuN_Wide$CNU_diff <- NeuN_Wide$Sum_Left_CNU / NeuN_Wide$Sum_Right_CNU
NeuN_Wide$Fiber_diff <- NeuN_Wide$Sum_Left_Fiber / NeuN_Wide$Sum_Right_Fiber
NeuN_Wide$IB_diff <- NeuN_Wide$Sum_Left_IB / NeuN_Wide$Sum_Right_IB
NeuN_Wide$MB_diff <- NeuN_Wide$Sum_Left_MB / NeuN_Wide$Sum_Right_MB


# For Gfap-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Gfap_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Gfap_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Gfap_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Gfap_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Gfap_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Gfap_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Gfap_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Gfap_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Gfap_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Gfap_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Gfap-positive cells
Gfap_Wide$CTX_diff <- Gfap_Wide$Sum_Left_CTX / Gfap_Wide$Sum_Right_CTX
Gfap_Wide$CNU_diff <- Gfap_Wide$Sum_Left_CNU / Gfap_Wide$Sum_Right_CNU
Gfap_Wide$Fiber_diff <- Gfap_Wide$Sum_Left_Fiber / Gfap_Wide$Sum_Right_Fiber
Gfap_Wide$IB_diff <- Gfap_Wide$Sum_Left_IB / Gfap_Wide$Sum_Right_IB
Gfap_Wide$MB_diff <- Gfap_Wide$Sum_Left_MB / Gfap_Wide$Sum_Right_MB


# For Iba1-positive cells

## summary per region (left = ipsilateral / right = conralateral)
setDT(Iba1_Wide)[, Sum_Left_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CTX")]
setDT(Iba1_Wide)[, Sum_Right_CTX := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CTX")]

setDT(Iba1_Wide)[, Sum_Left_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: CNU")]
setDT(Iba1_Wide)[, Sum_Right_CNU := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: CNU")]

setDT(Iba1_Wide)[, Sum_Left_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: fiber tracts")]
setDT(Iba1_Wide)[, Sum_Right_Fiber := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: fiber tracts")]

setDT(Iba1_Wide)[, Sum_Left_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: IB")]
setDT(Iba1_Wide)[, Sum_Right_IB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: IB")]

setDT(Iba1_Wide)[, Sum_Left_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Left: MB")]
setDT(Iba1_Wide)[, Sum_Right_MB := rowSums(.SD, na.rm = TRUE), .SDcols = patterns("Right: MB")]

## Cell ratio per brain section for Iba1-positive cells
Iba1_Wide$CTX_diff <- Iba1_Wide$Sum_Left_CTX / Iba1_Wide$Sum_Right_CTX
Iba1_Wide$CNU_diff <- Iba1_Wide$Sum_Left_CNU / Iba1_Wide$Sum_Right_CNU
Iba1_Wide$Fiber_diff <- Iba1_Wide$Sum_Left_Fiber / Iba1_Wide$Sum_Right_Fiber
Iba1_Wide$IB_diff <- Iba1_Wide$Sum_Left_IB / Iba1_Wide$Sum_Right_IB
Iba1_Wide$MB_diff <- Iba1_Wide$Sum_Left_MB / Iba1_Wide$Sum_Right_MB
```

Finally, we subset the data sets to calculate an hemispheric ratio. In particular, as fiber tracts in the NeuN-positive cells data set are likely a result of small deviations in brain alignment due to brain shrinkage or deformation, we eliminated this region for this cell type.

```{r}

# For NeuN-positive cells

## Eliminate 'fiber tracts' form the data set
NeuN_Wide_Clean <- NeuN_Wide %>% dplyr::select(-contains(c('fiber tracts')))

## Subset and generate summary by hemisphere
NeuN_Regions <- subset(NeuN_Wide_Clean, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff))

## Add column for hemispheric differences
NeuN_Regions$NeuN_Ratio <- rowMeans(NeuN_Regions[,c(3:6)], na.rm = TRUE)


# For Gfap-positive cells

## Subset and generate summary by hemisphere
Gfap_Regions <- subset(Gfap_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Gfap_Regions$Gfap_Ratio <- rowMeans(Gfap_Regions[,c(3:6)], na.rm = TRUE)


# For Iba1-positive cells

## Subset and generate summary by hemisphere
Iba1_Regions <- subset(Iba1_Wide, select = c(MouseId, DPI, CTX_diff, CNU_diff, IB_diff, MB_diff, Fiber_diff))

## Add column for hemispheric differences
Iba1_Regions$Iba1_Ratio <- rowMeans(Iba1_Regions[,c(3:6)], na.rm = TRUE)
```

## 3.3 Plot total cell ratios

### 3.3.1 Total cell ratios for NeuN

We plot the data to perform a preliminary exploration. First, we create ggplot graph objects to plot the data by hemispheres using Ridges plots. We save the objects in the indicated folder using `ggsave`. We perform the same procedure for GFAP and IBA1+ cells.

```{r}
#| label: Create figures for neurons ratio
#| include: true
#| warning: false
#| message: false


NeuN_Hemispheres_Ridges <- ggplot(NeuN_Regions, aes(x = NeuN_Ratio, y = DPI, group = DPI)) +  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
  
  
  
  scale_y_discrete(name= " DPI \n",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="NeuN (ipsilateral / contralateral) ",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.3)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                    name="DPI",
                    breaks=c("0D", "5D", "15D", "30D"),
                    labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                     name="DPI",
                     breaks=c("0D", "5D", "15D", "30D"),
                     labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="right",
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)) 

ggsave(plot = NeuN_Hemispheres_Ridges, "Plots/CellRatio/NeuN_Hemispheres_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")

```

### 3.3.2 Total cell ratios for GFAP

```{r}
#| label: Create figures for astrocytes ratio
#| include: true
#| warning: false
#| message: false


Gfap_Hemispheres_Ridges <- ggplot(Gfap_Regions, 
                                  aes(x = Gfap_Ratio, 
                                      y = DPI, 
                                      group = DPI)) +  
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.5, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
  
  
  
  scale_y_discrete(name= " DPI \n",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP (ipsilateral / contralateral) ",
                     limits=c(0, 7), 
                     breaks=seq(0,7,1)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                    name="DPI",
                    breaks=c("0D", "5D", "15D", "30D"),
                    labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                     name="DPI",
                     breaks=c("0D", "5D", "15D", "30D"),
                     labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="right",
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Gfap_Hemispheres_Ridges, "Plots/CellRatio/Gfap_Hemispheres_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")

```

### 3.3.2 Total cell ratios for IBA1

```{r}
#| label: Create figures for microglia ratio
#| include: true
#| warning: false
#| message: false


Iba1_Hemispheres_Ridges <- ggplot(Iba1_Regions, aes(x = Iba1_Ratio, y = DPI, group = DPI)) + 
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
  
  
  
  scale_y_discrete(name= " DPI \n",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="IBA1 (ipsilateral / contralateral) ",
                     limits=c(-2, 15), 
                     breaks=seq(0,15,2)) +
  
  
  scale_fill_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                    name="DPI",
                    breaks=c("0D", "5D", "15D", "30D"),
                    labels=c("Control", "5", "15D", "30D")) +
  
  
  scale_color_manual(values= c("#27AE60", "#E2102A", "#ECC00F", "#1BBADA"),
                     name="DPI",
                     breaks=c("0D", "5D", "15D", "30D"),
                     labels=c("Control", "5", "15D", "30D")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position="right",
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Iba1_Hemispheres_Ridges, "Plots/CellRatio/Iba1_Hemispheres_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

Next, we plot the objects

```{r}
#| label: plot figures for total cell ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Hemispheres_Ridges, Gfap_Hemispheres_Ridges, Iba1_Hemispheres_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 3.4 Cell ratios by brain regions

We can also plot the data considering each brain region. As done previously, we first generate and save the figures.

### 3.4.1 Cell rations for NeuN

```{r}
#| label: Create figure for neurons ratio per region
#| include: true
#| warning: false
#| message: false

NeuN_Regions_Long <- subset(NeuN_Regions, select = -c(NeuN_Ratio))

NeuN_Regions_Long <-  melt(NeuN_Regions_Long, id.vars = c("MouseId", "DPI"))

names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'variable'] <- 'Region'
names(NeuN_Regions_Long)[names(NeuN_Regions_Long) == 'value'] <- 'Ratio'


NeuN_Regions_Long$Region <- factor(NeuN_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "MB_diff", "IB_diff"))


NeuN_Regions_Long_sumrepdat <- summarySE(NeuN_Regions_Long, measurevar = "Ratio",
                                         groupvars=c("DPI", "Region"))

NeuN_Regions_Rain <- ggplot(NeuN_Regions_Long, 
                            aes(x = Ratio, 
                                y = DPI,
                                Group = DPI,
                                fill = Region)) +
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  
  
  scale_x_continuous(name="NeuN (ipsilateral / contralateral) ",
                     limits=c(0, 2), 
                     breaks=seq(0,2,0.5)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                       labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position=c(0.85, 0.5),
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=10),
    legend.text = element_text(colour="black", size=10)
  )  

ggsave("Plots/CellRatio/NeuN_Regions_Rain.png", 
       width = 12, 
       height = 9, 
       units = "cm")

```

### 3.4.2 Cell rations for GFAP

```{r}
#| label: Create figure for astrocytes ratio per region
#| include: true
#| warning: false
#| message: false

Gfap_Regions_Long <- subset(Gfap_Regions, select = -c(Gfap_Ratio))

Gfap_Regions_Long <-  melt(Gfap_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'variable'] <- 'Region'
names(Gfap_Regions_Long)[names(Gfap_Regions_Long) == 'value'] <- 'Ratio'


Gfap_Regions_Long$Region <- factor(Gfap_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Gfap_Regions_Long_sumrepdat <- summarySE(Gfap_Regions_Long, measurevar = "Ratio",
                                         groupvars=c("DPI", "Region"))

Gfap_Regions_Rain <- ggplot(Gfap_Regions_Long, 
                            aes(x = Ratio, 
                                y = DPI,
                                Group = DPI,
                                fill = Region)) +
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  
  
  scale_x_continuous(name="GFAP (ipsilateral / contralateral) ",
                     limits=c(0, 10), 
                     breaks=seq(0,10,2)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                       labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position=c(0.85, 0.5),
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=10),
    legend.text = element_text(colour="black", size=10)
  )  

ggsave("Plots/CellRatio/Gfap_Regions_Rain.png", 
       width = 12, 
       height = 9, 
       units = "cm")

```

### 3.4.3 Cell rations for IBA1

```{r}
#| label: Create figure for microglia ratio per region
#| include: true
#| warning: false
#| message: false


Iba1_Regions_Long <- subset(Iba1_Regions, select = -c(Iba1_Ratio))

Iba1_Regions_Long <-  melt(Iba1_Regions_Long, id.vars = c("MouseId", "DPI"))

names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'variable'] <- 'Region'
names(Iba1_Regions_Long)[names(Iba1_Regions_Long) == 'value'] <- 'Ratio'


Iba1_Regions_Long$Region <- factor(Iba1_Regions_Long$Region, 
                                   levels = c("CTX_diff", "CNU_diff", "IB_diff", "MB_diff", "Fiber_diff"))


Iba1_Regions_Long_sumrepdat <- summarySE(Iba1_Regions_Long, measurevar = "Ratio",
                                         groupvars=c("DPI", "Region"))

Iba1_Regions_Rain <- ggplot(Iba1_Regions_Long, 
                            aes(x = Ratio, 
                                y = DPI,
                                Group = DPI,
                                fill = Region)) +
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.7, 
    scale = 1,
    jittered_points = TRUE,
    point_alpha = 0.5, 
    point_size = 2) +
  
  
  scale_x_continuous(name="IBA1 (ipsilateral / contralateral) ",
                     limits=c(0, 20), 
                     breaks=seq(0,20,3)) +
  
  
  scale_fill_viridis_d(name= " Region \n",
                       labels = c("Cortex", "Nuclei", "Interebrain", "Midbrain", "Fibers")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=18, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position=c(0.85, 0.5),
    legend.direction="vertical",
    legend.title = element_text(colour="black", face="bold", size=10),
    legend.text = element_text(colour="black", size=10)
  )  

ggsave("Plots/CellRatio/Iba1_Regions_Rain.png", 
       width = 12, 
       height = 9, 
       units = "cm")

```

We plot the figures:
  
```{r}
#| label: plot by brain region
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


ggarrange(NeuN_Regions_Rain, Gfap_Regions_Rain, Iba1_Regions_Rain + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)

```

## 3.5 Bayesian modeling of cell ratios

Now we fir bayesian models using the `brms` package [@bürkner2017; @bürkner2018; @brms]. We fitted the single predictor model fitted for intensity in the previous chapter. Likewise, given the expected heterogeneity in the data due to variations in infarct size and neurological recovery, all the models were fitted with a student distribution (robust regression) to reduce the impact of extreme data. Also, we limit the exploration of the parameter space by the Markov chain Monte Carlo algorithm using user-defined weak informative priors, considering the current knowledge of neuronal loss and glial reactivity following cerebral ischemia.

### 3.5.1 Modeling for neuronal cell ratios

We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. To reduce computation time during subsequent code executions, we employed the argument `file` to generate an .rds containing the model. If refitting is required, erase the .rds file and erase `file_refit` line. Following model fitting, we used the `add_criterion` function to incorporate Leave-one-out cross-validation (LOO) and WAIC if model comparison is needed. The same considerations apply for astrocytes and microglia.

```{r}
#| label: Modeling for neuronal cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
NeuN_Ratio_Mdl1 <- bf(NeuN_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior).
NeuN_Ratio_Mdl1_Prior <- c(
  prior(student_t(3, 1, 0.3), class = b, coef = DPI0D),
  prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI5D),
  prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI15D),
  prior(student_t(3, 0.6, 0.3), class = b, coef =  DPI30D))

# Fit model 1
NeuN_Ratio_Fit1 <- brm(data = NeuN_Regions,
                       family = student,
                       formula = NeuN_Ratio_Mdl1,
                       prior = NeuN_Ratio_Mdl1_Prior,
                       chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                       control = list(adapt_delta = 0.99, max_treedepth = 15),
                       file = "BayesianModels/CellRatio/NeuN_CellRatio_Fit1.rds",
                       file_refit = "never")

# Add loo for model comparison
NeuN_Ratio_Fit1 <- add_criterion(NeuN_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

### 3.5.2 Modeling for astrocytes cell ratios

```{r}
#| label: Modeling for astrocyte cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
Gfap_Ratio_Mdl1 <- bf(Gfap_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models  
Gfap_Ratio_Mdl1_Prior <- c(
  prior(student_t(3, 1, 2), class = b, coef = DPI0D),
  prior(student_t(3, 3, 2), class = b, coef =  DPI5D),
  prior(student_t(3, 3, 2), class = b, coef =  DPI15D),
  prior(student_t(3, 3, 2), class = b, coef =  DPI30D))

# Fit model 1
Gfap_Ratio_Fit1 <- brm(data = Gfap_Regions,
                       family = student,
                       formula = Gfap_Ratio_Mdl1,
                       prior = Gfap_Ratio_Mdl1_Prior,
                       chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                       control = list(adapt_delta = 0.99, max_treedepth = 15),
                       file = "BayesianModels/CellRatio/Gfap_CellRatio_Fit1.rds",
                       file_refit = "never")

# Add loo for model comparison
Gfap_Ratio_Fit1 <- add_criterion(Gfap_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

### 3.5.3 Modeling for Microglia cell ratios

```{r}
#| label: Modeling for microglia cell ratios
#| include: true
#| warning: false
#| message: false

set.seed(8807)

## Set model 1 (_Mdl1) formula 
Iba1_Ratio_Mdl1 <- bf(Iba1_Ratio ~ 0 + DPI) 

## Set model 1 prior (_Mdl1_Prior). The same pripor is used for all the models 
Iba1_Ratio_Mdl1_Prior <- c(
  prior(student_t(3, 1, 2), class = b, coef = DPI0D),
  prior(student_t(3, 5, 2), class = b, coef =  DPI5D),
  prior(student_t(3, 5, 2), class = b, coef =  DPI15D),
  prior(student_t(3, 5, 2), class = b, coef =  DPI30D))
# Fit model 1
Iba1_Ratio_Fit1 <- brm(data = Iba1_Regions,
                       family = student,
                       formula = Iba1_Ratio_Mdl1,
                       prior = Iba1_Ratio_Mdl1_Prior,
                       chains = 4, warmup = 2500, iter= 5000, seed = 8807,
                       control = list(adapt_delta = 0.99, max_treedepth = 15),
                       file = "BayesianModels/CellRatio/Iba1_CellRatio_Fit1.rds",
                       file_refit = "never")

# Add loo for model comparison
Iba1_Ratio_Fit1 <- add_criterion(Iba1_Ratio_Fit1, c("loo", "waic", "bayes_R2"))

```

## 3.6 Model analysis and summary

### 3.6.1 For NeuN

#### 3.6.1.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for neurons ratio (NeuN)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
NeuN_Ratio_Mdl1_ppchecks <- brms::pp_check(NeuN_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="NeuN (ipsilateral/contralateral) ",
                     limits=c(0, 1.5), 
                     breaks=seq(0,1.5,0.3)) +
  
  scale_y_continuous(limits=c(0, 4), 
                     breaks=seq(0,4,1)) +
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 12, color = "black"),
    plot.caption = element_text(size = 12, color = "black"),
    
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
  ) + 
  
  legend_none() 

ggsave(plot = NeuN_Ratio_Mdl1_ppchecks, "Plots/CellRatio/NeuN_Ratio_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

```

#### 3.6.1.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for neuronal ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(NeuN_Ratio_Fit1)
color_scheme_set("viridis")

NeuN_Ratio_Trace <- mcmc_trace(NeuN_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.title = element_text(colour="black", face="bold", size=16),
    legend.text = element_text(colour="black", size=16),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
    
  ) 

NeuN_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.1.3 Model summary

```{r}
#| label: Print model summary for neuronal ratios 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(NeuN_Ratio_Fit1)

NeuN_Ratio_Fit1_Table <- modelsummary(NeuN_Ratio_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (NeuN_Ratio_Fit1_Table , 
            filename = "Tables/NeuN_Ratio_Fit1_Table .tex")
```

### 3.6.2 For Gfap

#### 3.6.2.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for astrocytes ratio (Gfap)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Gfap_Ratio_Mdl1_ppchecks <- brms::pp_check(Gfap_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="GFAP (ipsilateral/contralateral) ",
                     limits=c(0, 6), 
                     breaks=seq(0,6,2)) +
  
  scale_y_continuous(limits=c(0, 0.8), 
                     breaks=seq(0,0.8,0.2)) +
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 12, color = "black"),
    plot.caption = element_text(size = 12, color = "black"),
    
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
  ) + 
  
  legend_none() 

ggsave(plot = Gfap_Ratio_Mdl1_ppchecks, "Plots/CellRatio/Gfap_Ratio_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

```

#### 3.6.2.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for astrocytes ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Gfap_Ratio_Fit1)
color_scheme_set("viridis")

Gfap_Ratio_Trace <- mcmc_trace(Gfap_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.title = element_text(colour="black", face="bold", size=16),
    legend.text = element_text(colour="black", size=16),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
    
  ) 

Gfap_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.2.3 Model summary

```{r}
#| label: Print model summary for astrocytes ratio 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Gfap_Ratio_Fit1)

Gfap_Ratio_Fit1_Table <- modelsummary(Gfap_Ratio_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Gfap_Ratio_Fit1_Table , 
            filename = "Tables/Gfap_Ratio_Fit1_Table .tex")
```

### 3.6.3 For Iba1

#### 3.6.3.1 Plot posterior predictive checks

We generate graphs of posterior predictive checks for each of the fitted models

```{r}
#| label: Create posterior predictive checks for Microglia (Iba1)
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Iba1_Ratio_Mdl1_ppchecks <- brms::pp_check(Iba1_Ratio_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "DPI as a predictor",
       caption = "Model: Ratio ~ 0 + DPI") +
  
  scale_x_continuous(name="IBA1 (ipsilateral/contralateral) ",
                     limits=c(-2, 20), 
                     breaks=seq(0,20,4)) +
  
  scale_y_continuous(limits=c(0, 0.20), 
                     breaks=seq(0,0.20,0.03)) +
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 12, color = "black"),
    plot.caption = element_text(size = 12, color = "black"),
    
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
  ) + 
  
  legend_none() 

ggsave(plot = Iba1_Ratio_Mdl1_ppchecks, "Plots/CellRatio/Iba1_Ratio_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

```

#### 3.6.3.2 Plot model diagnostics

We plot models diagnostics using functions from the `bayesplot` package.

```{r}
#| label: Plot model diagnostics for Microglia ratio
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Iba1_Ratio_Fit1)
color_scheme_set("viridis")

Iba1_Ratio_Trace <- mcmc_trace(Iba1_Ratio_Fit1, pars = c("b_DPI0D", "b_DPI5D", "b_DPI15D", "b_DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.title = element_text(colour="black", face="bold", size=16),
    legend.text = element_text(colour="black", size=16),
    
    plot.margin = margin(t = 10,  # Top margin
                         r = 10,  # Right margin
                         b = 10,  # Bottom margin
                         l = 10) # Left margin
    
  ) 

Iba1_Ratio_Trace
```

We appreciate that all the four chains have explrored the same parameter space and converged.

#### 3.6.3.3 Model summary

```{r}
#| label: Print model summary for Microglia ratio 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Iba1_Ratio_Fit1)

Iba1_Ratio_Fit1_Table <- modelsummary(Iba1_Ratio_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Iba1_Ratio_Fit1_Table , 
            filename = "Tables/Iba1_Ratio_Fit1_Table .tex")
```

### 3.6.4 Plot posterior predictive checks

We plot the posterior predictive checks using the `pp_check` function to verify predictions considering the actual data.

```{r}
#| label: plot posterior predictive checks for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 5
#| fig-height: 5

color_scheme_set("darkgray")

pp_check(NeuN_Ratio_Fit1, type = "dens_overlay")
pp_check(Gfap_Ratio_Fit1, type = "dens_overlay")
pp_check(Iba1_Ratio_Fit1, type = "dens_overlay")
```

The results show no severe deviations from the observed data. However, the predictions vary considerable due to the wide uncertainty in cell rations and the broad difference between the control group and the ischemia time points. However, including sigma (Heteroscedasticity) does not modify the main readout, altough it provides more precise estimates.

## 3.7 Calculate contrast between DPI

We compute the contrast between the estimates of different time points for each cell type using the `emmeans` package [@emmeans]. Please not tht this output is only useful for plotting purposes. The estimated diferences between time points of interest are estimated using the `hyphotesis` function in the next segment.

```{r}
#| label: Calculate cell ratios contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For NeuN cell ratios
NeuN_Ratio_Contrast <- NeuN_Ratio_Fit1%>%
  emmeans(~ DPI) %>%
  contrast(method = "revpairwise") %>%
  gather_emmeans_draws() %>% sample_n(100)

# For Gfap cell ratios
Gfap_Ratio_Contrast <- Gfap_Ratio_Fit1%>%
  emmeans(~ DPI) %>%
  contrast(method = "revpairwise") %>%
  gather_emmeans_draws() %>% sample_n(100)

# For Iba1 cell ratios
Iba1_Ratio_Contrast <- Iba1_Ratio_Fit1%>%
  emmeans(~ DPI) %>%
  contrast(method = "revpairwise") %>%
  gather_emmeans_draws() %>% sample_n(100)
```

## 3.8 Visualize estimates and uncertainty for cell ratios

### 3.8.1 Plot estimates and uncertainty per DPI

#### 3.8.1.1 For Neurons

We generate graphs as done previously for intensity estimations.

```{r}
#| label: Create composited graphs for neuronal ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

NeuN_Regions <- NeuN_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

NeuN_Ratio_Grid = NeuN_Regions %>%
  data_grid(DPI)

NeuN_Ratio_Means = NeuN_Ratio_Grid %>%
  add_epred_draws(NeuN_Ratio_Fit1)

NeuN_Ratio_Preds = NeuN_Ratio_Grid %>%
  add_predicted_draws(NeuN_Ratio_Fit1)

NeuN_Ratio_Graph <- NeuN_Regions %>%
  ggplot(aes(x = NeuN_Ratio, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = NeuN_Ratio_Means) +
  
  stat_pointinterval (aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = NeuN_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = NeuN_Ratio_Preds) +
  geom_point(data = NeuN_Regions) +
  
  scale_y_discrete(name= " DPI ",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="NeuN (ipsilateral / contralateral)",
                     position = "top",
                     limits=c(0, 1.6), 
                     breaks=seq(0,1.6,0.3)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -2, vjust = -0.4) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.7),
    legend.direction="vertical",
    #legend.box = "vertical",
    legend.margin = margin(1, 1, 1, 0),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)) 

NeuN_Ratio_Contrast_Sub <- NeuN_Ratio_Contrast[(NeuN_Ratio_Contrast$contrast=="30D - 15D" | 
                                                  NeuN_Ratio_Contrast$contrast=="15D - 5D" | 
                                                  NeuN_Ratio_Contrast$contrast=="5D - 0D" ),]

NeuN_Ratio_Contrast_Sub$contrast <- factor(NeuN_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 


NeuN_Ratio_Contrast_Fig1 <- NeuN_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.11))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.11, 0.11), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-0.5, 0.6), 
                     breaks=seq(-0.5,0.6,0.3)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=14, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 14),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 14),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.8),
    #legend.margin = margin(1, 1, 1, -50),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)
  )

NeuN_Ratio_Patch <- NeuN_Ratio_Graph + plot_spacer() + NeuN_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))

ggsave(plot = NeuN_Ratio_Patch, "Plots/CellRatio/NeuN_Ratio_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")

```

#### 3.8.1.2 For Astrocytes

```{r}
#| label: Create composited graphs for astrocyte ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Gfap_Regions <- Gfap_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Gfap_Ratio_Grid = Gfap_Regions %>%
  data_grid(DPI)

Gfap_Ratio_Means = Gfap_Ratio_Grid %>%
  add_epred_draws(Gfap_Ratio_Fit1)

Gfap_Ratio_Preds = Gfap_Ratio_Grid %>%
  add_predicted_draws(Gfap_Ratio_Fit1)

Gfap_Ratio_Graph <- Gfap_Regions %>%
  ggplot(aes(x = Gfap_Ratio, y = DPI)) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Gfap_Ratio_Means) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Gfap_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Gfap_Ratio_Preds) +
  geom_point(data = Gfap_Regions) +
  
  scale_y_discrete(name= " DPI ",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP (ipsilateral / contralateral)",
                     position = "top",
                     limits=c(0, 7), 
                     breaks=seq(0,7,1)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -2, vjust = -0.4) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.7),
    legend.direction="vertical",
    #legend.box = "vertical",
    legend.margin = margin(1, 1, 1, 0),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)) 

Gfap_Ratio_Contrast_Sub <- Gfap_Ratio_Contrast[(Gfap_Ratio_Contrast$contrast=="30D - 15D" | 
                                                  Gfap_Ratio_Contrast$contrast=="15D - 5D" | 
                                                  Gfap_Ratio_Contrast$contrast=="5D - 0D" ),]

Gfap_Ratio_Contrast_Sub$contrast <- factor(Gfap_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 


Gfap_Ratio_Contrast_Fig1 <- Gfap_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.46))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.46, 0.46), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-2, 4), 
                     breaks=seq(-2,4,1)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=14, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 14),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 14),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.8),
    #legend.margin = margin(1, 1, 1, -50),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)
  )

Gfap_Ratio_Patch <- Gfap_Ratio_Graph + plot_spacer() + Gfap_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))

ggsave(plot = Gfap_Ratio_Patch, 
       "Plots/CellRatio/Gfap_Ratio_Patch.png", 
       width = 15, height = 12, 
       units = "cm")

```

#### 3.8.1.3 For Microglia

```{r}
#| label: Create composited graphs for microglia ratio
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = as.character(MouseId))

MousePlot <- c("M21", "M15", "M37", "M43")

Iba1_Regions <- Iba1_Regions %>%
  mutate(plotname = ifelse(plotname %in% MousePlot, plotname, ""))

Iba1_Ratio_Grid = Iba1_Regions %>%
  data_grid(DPI)

Iba1_Ratio_Means = Iba1_Ratio_Grid %>%
  add_epred_draws(Iba1_Ratio_Fit1)

Iba1_Ratio_Preds = Iba1_Ratio_Grid %>%
  add_predicted_draws(Iba1_Ratio_Fit1)

Iba1_Ratio_Graph <- Iba1_Regions %>%
  ggplot(aes(x = Iba1_Ratio, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Iba1_Ratio_Means) +
  stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Iba1_Ratio_Means) +
  stat_interval(aes(x = .prediction), data = Iba1_Ratio_Preds) +
  geom_point(data = Iba1_Regions) +
  
  scale_y_discrete(name= " DPI ",
                   labels = c("Control", "5D", "15D", "30D")) +
  
  scale_x_continuous(name="IBA1 (ipsilateral / contralateral)",
                     position = "top",
                     limits=c(0, 20), 
                     breaks=seq(0,20,3)) +
  
  scale_color_brewer(name = "Interval") +
  
  geom_text_repel(aes(label = plotname), size = 4, hjust = -2.5, vjust = -1) +
  
  theme_classic() +
  theme(
    plot.title = element_text(size=16, hjust = 0.5, face="bold"),
    plot.subtitle = element_text(size = 10, color = "black"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 16),
    axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 16),
    axis.text.y = element_text(colour = "black", size = 16),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.7),
    legend.direction="vertical",
    #legend.box = "vertical",
    legend.margin = margin(1, 1, 1, 0),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)) 

Iba1_Ratio_Contrast_Sub <- Iba1_Ratio_Contrast[(Iba1_Ratio_Contrast$contrast=="30D - 15D" | 
                                                  Iba1_Ratio_Contrast$contrast=="15D - 5D" | 
                                                  Iba1_Ratio_Contrast$contrast=="5D - 0D" ),]

Iba1_Ratio_Contrast_Sub$contrast <- factor(Iba1_Ratio_Contrast_Sub$contrast, levels = c("5D - 0D", "15D - 5D", "30D - 15D")) 


Iba1_Ratio_Contrast_Fig1 <- Iba1_Ratio_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 2.24))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-2.24, 2.24), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-6, 10), 
                     breaks=seq(-6,10,3)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
  
  theme_classic() +
  theme(
    plot.title = element_text(size=14, hjust = 0.5, face="bold"),
    axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
    axis.ticks.length=unit(7,"pt"),
    
    axis.title.x = element_text(colour = "black", size = 14),
    axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
    axis.ticks.x = element_line(colour = "black", size = 1),
    
    axis.title.y = element_text(colour = "black", size = 14),
    axis.text.y = element_text(colour = "black", size = 14),
    axis.ticks.y = element_line(colour = "black", size = 1),
    
    legend.position= c(0.9, 0.8),
    #legend.margin = margin(1, 1, 1, -50),
    legend.title = element_text(colour="black", face="bold", size=12),
    legend.text = element_text(colour="black", size=12)
  )

Iba1_Ratio_Patch <- Iba1_Ratio_Graph + plot_spacer() + Iba1_Ratio_Contrast_Fig1  + plot_layout(ncol = 2, nrow = 2, widths = c(6, 1), heights = c(1, 0.3))

ggsave(plot = Iba1_Ratio_Patch, 
       "Plots/CellRatio/Iba1_Ratio_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")

```

We plot the graphs

```{r}
#| label: Plot composited graphs for cell ratios
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(NeuN_Ratio_Patch, Gfap_Ratio_Patch, Iba1_Ratio_Patch + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

# 4. Analysis of cell covariance using Rhohat and point pattern models (PPM)

In this section, we perform a thorough analysis of cell covariance using the `rhohat` and `ppm` functions from spatstat [@spatstat-3].

## 4.1 Subset the point patterns

We rely on the `PointPatterns_5x` hyperframe to perform the analysis. We set the DPI as a factor with defined levels and subset the data set per DPI.

```{r}
#| label: 5x_PPP_Subset
#| include: true
#| warning: false
#| message: false

# We load the point pattern (if not available yet)
PointPatterns_5x <- readRDS("Hyperframes/PointPatterns_5x.rds")

# We order the DPI factor
PointPatterns_5x$DPI <- factor(PointPatterns_5x$DPI, levels = c("0D", "5D", "15D", "30D"))

# We subset the data frame
PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10)
PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10)
```

## 4.2 For astrocytes-neurons covariance

### 4.2.1 Calculate the relative distribution using rhohat

First, we pass the `rhohat` function to point pattern subset (per DPI) to estimate the astrocyte spatial intensity conditional on the spatial intensity of neurons. The neuronal predictor is the calculated density kernel image (Neurons_Dens). In the `rhohat` function, we set `do.CI = FALSE` to avoid the calculation of confidence intervals (CI) per brain. Then, CIs are calculated within the `pool` function to obtain estimates per time point. We perform the same procedure for astrocytes/neurons covariance and microglia/neurons covariance.

```{r}
#| label: 5x_Astrocytes/Neurons_Rhohat
#| include: true
#| warning: false
#| message: false

Astrocytes_Neurons_0D_Rhohat <- with(PointPatterns_5x_0D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_0D_Rhohat_fig <- pool(Astrocytes_Neurons_0D_Rhohat)

# For 5 DPI
Astrocytes_Neurons_5D_Rhohat <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_5D_Rhohat_fig <- pool(Astrocytes_Neurons_5D_Rhohat)

# For 15 DPI
Astrocytes_Neurons_15D_Rhohat <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_15D_Rhohat_fig <- pool(Astrocytes_Neurons_15D_Rhohat)

# For 30 DPI
Astrocytes_Neurons_30D_Rhohat <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_30D_Rhohat_fig <- pool(Astrocytes_Neurons_30D_Rhohat)
```

### 4.2.2 Plot the rhohat

We plot the graphical results using the R-base graph system. The images are saved in the `plots` folder with the specified names.

**Please note** that we purposely constrained the plotted function to enhance visualization. Please consult `Available range of argument Neurons_Dens` line in each object to see plotting limits and comment the `ylim` line to obtain the complete (default) plot.

```{r}
#| label: 5x_Astrocytes/Neurons_PlotRhohat
#| include: true
#| warning: false
#| message: false

Astrocytes_Neurons_0D_Rhohat <- with(PointPatterns_5x_0D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_0D_Rhohat_fig <- pool(Astrocytes_Neurons_0D_Rhohat)

png("Plots/CellCovariance/Astrocytes_Neurons_0D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_0D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     xylim = c(0, 150),
     ylab = "p(GFAP spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 5 DPI
Astrocytes_Neurons_5D_Rhohat <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_5D_Rhohat_fig <- pool(Astrocytes_Neurons_5D_Rhohat)

png("Plots/CellCovariance/Astrocytes_Neurons_5D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_5D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 50),
     ylab = "p(GFAP spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 15 DPI
Astrocytes_Neurons_15D_Rhohat <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_15D_Rhohat_fig <- pool(Astrocytes_Neurons_15D_Rhohat)

png("Plots/CellCovariance/Astrocytes_Neurons_15D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_15D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 50),
     ylab = "p(GFAP spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 30 DPI
Astrocytes_Neurons_30D_Rhohat <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))

Astrocytes_Neurons_30D_Rhohat_fig <- pool(Astrocytes_Neurons_30D_Rhohat)

png("Plots/CellCovariance/Astrocytes_Neurons_30D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Astrocytes_Neurons_30D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 50),
     ylab = "p(GFAP spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()
```

The graphical estimations of astrocyte spatial intensity conditional on neuronal spatial intensity are shown in Figure 2 of the research article.

### 4.2.3 Fit models for Astrocytes-neurons covariance (mppm)

To complement the relative distribution estimations, we use the `mppm` function from `spatstat` to fit a model for replicated point patterns. The `mppm` function fits **loglinear models** analogous to lm or glm.

Again, we use the neuronal density kernel (Neurons_Dens) as a predictor, allowing varying intercepts and slopes per DPI. Given that at 0 DPI (control animals) do not offer a sufficient sampling of reactive glia (GFAP and IBA1+ cells), we use time point merely as a reference, but do not intent an accurate estimation. The same procedure is applied for microglia/neurons covariance.

The model results are shown in the **supplementary table 6** of the main research article.

```{r}
#| label: 5x_Astrocytes-Neurons_ppm
#| include: true
#| warning: false
#| message: false
#| cache: true

PointPatterns_5x_Sub <- subset(PointPatterns_5x, DPI!="0D", select = 1:10)

# We order the DPI factor
PointPatterns_5x_Sub$DPI <- factor(PointPatterns_5x_Sub$DPI, 
                               levels = c("5D", "15D", "30D"))

# We fit the model
Astrocytes_Neurons_5x_Fit1 <- mppm(Astrocytes ~ Neurons_Dens, 
                                random = ~ Neurons_Dens |DPI,
                                data=PointPatterns_5x_Sub)

summary(Astrocytes_Neurons_5x_Fit1)
```

This output suggest that, generally speaking, the spatial intensity of astrocytes increases with the neuronal density (slope, 0.002). This indicates that astrocytes are primary located in extra-lesional regions. However, the random effects display deceasing slopes (from 0.01 to -0.008) suggesting that the positive influence of neuronal intensity in astrocyte allocation is reduced with time. This is consistent with a notion of astrocytes progressively invading intra-lesional areas.

## 4.3 For microglia/neurons covariance

We perform the same procedure as done for GFAP.

### 4.3.1 Calculate the relative distribution

```{r}
#| label: 5x_Microglia/Neurons_Rhohat
#| include: true
#| warning: false
#| message: false

# For control (0 DPI)
Microglia_Neurons_0D_Rhohat <- with(PointPatterns_5x_0D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_0D_Rhohat_fig <- pool(Microglia_Neurons_0D_Rhohat)

# For 5 DPI
Microglia_Neurons_5D_Rhohat <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_5D_Rhohat_fig <- pool(Microglia_Neurons_5D_Rhohat)

# For 15 DPI
Microglia_Neurons_15D_Rhohat <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_15D_Rhohat_fig <- pool(Microglia_Neurons_15D_Rhohat)

# For 30 DPI
Microglia_Neurons_30D_Rhohat <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))

Microglia_Neurons_30D_Rhohat_fig <- pool(Microglia_Neurons_30D_Rhohat)
```

### 4.3.2 Plot the rhohat

```{r}
#| label: 5x_Microglia/Neurons_PlotRhohat
#| include: true
#| warning: false
#| message: false

# For control (0 DPI)
png("Plots/CellCovariance/Microglia_Neurons_0D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_0D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     #ylim = c(0, 100),
     ylab = "p(IBA1 spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 5 DPI
png("Plots/CellCovariance/Microglia_Neurons_5D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_5D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 70),
     ylab = "p(IBA1 spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 15 DPI
png("Plots/CellCovariance/Microglia_Neurons_15D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_15D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 70),
     ylab = "p(IBA1 spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()

# For 30 DPI
png("Plots/CellCovariance/Microglia_Neurons_30D_Rhohat_fig.png", width = 500, height = 400)
par(mar=c(5,5,5,2))
plot(Microglia_Neurons_30D_Rhohat_fig,
     shade = c("lorho", "hirho"),
     main = "",
     xlab = "NeuN spatial intensity",
     ylim = c(0, 30),
     ylab = "p(IBA1 spatial intensity)",
     cex.main = 2.5,
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 5,
     legend=FALSE)
dev.off()
```

### 4.3.3 Fit models for Microglia-neurons covariance (mppm)

We fit the mppm model

```{r}
#| label: 5x_Microglia-Neurons_ppm
#| include: true
#| warning: false
#| message: false
#| cache: true

# We fit the model
Microglia_Neurons_5x_Fit1 <- mppm(Microglia ~ Neurons_Dens, 
                                random = ~ Neurons_Dens |DPI,
                                data=PointPatterns_5x_Sub)

summary (Microglia_Neurons_5x_Fit1)
```

Contrary to astrocytes, fixed effects for microglia show a negative slope (-0.021) demarcating a microglial allocation in low-intensity neuronal areas.

# 5. Analysis of cell covariance using tessellations

In [1.3 Generate hyperframes and additional data tables], we obtained tessellations for NeuN and IBA1 based on the smoothed density kernels [@baddeley2015, pp.177-178] and save them in the hyperframe. This procedure defined regions of low and high spatial intensity for the corresponding cell type. In the same chunk, we employed the `quadrantcount` function to obtain the number of cells (astrocytes or microglia) in the tessellated regions. The results were saved in a .csv file and stored in the `DataTables` folder.

## 5.1 Load and prepare the dataset

We load the data set under the name `CellTessellations_5x_Raw` and subset the relevant columns. Columns names respond to AN1 (Astrocytes in low intensity neuronal areas) and AN2 (Astrocytes in high intensity neuronal areas). The same applies for microglia in neuronal areas (MN) and Astrocytes in microglial areas (AM). We exclude 0 DPI given that this time points do not map efficiently the presence of reactive glia.

```{r}
#| label: 5x_LoadTessellations
#| include: true
#| warning: false
#| message: false

# Load the data set
Cells_Tess_Raw <- read.csv(file = 'ResultsTables/Cells_Covariance.csv', header = TRUE)

## We subset the relevant columns (cell number)
Cells_Tess <- subset(Cells_Tess_Raw, select = -c(X))

## And extract metadata from the image name
Cells_Tess  <- cbind(Cells_Tess, do.call(rbind , strsplit(Cells_Tess$Brain, "[_\\.]"))[,3:4])

## We Rename the relevant columns 
colnames(Cells_Tess) <- c("Brain", "AN1", "AN2", "MN1", "MN2", "AM1", "AM2", "MouseID", "DPI")

## Perform a new subset
Cells_Tess <- subset(Cells_Tess, select = c(MouseID, DPI, AN1, AN2, MN1, MN2, AM1, AM2))

## And organize the DPI factors 
Cells_Tess$DPI <- factor(Cells_Tess $DPI, levels = c("0D", "5D", "15D", "30D"))

## We exclude 0 DPI
Cells_Tess <- Cells_Tess[Cells_Tess$DPI != "0D",]
```

### 5.1.1 Prepare Astrocytes/neurons dataset

We organize the astrocyte/neurons covariance dataset.

```{r}
#| label: 5x_PrepareTessellations_Astrocytes-Neurons
#| include: true
#| warning: false
#| message: false

# For astrocytes in neuronal areas

## Subset data for astrocytes in neuronal areas
Astrocytes_Neurons_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, AN1, AN2))

## Transform the data set to long format
Astrocytes_Neurons_Tess <- melt(Astrocytes_Neurons_Tess, id.vars = c("MouseID", "DPI"))

## Set new column names
colnames(Astrocytes_Neurons_Tess) <- c("MouseID", "DPI", "NeuronalDensity", "Astrocytes")

## Set factor levels
levels(Astrocytes_Neurons_Tess$NeuronalDensity) <- list(Low  = "AN1", High = "AN2")

Astrocytes_Neurons_Tess$NeuronalDensity <- factor(Astrocytes_Neurons_Tess$NeuronalDensity, ordered = TRUE, levels = c("Low", "High"))
```

### 5.1.2 Prepare Microglia/neurons dataset

We do the same for microglia/neurons covariance

```{r}
#| label: 5x_PrepareTessellations_Microglia-Neurons
#| include: true
#| warning: false
#| message: false

Microglia_Neurons_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, MN1, MN2))

Microglia_Neurons_Tess <- melt(Microglia_Neurons_Tess, id.vars = c("MouseID", "DPI"))

colnames(Microglia_Neurons_Tess) <- c("MouseID", "DPI", "NeuronalDensity", "Microglia")

levels(Microglia_Neurons_Tess$NeuronalDensity) <- list(Low  = "MN1", High = "MN2")

Microglia_Neurons_Tess$NeuronalDensity <- factor(Microglia_Neurons_Tess$NeuronalDensity, ordered = TRUE, levels = c("Low", "High"))
```

### 5.1.3 Prepare astrocytes/microglia dataset

```{r}
#| label: 5x_PrepareTessellations_Microglia-Astrocytes
#| include: true
#| warning: false
#| message: false

Astrocytes_Microglia_Tess <-subset(Cells_Tess, select = c(MouseID, DPI, AM1, AM2))

Astrocytes_Microglia_Tess <- melt(Astrocytes_Microglia_Tess, id.vars = c("MouseID", "DPI"))

## We eliminate the 0 DPI given that this point does not exhibit a considerable number of reactive glia or reactive glia-like cells
Astrocytes_Microglia_Tess <- Astrocytes_Microglia_Tess [!(Astrocytes_Microglia_Tess$DPI=="0D"),]

Astrocytes_Microglia_Tess$DPI <- factor(Astrocytes_Microglia_Tess$DPI, ordered = TRUE, levels = c("5D", "15D", "30D"))

colnames(Astrocytes_Microglia_Tess) <- c("MouseID", "DPI", "MicroglialDensity", "Astrocytes")

levels(Astrocytes_Microglia_Tess$MicroglialDensity) <- list(Low  = "AM1", High = "AM2")

Astrocytes_Microglia_Tess$MicroglialDensity <- factor(Astrocytes_Microglia_Tess$MicroglialDensity, ordered = TRUE, levels = c("Low", "High"))

## We eliminate all missing rows to avoid errors in further calculations
Astrocytes_Microglia_Tess[is.na(Astrocytes_Microglia_Tess)] <- 0
```

## 5.2 Plot the data for initial visualization

We create graphs for initial visualization using `geom_density_ridges` and save them in the designated locations.

### 5.2.1 Plot astrocytes / neuronal covariance

```{r}
#| label: 5x_Visualization_astrocytes-neurons
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

Astrocytes_Neurons_Ridges <- 
  
  ggplot(Astrocytes_Neurons_Tess, 
          aes(x = Astrocytes, 
              y = DPI, 
              fill = NeuronalDensity)) + 
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
    
  scale_y_discrete(name= " DPI",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP in NeuN regions",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,200)) +
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  
  scale_color_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Neurons_Ridges, "Plots/CellCovariance/Astrocytes_Neurons_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

### 5.2.2 Plot microglia / neuronal covariance

```{r}
#| label: 5x_Visualization_microglia-neurons
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Microglia_Neurons_Ridges <- 
  ggplot(Microglia_Neurons_Tess, 
           aes(x = Microglia, 
               y = DPI, 
               fill = NeuronalDensity)) + 
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
 
  scale_y_discrete(name= "DPI",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="IBA1 in NeuN regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,200)) +
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  scale_color_manual(values= c("cyan", "green"),
                        name="Neuronal density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Microglia_Neurons_Ridges, 
       "Plots/CellCovariance/Microglia_Neurons_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

### 5.2.3 Plot astrocytes / microglia covariance

```{r}
#| label: 5x_Visualization_astrocytes-microglia
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true
# For astrocytes in microglial regions

Astrocytes_Microglia_Ridges <- 
  ggplot(Astrocytes_Microglia_Tess, 
            aes(x = Astrocytes, 
                y = DPI, 
                fill = MicroglialDensity)) + 
  
  geom_density_ridges(
    quantile_lines = TRUE,
    rel_min_height = 0.01,
    alpha = 0.8, 
    scale = 2,
    jittered_points = TRUE,
    point_alpha = 1, 
    point_size = 3) +
 
  scale_y_discrete(name= "DPI",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP in IBA1 regions ",
                     limits=c(0, 1000), 
                     breaks=seq(0,1000,200)) +
  
  scale_fill_manual(values= c("cyan", "green"),
                        name="IBA1 density",
                        breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  scale_color_manual(values= c("cyan", "green"),
                        name="IBA1 density",
                         breaks=c("Low", "High"),
                        labels=c("Low", "High")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position="top",
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) 

ggsave(plot = Astrocytes_Microglia_Ridges, "Plots/CellCovariance/Astrocytes_Microglia_Ridges.png", 
       width = 12, 
       height = 9, 
       units = "cm")
```

Now, we plot the graphs for all the three covariances:

```{r}
#| label: 5x_Visualization_Plot
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Neurons_Ridges, Microglia_Neurons_Ridges, Astrocytes_Microglia_Ridges + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

## 5.3 Bayesian modeling of glial-neurons covariance

Again, we employ the `brms` package [@bürkner2017; @bürkner2018; @brms]to perform Bayesian regression. In all cases, we fit model with interaction bwteen DPI (three levels = 5D, 15D, 30D) and cell density (two levels = Low, High). We use student distributions (robust regression) to reduce the impact of possible extreme data and used brms-default flat priors. We fit the models using 4 chains with 5000 iterations and 2500 as a warmup. We save .rds files containing the models in the designated location. To re fit the models, please erase the .rds file and `file_refit` line.

### 5.3.1 Modeling of astrocytes / neurons covariance

We set formulas and priors for each cell type.

```{r}
#| label: 5x_Astrocytes-Neurons_Tess
#| include: true
#| warning: false
#| message: false

set.seed(8807)

Astrocytes_Neurons_Tess_Mdl1 <- bf(
  Astrocytes ~ 0 + NeuronalDensity:DPI)

get_prior(Astrocytes_Neurons_Tess_Mdl1, 
          data = Astrocytes_Neurons_Tess, 
          family = student)

Astrocytes_Neurons_Tess_Fit1 <- brm(data = Astrocytes_Neurons_Tess,
                          family = student(),
                          formula = Astrocytes_Neurons_Tess_Mdl1,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Neurons_Tess_Fit1.rds",
                          file_refit = "never")

Astrocytes_Neurons_Tess_Fit1<- add_criterion(Astrocytes_Neurons_Tess_Fit1, c("loo", "waic", "bayes_R2"))
```

### 5.3.2 Modeling of microglia / neurons covariance

We set formulas and priors for each cell type.

```{r}
#| label: 5x_Microglia-Neurons_Tess
#| include: true
#| warning: false
#| message: false

set.seed(8807)

# Model 3
Microglia_Neurons_Tess_Mdl1 <- bf(
  Microglia ~ 0 + NeuronalDensity:DPI)

get_prior(Microglia_Neurons_Tess_Mdl1, 
          data = Microglia_Neurons_Tess, 
          family = student)

Microglia_Neurons_Tess_Fit1 <- brm(data = Microglia_Neurons_Tess,
                          family = student(),
                          formula = Microglia_Neurons_Tess_Mdl1,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Microglia_Neurons_Tess_Fit1.rds",
                          file_refit = "never")

Microglia_Neurons_Tess_Fit1<- add_criterion(Microglia_Neurons_Tess_Fit1, c("loo", "waic", "bayes_R2"))
```

## 5.4 Model analysis

### 5.4.1 Analysis of astrocyte / neurons covariance

#### 5.4.1.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: 5x_Astrocytes-Neurons_PPChecks
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 3
Astrocytes_Neurons_Mdl1_ppchecks <- brms::pp_check(Astrocytes_Neurons_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ NeuronalDensity:DPI") +
  
  scale_x_continuous(name="GFAP spatial intensity",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Neurons_Mdl1_ppchecks, "Plots/CellCovariance/Astrocytes_Neurons_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

Astrocytes_Neurons_Mdl1_ppchecks
```

We observe there are no meaningful deviance between the posterior predictions in the model.

#### 5.4.1.2 Plot MCMC chains

We plot the model diagnostics using functions from the bayesplot packages

```{r}
#| label: 5x_Astrocytes-Neurons_Chains
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Astrocytes_Neurons_Tess_Fit1)
color_scheme_set("viridis")

Astrocytes_Neurons_Tess_Trace <- mcmc_trace(Astrocytes_Neurons_Tess_Fit1, pars = c("b_NeuronalDensityLow:DPI5D", "b_NeuronalDensityLow:DPI15D", "b_NeuronalDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

# We plot the sample traces
Astrocytes_Neurons_Tess_Trace
```

#### 5.4.1.3 Model summary {#model-summary-6}

We print the summary for the model to visualize the estimates and uncertainty. The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7**.

```{r}
#| label: 5x_Astrocytes-Neurons_Summary
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Neurons_Tess_Fit1)

Astrocytes_Neurons_Tess_Fit1_Table <- modelsummary(Astrocytes_Neurons_Tess_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Astrocytes_Neurons_Tess_Fit1_Table , 
            filename = "Tables/Gfap_NeuN_Tess_Fit1_Table .tex")
```
### 5.4.2 Analysis of Microglia / neurons covariance

#### 5.4.2.1 Posterior predictive checks

We plot posterior predictive checks for each of the fitted models

```{r}
#| label: 5x_Microglia-Neurons_PPChecks
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Microglia_Neurons_Mdl1_ppchecks <- brms::pp_check(Microglia_Neurons_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ NeuronalDensity:DPI") +
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Microglia_Neurons_Mdl1_ppchecks, "Plots/CellCovariance/Microglia_Neurons_Mdl1_ppchecks.png", 
       width = 10, 
       height = 10, 
       units = "cm")

Microglia_Neurons_Mdl1_ppchecks
```

We see that there are no meaninful deviations from the data

#### 5.4.2.2 Plot MCMC chains

We plot the model diagnostics using functions from the bayesplot packages

```{r}
#| label: 5x_Microglia-Neurons_Chains
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Microglia_Neurons_Tess_Fit1)
color_scheme_set("viridis")

Microglia_Neurons_Tess_Trace <- mcmc_trace(Microglia_Neurons_Tess_Fit1, pars = c("b_NeuronalDensityLow:DPI5D", "b_NeuronalDensityLow:DPI15D", "b_NeuronalDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

# We plot the sample traces
Microglia_Neurons_Tess_Trace
```

#### 5.4.2.3 Model summary {#model-summary-7}

We plot the summary. The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7** of the research article.

```{r}
#| label: 5x_Microglia-Neurons_Summary 
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Microglia_Neurons_Tess_Fit1)

Microglia_Neurons_Tess_Fit1_Table <- modelsummary(Microglia_Neurons_Tess_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Microglia_Neurons_Tess_Fit1_Table , 
            filename = "Tables/IBA1_NeuN_Tess_Fit1_Table .tex")
```

## 5.5 Calculate contrast between time points

We employ the the `emmeans` package [@emmeans] to compute contrast between the time points using the posterior distributions.

### 5.5.1 Contrast for Astrocytes / Neurons covariance

```{r}
#| label: 5x_Astrocytes-Neurons_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Astrocytes_Neurons_Contrast <- Astrocytes_Neurons_Tess_Fit1%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(1000)

# We calculate difference between 15 and 5 DPI
hypothesis(Astrocytes_Neurons_Tess_Fit1, "NeuronalDensityLow:DPI15D > NeuronalDensityLow:DPI5D", class = "b", seed = 8807)

Astrocytes_Neurons_hypothesis <- Astrocytes_Neurons_Contrast %>%
  filter(contrast == "15D - 5D" & NeuronalDensity == "Low") 

sum(Astrocytes_Neurons_hypothesis$.value < 184) / 1000

# We calculate difference between 30 and 15 DPI
hypothesis(Astrocytes_Neurons_Tess_Fit1, "NeuronalDensityLow:DPI30D < NeuronalDensityLow:DPI15D", class = "b", seed = 8807)

Astrocytes_Neurons_hypothesis <- Astrocytes_Neurons_Contrast %>%
  filter(contrast == "30D - 15D" & NeuronalDensity == "Low") 

sum(Astrocytes_Neurons_hypothesis$.value > -184) / 1000
```

### 5.5.2 Constranst for microglia / Neurons covariance

```{r}
#| label: 5x_Microglia-Neurons_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Microglia_Neurons_Contrast <- Microglia_Neurons_Tess_Fit1%>%
emmeans(~ NeuronalDensity | DPI) %>%
contrast(method = "revpairwise", by = "NeuronalDensity") %>%
gather_emmeans_draws() %>% sample_n(1000)

# We calculate difference between 30 and 5 DPI
hypothesis(Microglia_Neurons_Tess_Fit1, "NeuronalDensityHigh:DPI30D <   NeuronalDensityHigh:DPI5D", class = "b", seed = 8807)

Microglia_Neurons_hypothesis <- Microglia_Neurons_Contrast %>%
  filter(contrast == "30D - 5D" & NeuronalDensity == "High") 

sum(Microglia_Neurons_hypothesis$.value > -184) / 1000

# We calculate difference between 30 and 15 DPI
hypothesis(Microglia_Neurons_Tess_Fit1, "NeuronalDensityLow:DPI30D <   NeuronalDensityLow:DPI15D", class = "b", seed = 8807)

Microglia_Neurons_hypothesis <- Microglia_Neurons_Contrast %>%
  filter(contrast == "30D - 15D" & NeuronalDensity == "Low") 

sum(Microglia_Neurons_hypothesis$.value > -184) / 1000

```

## 5.6 Visualize the contrast for cell covariance

Here we focus on visualizing the contrast between time points for low and high density neuronal regions. To check estimates please refer to [5.4.1.3 Model summary](#model-summary-6) for astrocytes or [5.4.2.3 Model summary](#model-summary-7) for microglia.

### 5.6.1 For astrocytes-neurons covariance

We generate the graphs showing the estimated contrast and their uncertainty.

```{r}
#| label: 5x_Astrocytes-Neurons_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

# We select the desired contrast
Astrocytes_Neurons_Contrast_Sub <- Astrocytes_Neurons_Contrast[
  (Astrocytes_Neurons_Contrast$contrast=="30D - 5D"|
  Astrocytes_Neurons_Contrast$contrast=="30D - 15D"|
   Astrocytes_Neurons_Contrast$contrast=="15D - 5D"),]
   
# We order the levels for contrast
Astrocytes_Neurons_Contrast_Sub$contrast <- factor(Astrocytes_Neurons_Contrast_Sub$contrast, 
       levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
# We generate the graph
Astrocytes_Neurons_Contrast_Fig1 <- Astrocytes_Neurons_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 184))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-184, 184), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  ggtitle("GFAP / NeuN covariance") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-400, 500), 
                     breaks=seq(-400,500, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.85, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ NeuronalDensity, ncol = 1)
  
ggsave(
  plot = Astrocytes_Neurons_Contrast_Fig1, 
  file = "Plots/CellCovariance/Astrocytes_Neurons_Tess_Patch.png", 
  width = 10, 
  height = 10, 
  units = "cm")
```

### 5.6.2 For Microglia-neurons covariance

We perform the same procedure for microglia-neurons covariance

```{r}
#| label: 5x_Microglia-Neurons_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

Microglia_Neurons_Contrast_Sub <- Microglia_Neurons_Contrast[
  (Microglia_Neurons_Contrast$contrast=="30D - 5D"|
  Microglia_Neurons_Contrast$contrast=="30D - 15D"|
   Microglia_Neurons_Contrast$contrast=="15D - 5D"),]
   
Microglia_Neurons_Contrast_Sub$contrast <- factor(Microglia_Neurons_Contrast_Sub$contrast, 
      levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
Microglia_Neurons_Contrast_Fig1 <- Microglia_Neurons_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 127))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-127, 127), linetype = "dashed") +
  
  ggtitle("IBA1 / NeuN covariance") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-600, 400), 
                     breaks=seq(-600,400, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.85, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ NeuronalDensity, ncol = 1)
  
ggsave(
  plot = Microglia_Neurons_Contrast_Fig1, 
  file = "Plots/CellCovariance/Microglia_Neurons_Tess_Patch.png", 
  width = 10, 
  height = 10, 
  units = "cm")
```

Here we plot the graphs

```{r}
#| label: 5x_CellCovariance_Plot
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Astrocytes_Neurons_Contrast_Fig1, Microglia_Neurons_Contrast_Fig1 + rremove("x.text"), 
          labels = c("A", "B"),
          ncol = 3, nrow = 1)
```

## 5.7 Plot Tesselations

Now, we plot representative tessellations for astrocytes/neurons and microglia/neurons using the R-base graphs system.

### 5.7.1 Plot tesselations for astrocytes / neurons

```{r}
#| label: 5x_Astrocytes-Neurons_PlotTessellations
#| include: true
#| warning: false
#| message: false

par(mfrow = c(1,3), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 33, 5 DPI
#png("Plots/CellCovariance/Astrocytes_Neurons_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Neurons_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "5D") 
plot(PointPatterns_5x$Astrocytes$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 04, 15 DPI
#png("Plots/CellCovariance/Astrocytes_Neurons_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "15D") 
plot(PointPatterns_5x$Astrocytes$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 05, 30 DPI
#png("Plots/CellCovariance/Astrocytes_Neurons_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "30D") 
plot(PointPatterns_5x$Astrocytes$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()
```

### 5.7.2 Plot tesselations for Microglia / neurons

```{r}
#| label: 5x_Microglia-Neurons_PlotTessellations
#| include: true
#| warning: false
#| message: false

par(mfrow = c(1,3), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 33, 5 DPI
#png("Plots/CellCovariance/Microglia_Neurons_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Neurons_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "5D") 
plot(PointPatterns_5x$Microglia$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 04, 15 DPI
#png("Plots/CellCovariance/Microglia_Neurons_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "15D") 
plot(PointPatterns_5x$Microglia$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 05, 30 DPI
#png("Plots/CellCovariance/Microglia_Neurons_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Neurons_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "30D") 
plot(PointPatterns_5x$Microglia$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()
```

## 5.8 Influence of the spatial intensity of neurons in glial allocation

In this section, we use the `dfbetas` function from `spatstat` to measure the influence of a variable (neuronal spatial intensity) in the point pattern (astrocytes and microglia). This function calculates the variability of the estimates using leave-one-out validation [@baddeley2019]. This results in a matrix depicting changes in the corresponding coefficients visualized as a heat map.

### 5.8.1 Superimpose brains

Given that `dfbetas` is not available for replicated point patterns, the first step is to use the `superimpose` function to merge all the point patterns per DPI . We find this procedure suitable considering that the brains are alligned to the Allen Brain Atlas. In the procedure, the `unmark` function eliminates object marks identifying each animal. This step is required because marked point patterns are not accepted by `dfbetas`. We performed the same procedure separately, for each cell type and time point.

```{r}
#| label: 5x_Superimpose
#| include: true
#| warning: false
#| message: false


# For neurons

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
NeuN_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Neurons) 
NeuN_Superimposed_5x_0D <- unmark(NeuN_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
NeuN_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Neurons) 
NeuN_Superimposed_5x_5D <- unmark(NeuN_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
NeuN_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Neurons) 
NeuN_Superimposed_5x_15D <- unmark(NeuN_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
NeuN_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Neurons) 
NeuN_Superimposed_5x_30D <- unmark(NeuN_Superimposed_5x_30D)


# For astrocytes

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
Gfap_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Astrocytes) 
Gfap_Superimposed_5x_0D <- unmark(Gfap_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
Gfap_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Astrocytes) 
Gfap_Superimposed_5x_5D <- unmark(Gfap_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
Gfap_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Astrocytes) 
Gfap_Superimposed_5x_15D <- unmark(Gfap_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
Gfap_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Astrocytes) 
Gfap_Superimposed_5x_30D <- unmark(Gfap_Superimposed_5x_30D)


# For microglia

PointPatterns_5x_0D <- subset(PointPatterns_5x, DPI=="0D", select = 1:10) 
Iba1_Superimposed_5x_0D <- superimpose(PointPatterns_5x_0D$Microglia) 
Iba1_Superimposed_5x_0D <- unmark(Iba1_Superimposed_5x_0D)

PointPatterns_5x_5D <- subset(PointPatterns_5x, DPI=="5D", select = 1:10) 
Iba1_Superimposed_5x_5D <- superimpose(PointPatterns_5x_5D$Microglia) 
Iba1_Superimposed_5x_5D <- unmark(Iba1_Superimposed_5x_5D)

PointPatterns_5x_15D <- subset(PointPatterns_5x, DPI=="15D", select = 1:10) 
Iba1_Superimposed_5x_15D <- superimpose(PointPatterns_5x_15D$Microglia) 
Iba1_Superimposed_5x_15D <- unmark(Iba1_Superimposed_5x_15D)

PointPatterns_5x_30D <- subset(PointPatterns_5x, DPI=="30D", select = 1:10) 
Iba1_Superimposed_5x_30D <- superimpose(PointPatterns_5x_30D$Microglia) 
Iba1_Superimposed_5x_30D <- unmark(Iba1_Superimposed_5x_30D)
```

### 5.8.2 Compute density kernels for superimposed brains

We use the `density` function from `spatstat` to obtain a nonparametric density kernel [@baddeley2015, pp.168-174] for each cell type, using a user-defined bandwidth (sigma).

```{r}
#| label: 5x_Superimposed_Density
#| include: true
#| warning: false
#| message: false

NeuN_Intensity_0D <- density(NeuN_Superimposed_5x_0D, sigma=0.3, main = "Neurons 0D")
NeuN_Intensity_5D <- density(NeuN_Superimposed_5x_5D, sigma=0.3, main = "Neurons 5D")
NeuN_Intensity_15D <- density(NeuN_Superimposed_5x_15D, sigma=0.3, main = "Neurons 15D")
NeuN_Intensity_30D <- density(NeuN_Superimposed_5x_30D, sigma=0.3, main = "Neurons 30D")


Gfap_Intensity_0D <- density(Gfap_Superimposed_5x_0D, sigma=0.2, main = "Astrocytes 0D")
Gfap_Intensity_5D <- density(Gfap_Superimposed_5x_5D, sigma=0.2, main = "Astrocytes 5D")
Gfap_Intensity_15D <- density(Gfap_Superimposed_5x_15D, sigma=0.2, main = "Astrocytes 15D")
Gfap_Intensity_30D <- density(Gfap_Superimposed_5x_30D, sigma=0.2, main = "Astrocytes 30D")

Iba1_Intensity_0D <- density(Iba1_Superimposed_5x_0D, sigma=0.2, main = "Microglia 0D")
Iba1_Intensity_5D <- density(Iba1_Superimposed_5x_5D, sigma=0.2, main = "Microglia 5D")
Iba1_Intensity_15D <- density(Iba1_Superimposed_5x_15D, sigma=0.2, main = "Microglia 15D")
Iba1_Intensity_30D <- density(Iba1_Superimposed_5x_30D, sigma=0.2, main = "Microglia 30D")
```

### 5.8.3 Influence of neurons in astrocyte allocation

#### 5.8.3.1 Fit the models for astrocytes/neurons covariance

We fit non-stationary poisson process models using the `ppm` function from `spatstat`. Still, please note that our model of reference is the one generated using `mppm`. The current models refer to the `fbetas` function exclusively. The same consideration apply for microglia/neurons covariance.

```{r}
#| label: 5x_Superimposed_Astrocytes-neurons_ppm
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D
Astrocytes_Neurons_Covariance_0D <- ppm(Gfap_Superimposed_5x_0D ~ NeuN_Intensity_0D)

# For 5D
Astrocytes_Neurons_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ NeuN_Intensity_5D)

# For 15D
Astrocytes_Neurons_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ NeuN_Intensity_15D)

# For 30D
Astrocytes_Neurons_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ NeuN_Intensity_30D)
```

#### 5.8.3.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: 5x_Superimposed_Astrocytes-neurons_ppmSummary
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Neurons_Covariance_0D)
summary(Astrocytes_Neurons_Covariance_5D)
summary(Astrocytes_Neurons_Covariance_15D)
summary(Astrocytes_Neurons_Covariance_30D)
```

#### 5.8.3.3 Calculate the influence

Here, we calculate the influence of each data point in the final outcome. The anomalous point (with higher residuals) load the greater influence. The `dfbetas` function allows visualizing the direction of which the covariant (neuronal intensity) affects astrocyte allocation.

```{r}
#| label: 5x_Superimposed_Astrocytes-neurons_Influence
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Astrocytes_Neurons_Covariance_Influence_0D <- dfbetas(Astrocytes_Neurons_Covariance_0D)

# For 5 DPI
Astrocytes_Neurons_Covariance_Influence_5D <- dfbetas(Astrocytes_Neurons_Covariance_5D)

# For 15 DPI
Astrocytes_Neurons_Covariance_Influence_15D <- dfbetas(Astrocytes_Neurons_Covariance_15D)

# For 30 DPI
Astrocytes_Neurons_Covariance_Influence_30D <- dfbetas(Astrocytes_Neurons_Covariance_30D)
```

#### 5.8.3.4 Plot the influence

We plot the influence, as shown in Figure 2B of the main research article. Please note that the following plots are for superimposed brains.

```{r}
#| label: 5x_Superimposed_Astrocytes-neurons_PlotInfluence
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Astrocyte_Influence_colourmap <- colourmap(heat.colors(12), range = c(-8e-04, 8e-04))

par(mfrow = c(2,2), mar=c(1,1,1,1), oma=c(1,1,1,1))

# For 0 DPI
plot(Astrocytes_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "0D")

# For 5 DPI
plot(Astrocytes_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "5D")

# For 15 DPI
plot(Astrocytes_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "15D")

# For 30 DPI
plot(Astrocytes_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "30D")

```

### 5.8.4 Influence of neurons in microglia allocation

In this section we perform the same procedure applied to astrocytes-neurons covariance.

#### 5.8.3.1 Fit the models for microglia/neurons covariance

```{r}
#| label: 5x_Superimposed_Microglia-neurons_ppm)
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 0D
Microglia_Neurons_Covariance_0D <- ppm(Iba1_Superimposed_5x_0D ~ NeuN_Intensity_0D)

# For 5D
Microglia_Neurons_Covariance_5D <- ppm(Iba1_Superimposed_5x_5D ~ NeuN_Intensity_5D)

# For 15D
Microglia_Neurons_Covariance_15D <- ppm(Iba1_Superimposed_5x_15D ~ NeuN_Intensity_15D)

# For 30D
Microglia_Neurons_Covariance_30D <- ppm(Iba1_Superimposed_5x_30D ~ NeuN_Intensity_30D)
```

#### 5.8.3.2 Model summaries

```{r}
#| label: 5x_Superimposed_Microglia-neurons_ppmSummary
#| include: true
#| warning: false
#| message: false
#| cache: true

Microglia_Neurons_Covariance_0D
Microglia_Neurons_Covariance_5D
Microglia_Neurons_Covariance_15D
Microglia_Neurons_Covariance_30D
```

#### 5.8.3.3 Calculate the influence

```{r}
#| label: 5x_Superimposed_Microglia-neurons_Influence
#| include: true
#| warning: false
#| message: false

# For 0 DPI
Microglia_Neurons_Covariance_Influence_0D <- dfbetas(Microglia_Neurons_Covariance_0D)

# For 5 DPI
Microglia_Neurons_Covariance_Influence_5D <- dfbetas(Microglia_Neurons_Covariance_5D)

# For 15 DPI
Microglia_Neurons_Covariance_Influence_15D <- dfbetas(Microglia_Neurons_Covariance_15D)

# For 30 DPI
Microglia_Neurons_Covariance_Influence_30D <- dfbetas(Microglia_Neurons_Covariance_30D)
```

#### 5.8.3.4 Plot the influence

We plot the influence

```{r}
#| label: 5x_Superimposed_Microglia-neurons_PlotInfluence
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

Microglia_Influence_colourmap <- colourmap(heat.colors(12), range = c(-8e-04, 8e-04))

par(mfrow = c(2,2), mar=c(1,1,1,1), oma=c(1,1,1,1))

# For 0 DPI
plot(Microglia_Neurons_Covariance_Influence_0D, col=Astrocyte_Influence_colourmap, main = "0D")

# For 5 DPI
plot(Microglia_Neurons_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "5D")

# For 15 DPI
plot(Microglia_Neurons_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "15D")

# For 30 DPI
plot(Microglia_Neurons_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "30D")

```

# 6. Compartmentalization of glial scar

After analyzing the covariance between neurons and glial cells (astrocytes and microglia) our interest is to quantitatively assess the interaction between glial cells in the glial scar.

## 6.1 Relative distribution to x-axis

In this section, we use the `rhohat` function specifying the x-axis as an argument (covariant). This results in an analysis of the positioning of glia in the coordinates of the ischemic hemisphere. As before, we specify `do.CI=FALSE` to calculate later confidence intervals from the pooling per DPI. We exclude control animals (0 DPI) given that this brains do not comprise a glial scar.

### 6.1.1 Rhohat calculation for astrocytes

```{r}
#| label: 5x_Astrocytes-X_Rhohat
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_RhohatX_5D <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_5D <- pool(Astrocytes_RhohatX_5D)

# For 15 DPI
Astrocytes_RhohatX_15D <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_15D <- pool(Astrocytes_RhohatX_15D)

# For 30 DPI
Astrocytes_RhohatX_30D <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))

Astrocytes_RhohatX_30D <- pool(Astrocytes_RhohatX_30D)
```

### 6.1.2 Plot the rhohat for astroytes

Here, we generate plots for each time point.

```{r}
#| label: 5x_Astrocytes-X_PlotRhohat
#| include: true
#| warning: false
#| message: false


# For 5 DPI
png("Plots/ScarCompartments/Astrocytes_RhohatX_5D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6","-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()


# For 15 DPI
png("Plots/ScarCompartments/Astrocytes_RhohatX_15D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_15D,
     shade = c("lorho", "hirho"),
        las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()

# For 30 DPI
png("Plots/ScarCompartments/Astrocytes_RhohatX_30D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Astrocytes_RhohatX_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 3,
     cex.axis = 3,
     lwd = 6,
     legend=FALSE,
          xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()
```

These graphs ae shown in the Figure 3A of the main research article.

### 6.1.3 Fit the mpm model for astrocytes

We fit a `mppm` model having the x-axis as a random effect (variyng by DPI). The control group is excluded given that it does not comprise reactive glia forming a scar. The same considerations apply for reacive microglia

```{r}
#| label: 5x_Astrocytes-X_mppm
#| include: true
#| warning: false
#| message: false

# We exclude the control time point
PointPatterns_5x_sub <- PointPatterns_5x[PointPatterns_5x$DPI != "0D",]

Astrocytes_XDistribution <- mppm (Astrocytes ~ x, random = ~ x| DPI, data = PointPatterns_5x_sub)

summary(Astrocytes_XDistribution)
```

The results show a negative slope for fixed effects and increasing slopes for the random effects with DPI. This implies that astrocytes progressively displace with respect to the x-axis of the ischemic hemisphere.

### 6.1.4 Rhohat calculation for astrocytes

We perform the same calculation for microglia.

```{r}
#| label: 5x_Microglia-X_Rhohat
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Microglia_RhohatX_5D <- with(PointPatterns_5x_5D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_5D <- pool(Microglia_RhohatX_5D)


# For 15 DPI
Microglia_RhohatX_15D <- with(PointPatterns_5x_15D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_15D <- pool(Microglia_RhohatX_15D)


# For 30 DPI
Microglia_RhohatX_30D <- with(PointPatterns_5x_30D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))

Microglia_RhohatX_30D <- pool(Microglia_RhohatX_30D)
```

### 6.1.5 Plot the rhohat for microglia

```{r}
#| label: 5x_Microglia-X_PlotRhohat
#| include: true
#| warning: false
#| message: false

# For 5 DPI
png("Plots/ScarCompartments/Microglia_RhohatX_5D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_5D,
     shade = c("lorho", "hirho"),
    las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6","-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(IBA1)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()


# For 15 DPI
png("Plots/ScarCompartments/Microglia_RhohatX_15D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_15D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(IBA1)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()

# For 30 DPI
png("Plots/ScarCompartments/Microglia_RhohatX_30D.png", width = 500, height = 400)
par(mar=c(6,8,1,1))
plot(Microglia_RhohatX_30D,
     shade = c("lorho", "hirho"),
     las=1,
     legendargs=list(xpd=TRUE),
     main = "",
     xlab = "",
     ylab = "",
     ylim=c(0, 50),
     cex.lab = 2.5,
     cex.axis = 2.5,
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-7, -1, 1), labels = c("-7", "-6", "-5", "-4", "-3", "-2", "-1"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 80, 20), labels = c("0","20", "40", "60", "80"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "X coordinates", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(IBA1)", mgp = c(5, 1, 0), cex.lab = 2.5)

dev.off()
```

### 6.1.6 Fit the mpm model for microglia

```{r}
#| label: 5x_Microglia-X_mppm
#| include: true
#| warning: false
#| message: false

Microglia_XDistribution <- mppm (Microglia ~ x, random = ~ x| DPI, data = PointPatterns_5x_sub)

summary(Microglia_XDistribution)
```

Contrary to astrocytes, results for microglia show and increasing slope for fixed effects and increasing slopes for random effects.

## 6.2 Plot perspective figures for astrocytes and microglia

We can also visualize the distribution of astrocytes and microglia using the `persp` from the `graphics` built-in package to create perspective plots. This function allows arguments to control the angle and intensity scale for visualization. The graphs are shown in **Figure 3 and supplementary figure 5** of the main research article.

### 6.2.1 Plot perspective plot for astrocytes

```{r}
#| label: 5x_Astrocytes_Perspective
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
#| fig-width: 15
#| fig-height: 5

Pers_Colmap <- colourmap(topo.colors(256), range = c(0, 600))

par(mfrow=c(2,2))
D0 <- persp(Gfap_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_0D, Z= Gfap_Intensity_0D, M=D0, pch=20, cex=0.1, col = "white")

D5 <- persp(Gfap_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_5D, Z= Gfap_Intensity_5D, M=D5, pch=20, cex=0.1, col = "white")

D15 <- persp(Gfap_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_15D, Z= Gfap_Intensity_15D, M=D15, pch=20, cex=0.1, col = "white")

D30 <- persp(Gfap_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=40, shade = 0.2, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity", visible=TRUE)
perspPoints(Iba1_Superimposed_5x_30D, Z= Gfap_Intensity_30D, M=D30, pch=20, cex=0.1, col = "white")
```

### 6.2.2 Plot perspective figures for microglia

We do the same for microglia

```{r}
#| label: 5x_Microglia_Perspective
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 2
#| fig-width: 15
#| fig-height: 5

par(mfrow=c(2,2))
persp(Iba1_Intensity_0D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_5D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_15D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

persp(Iba1_Intensity_30D,colmap = Pers_Colmap, theta=70, phi=30, shade = 0.1, main="", apron=TRUE, xlab = "X",  ylab = "Y", zlab = "Intensity")

```

## 6.3 Analysis of astrocytes-miroglia covariance using mppm

Now, we fit a `mppm` model without a global intercept (0 + in the fumula) and interaction (\*) between DPI and microglia spatial intensity (Microglia_Dens).

```{r}
#| label: 5x_AstrocytesMicroglia_mppm
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Microglia_Fit1 <- mppm(Astrocytes ~ 0 + DPI*Microglia_Dens, data=PointPatterns_5x_sub) 

summary(Astrocytes_Microglia_Fit1)
```

The results show that the negative correlation between both cell types becomes less negative as the DPI increments. This is consistent with a two population of cells which intermingle progressively.

## 6.4 Modeling of astrocytes-microglia covariance using tessellations

We use the same Bayesian modeling implemented in [5.3 Bayesian modeling of glial-neurons covariance] for analyzing the number of astrocytes in tessellated microglial regions.

```{r}
#| label: 5x_Astrocytes-Microglia_Tess
#| include: true
#| warning: false
#| message: false

set.seed(8807)

Astrocytes_Microglia_Tess_Mdl1 <- bf(Astrocytes ~ 0 + MicroglialDensity:DPI)

get_prior(Astrocytes_Microglia_Tess_Mdl1, 
          data = Astrocytes_Microglia_Tess, 
          family = student)

Astrocytes_Microglia_Tess_Fit1 <- brm(data = Astrocytes_Microglia_Tess,
                          family = student(),
                          formula = Astrocytes_Microglia_Tess_Mdl1,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/CellCovariance/Astrocytes_Microglia_Tess_Fit1.rds",
                          file_refit = "never")

Astrocytes_Microglia_Tess_Fit1 <- add_criterion(Astrocytes_Microglia_Tess_Fit1, c("loo", "waic", "bayes_R2"))
```
## 6.5 Model analysis

### 6.5.1 Posterior predictive checks

We plot the posterior predictive checks

```{r}
#| label: 5x_Astrocytes-Microglia_Tess_PPchecks
#| include: true
#| warning: false
#| message: false
#| results: false

color_scheme_set("darkgray")

# Model 1
Astrocytes_Microglia_Mdl1_ppchecks <- brms::pp_check(Astrocytes_Microglia_Tess_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "Model with interaction",
       caption = "Model: Intensity ~ MicroglialDensity:DPI") +
  
  scale_x_continuous(name="IBA1 spatial intensity",
                     limits=c(0, 1500), 
                     breaks=seq(0, 1500,300)) +
  
  scale_y_continuous(limits=c(0, 0.003), 
                     breaks=seq(0,0.003,0.001)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Astrocytes_Microglia_Mdl1_ppchecks, 
       file = "Plots/ScarCompartments/Astrocytes_Microglia_Mdl3_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

Astrocytes_Microglia_Mdl1_ppchecks
```

We see no major deviations in the predictions.

### 6.5.2 Plot MCMC chains

We plot the model diagnostics using functions from `bayesplot`.

```{r}
#| label: 5x_Astrocytes-Microglia_Tess_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Astrocytes_Microglia_Tess_Fit1)
color_scheme_set("viridis")

Astrocytes_Microglia_Tess_Trace <- mcmc_trace(Astrocytes_Microglia_Tess_Fit1, pars = c("b_MicroglialDensityLow:DPI5D", "b_MicroglialDensityLow:DPI15D", "b_MicroglialDensityLow:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

# We plot the sample traces
Astrocytes_Microglia_Tess_Trace
```

### 6.5.3 Model summary

As usual, we plot the summary for the model. The estimates, standard error (se) and credible intervals (CI) for each cell type are displayed in **supplementary table 7**.

```{r}
#| label: 5x_Astrocytes-Microglia_Summary
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Astrocytes_Microglia_Tess_Fit1)

Astrocytes_Microglia_Tess_Fit1_Table <- modelsummary(Astrocytes_Microglia_Tess_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Astrocytes_Microglia_Tess_Fit1_Table , 
            filename = "Tables/Gfap_IBA1_Tess_Fit1_Table .tex")
```
## 6.6 Calculate the contrast between time points

We calculate the contrast between time points as done previusly with the `emmeans` package.

```{r}
#| label: 5x_Astrocytes-Microglia_Contrast
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# For astrocytes-microglia covariance
Astrocytes_Microglia_Contrast <- Astrocytes_Microglia_Tess_Fit1%>%
emmeans(~ MicroglialDensity | DPI) %>%
contrast(method = "revpairwise", by = "MicroglialDensity") %>%
gather_emmeans_draws() %>% sample_n(100)


# We calculate difference between 30 and 15 DPI for low
hypothesis(Astrocytes_Microglia_Tess_Fit1, "MicroglialDensityLow:DPI30D >   MicroglialDensityLow: DPI15D", class = "b", seed = 8807)

Astrocytes_Microglia_hypothesis <- Astrocytes_Microglia_Contrast %>%
  filter(contrast == "30D - 15D" & MicroglialDensity == "Low") 

sum(Astrocytes_Microglia_hypothesis$.value > 141) / 600


# We calculate difference between 30 and 5 DPI for low
hypothesis(Astrocytes_Microglia_Tess_Fit1, "MicroglialDensityLow:DPI30D >   MicroglialDensityLow: DPI5D", class = "b", seed = 8807)

Astrocytes_Microglia_hypothesis <- Astrocytes_Microglia_Contrast %>%
  filter(contrast == "30D - 5D" & MicroglialDensity == "Low") 

sum(Astrocytes_Microglia_hypothesis$.value > 141) / 600


# We calculate difference between 15 and 5 DPI for high
hypothesis(Astrocytes_Microglia_Tess_Fit1, "MicroglialDensityHigh:DPI30D >   MicroglialDensityHigh: DPI15D", class = "b", seed = 8807)

Astrocytes_Microglia_hypothesis <- Astrocytes_Microglia_Contrast %>%
  filter(contrast == "30D - 15D" & MicroglialDensity == "High") 

sum(Astrocytes_Microglia_hypothesis$.value < - 141) / 600

```

## 6.7 Visualize the contrast for astrocytes-microglia covariance

We plot the contrast between time points of interest

```{r}
#| label: 5x_Astrocytes-Microglia_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true


set.seed(8807)

Astrocytes_Microglia_Contrast_Sub <- Astrocytes_Microglia_Contrast[
  (Astrocytes_Microglia_Contrast$contrast=="30D - 5D"|
  Astrocytes_Microglia_Contrast$contrast=="30D - 15D"|
   Astrocytes_Microglia_Contrast$contrast=="15D - 5D"),]
   

Astrocytes_Microglia_Contrast_Sub$contrast <- factor(Astrocytes_Microglia_Contrast_Sub$contrast, levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Astrocytes_Microglia_Contrast_Fig1 <- Astrocytes_Microglia_Contrast_Sub %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 141))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-141, 141), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  ggtitle("GFAP / IBA1 covariance") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-500, 600), 
                     breaks=seq(-500,600, 200)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +

  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 30, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.85, 0.2),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) +
  
  facet_wrap(~ MicroglialDensity, ncol = 1)
  
ggsave(plot = Astrocytes_Microglia_Contrast_Fig1,
       file = "Plots/ScarCompartments/Astrocytes_Microglia_Tess_Patch.png", 
       width = 10, 
       height = 10, 
       units = "cm")

Astrocytes_Microglia_Contrast_Fig1
```

The results are shown in Figure 4D of the main research article.

## 6.8 Plot representative tesselations for astrocytes / microglia covariance

```{r}
#| label: 5x_Astrocytes-Microglia_PlotTessellations
#| include: true
#| warning: false
#| message: false

par(mfrow = c(1,3), mar=c(1,1,1,1), oma=c(1,1,1,1))

# Mouse 33, 5 DPI
#png("Plots/ScarCompartments/Astrocytes_Microglia_Tess_5D.png", width = 250, height = 500)
plot(PointPatterns_5x$Microglia_Tess$`121`, 
     col=c("cyan", "green") ,
     main = "5D") 
plot(PointPatterns_5x$Astrocytes$`121`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 04, 15 DPI
#png("Plots/Astrocytes_Microglia_Tess_15D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Tess$`13`, 
     col=c("cyan", "green")  ,
     main = "15D") 
plot(PointPatterns_5x$Astrocytes$`13`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()

# Mouse 05, 30 DPI
#png("Plots/Astrocytes_Microglia_Tess_30D.png", width = 500, height = 1000)
plot(PointPatterns_5x$Microglia_Tess$`14`, 
     col=c("cyan", "green")  ,
     main = "30D") 
plot(PointPatterns_5x$Astrocytes$`14`, pch = 16, cex = 0.4, col = "black", add = TRUE)
#dev.off()
```

These tessellations are shown in the Figure 3C of the main research article.

## 6.9 Influence of the spatial intensity of microglia in astrocyte allocation

We calculate the influence using the `dbetas` function as done in [5.8 Influence of the spatial intensity of neurons in glial allocation].

### 6.9.1 Fit the models for astrocytes/microglia covariance

```{r}
#| label: 5x_Superimposed_Astrocytes-microglia_ppm
#| include: true
#| warning: false
#| message: false
#| cache: true

# For 5D
Astrocytes_Microglia_Covariance_5D <- ppm(Gfap_Superimposed_5x_5D ~ Iba1_Intensity_5D)

# For 15D
Astrocytes_Microglia_Covariance_15D <- ppm(Gfap_Superimposed_5x_15D ~ Iba1_Intensity_15D)

# For 30D
Astrocytes_Microglia_Covariance_30D <- ppm(Gfap_Superimposed_5x_30D ~ Iba1_Intensity_30D)
```

### 6.9.2 Model summaries

Here we plot all the model summaries

```{r}
#| label: 5x_Superimposed_Astrocytes-microglia_ppmSummary
#| include: true
#| warning: false
#| message: false
#| cache: true

Astrocytes_Microglia_Covariance_5D
Astrocytes_Microglia_Covariance_15D
Astrocytes_Microglia_Covariance_30D
```

### 6.9.3 Calculate the influence

```{r}
#| label: 5x_Superimposed_Astrocytes-microglia_Influence
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Microglia_Covariance_Influence_5D <- dfbetas(Astrocytes_Microglia_Covariance_5D)

# For 15 DPI
Astrocytes_Microglia_Covariance_Influence_15D <- dfbetas(Astrocytes_Microglia_Covariance_15D)

# For 30 DPI
Astrocytes_Microglia_Covariance_Influence_30D <- dfbetas(Astrocytes_Microglia_Covariance_30D)
```

### 6.9.4 Plot the influence

We plot the influence as shown in the supplementary figure 6A.

```{r}
#| label: 5x_Superimposed_Astrocytes-microglia_PlotInfluence
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5


Astrocyte_Influence_colourmap <- colourmap(heat.colors(12), range = c(-0.001, 0.001))

par(mfrow = c(1,3), mar=c(1,1,1,1), oma=c(1,1,1,1))

# For 5 DPI
plot(Astrocytes_Microglia_Covariance_Influence_5D, col=Astrocyte_Influence_colourmap, main = "5D")

# For 15 DPI
plot(Astrocytes_Microglia_Covariance_Influence_15D, col=Astrocyte_Influence_colourmap, main = "15D")

# For 30 DPI
plot(Astrocytes_Microglia_Covariance_Influence_30D, col=Astrocyte_Influence_colourmap, main = "30D")

```

# 7. Centroid/Distance measurements for astrocytes and microglia

## 7.1 Create raster layers

In this sections, we perform distance-based measurements bayed on [raster layers](https://pro.arcgis.com/en/pro-app/latest/help/data/imagery/introduction-to-raster-data.htm). This is a matrix of pixels representing information: in our case, the density of points in a point pattern. We use the `raster` function from the `raster` package [@raster] to convert density kernels into raster layers and segment regions of high cell density. This correspond to sectors areas where the glial scar is present, that is, densely packed reactive glial cells.

### 7.1.1 Create raster layers (per brain) for astrocytes

We create the raster layers and pass the `rasterToPoints` function to subset areas over 25 (high density) in the raster.

```{r}
#| label: 5x_Astrocytes_Raster
#| include: true
#| warning: false
#| message: false

# For 5 DPI
PointPatterns_5x_5D$Astrocytes_Dens2 <- with(PointPatterns_5x_5D, density(Astrocytes, sigma= 0.3))
PointPatterns_5x_5D$Astrocytes_Raster <- with(PointPatterns_5x_5D, raster(Astrocytes_Dens2))
PointPatterns_5x_5D$Astrocytes_High <- with(PointPatterns_5x_5D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))


# For 15 DPI
PointPatterns_5x_15D$Astrocytes_Dens2 <- with(PointPatterns_5x_15D, density(Astrocytes, sigma= 0.3))
PointPatterns_5x_15D$Astrocytes_Raster <- with(PointPatterns_5x_15D, raster(Astrocytes_Dens2))
PointPatterns_5x_15D$Astrocytes_High <- with(PointPatterns_5x_15D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))


# For 30 DPI
PointPatterns_5x_30D$Astrocytes_Dens2 <- with(PointPatterns_5x_30D, density(Astrocytes, sigma= 0.3))
PointPatterns_5x_30D$Astrocytes_Raster <- with(PointPatterns_5x_30D, raster(Astrocytes_Dens2))
PointPatterns_5x_30D$Astrocytes_High <- with(PointPatterns_5x_30D, rasterToPoints(Astrocytes_Raster, fun=function(x){x>25}))
```

### 7.1.2 Create raster layers (per brain) for microglia

```{r}
#| label: 5x_Microglia_Raster
#| include: true
#| warning: false
#| message: false

# For 5 DPI
PointPatterns_5x_5D$Microglia_Dens2 <- with(PointPatterns_5x_5D, density(Microglia, sigma= 0.3))
PointPatterns_5x_5D$Microglia_Raster <- with(PointPatterns_5x_5D, raster(Microglia_Dens2))
PointPatterns_5x_5D$Microglia_High <- with(PointPatterns_5x_5D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))


# FOr 15 DPI
PointPatterns_5x_15D$Microglia_Dens2 <- with(PointPatterns_5x_15D, density(Microglia, sigma= 0.3))
PointPatterns_5x_15D$Microglia_Raster <- with(PointPatterns_5x_15D, raster(Microglia_Dens2))
PointPatterns_5x_15D$Microglia_High <- with(PointPatterns_5x_15D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))


# For 30 DPI
PointPatterns_5x_30D$Microglia_Dens2 <- with(PointPatterns_5x_30D, density(Microglia, sigma= 0.3))
PointPatterns_5x_30D$Microglia_Raster <- with(PointPatterns_5x_30D, raster(Microglia_Dens2))
PointPatterns_5x_30D$Microglia_High <- with(PointPatterns_5x_30D, rasterToPoints(Microglia_Raster, fun=function(x){x>25}))
```

## 7.2 Calculte centroids and standart deviations

Now, we calculate the centroids and the stadart deviation (points dispersion) of the high density areas subset. We employ the same procedure for astrocytes and microglia.

### 7.2.1 Caclulate point dispersion (Sd) for astrocytes

```{r}
#| label: 5x_Astrocytes_Dispersion
#| include: true
#| warning: false
#| message: false

Astrocytes_sd_5D <- with(PointPatterns_5x_5D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))

Astrocytes_sd_15D <- with(PointPatterns_5x_15D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))

Astrocytes_sd_30D <- with(PointPatterns_5x_30D, sqrt(sum((Astrocytes_High[,1] - Astrocytes_High[1])^2 + (Astrocytes_High[,2] - Astrocytes_High[2])^2) / nrow(Astrocytes_High)))
```

### 7.2.2 Calculate centroids for astrocytes

Now, we calculate the centroid of each subset to mark the center of the cel mass.

```{r}
#| label: 5x_Astrocytes_Centroids
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Centroid_5D <- with(PointPatterns_5x_5D, colMeans(Astrocytes_High))
Astrocytes_Centroid_5D  <- as.data.frame(Astrocytes_Centroid_5D )
Astrocytes_Centroid_5D  <- Astrocytes_Centroid_5D [,1:2]
Astrocytes_Centroid_5D <- cbind(Astrocytes_Centroid_5D, Astrocytes_sd_5D)
names(Astrocytes_Centroid_5D)[3] <- "sd"

Astrocytes_Centroid_5D <- cbind(Astrocytes_Centroid_5D, DPI = rep("5D", nrow(Astrocytes_Centroid_5D)))

# For 15 DPI
Astrocytes_Centroid_15D <- with(PointPatterns_5x_15D, colMeans(Astrocytes_High))
Astrocytes_Centroid_15D  <- as.data.frame(Astrocytes_Centroid_15D )
Astrocytes_Centroid_15D  <- Astrocytes_Centroid_15D [,1:2]
Astrocytes_Centroid_15D <- cbind(Astrocytes_Centroid_15D, Astrocytes_sd_15D)
names(Astrocytes_Centroid_15D)[3] <- "sd"

Astrocytes_Centroid_15D <- cbind(Astrocytes_Centroid_15D, DPI = rep("15D", nrow(Astrocytes_Centroid_15D)))

# For 30 DPI
Astrocytes_Centroid_30D <- with(PointPatterns_5x_30D, colMeans(Astrocytes_High))
Astrocytes_Centroid_30D  <- as.data.frame(Astrocytes_Centroid_30D )
Astrocytes_Centroid_30D  <- Astrocytes_Centroid_30D [,1:2]
Astrocytes_Centroid_30D <- cbind(Astrocytes_Centroid_30D, Astrocytes_sd_30D)
names(Astrocytes_Centroid_30D)[3] <- "sd"

Astrocytes_Centroid_30D <- cbind(Astrocytes_Centroid_30D, DPI = rep("30D", nrow(Astrocytes_Centroid_30D)))

# Bind data tables
Astrocytes_Centroid <- rbind (Astrocytes_Centroid_5D, Astrocytes_Centroid_15D, Astrocytes_Centroid_30D)

# Create cell factor
Astrocytes_Centroid <- cbind(Astrocytes_Centroid, Cell = rep("GFAP", nrow(Astrocytes_Centroid)))

write.csv(Astrocytes_Centroid, "DataTables/5x_Gfap_Centroid-SD.csv") 
```

We save a table called `5x_Astrocytes_Centroid-SD` containing five columns. **x** and **y** are the xy coordinates of the centroid of high density cell mass. **sd** correspond to the dispersion of the points in the high density areas. **DPI** represents the days post-ischemia of each point pattern and **Cell** displays the cell type\< in this case, astrocytes.

### 7.2.3 Caclulate point dispersion (Sd) for microglia

We perform the same procedure for microglia.

```{r}
#| label: 5x_Microglia_Dispersion
#| include: true
#| warning: false
#| message: false

Microglia_sd_5D <- with(PointPatterns_5x_5D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))

Microglia_sd_15D <- with(PointPatterns_5x_15D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))

Microglia_sd_30D <- with(PointPatterns_5x_30D, sqrt(sum((Microglia_High[,1] - Microglia_High[1])^2 + (Microglia_High[,2] - Microglia_High[2])^2) / nrow(Microglia_High)))
```

### 7.2.4 Calculate centroids for microglia

```{r}
#| label: 5x_Microglia_Centroids
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Microglia_Centroid_5D <- with(PointPatterns_5x_5D, colMeans(Microglia_High))
Microglia_Centroid_5D  <- as.data.frame(Microglia_Centroid_5D )
Microglia_Centroid_5D  <- Microglia_Centroid_5D [,1:2]
Microglia_Centroid_5D <- cbind(Microglia_Centroid_5D, Microglia_sd_5D)
names(Microglia_Centroid_5D)[3] <- "sd"

Microglia_Centroid_5D <- cbind(Microglia_Centroid_5D, DPI = rep("5D", nrow(Microglia_Centroid_5D)))

# For 15 DPI
Microglia_Centroid_15D <- with(PointPatterns_5x_15D, colMeans(Microglia_High))
Microglia_Centroid_15D  <- as.data.frame(Microglia_Centroid_15D )
Microglia_Centroid_15D  <- Microglia_Centroid_15D [,1:2]
Microglia_Centroid_15D <- cbind(Microglia_Centroid_15D, Microglia_sd_15D)
names(Microglia_Centroid_15D)[3] <- "sd"

Microglia_Centroid_15D <- cbind(Microglia_Centroid_15D, DPI = rep("15D", nrow(Microglia_Centroid_15D)))

# For 30 DPI
Microglia_Centroid_30D <- with(PointPatterns_5x_30D, colMeans(Microglia_High))
Microglia_Centroid_30D  <- as.data.frame(Microglia_Centroid_30D )
Microglia_Centroid_30D  <- Microglia_Centroid_30D [,1:2]
Microglia_Centroid_30D <- cbind(Microglia_Centroid_30D, Microglia_sd_30D)
names(Microglia_Centroid_30D)[3] <- "sd"

Microglia_Centroid_30D <- cbind(Microglia_Centroid_30D, DPI = rep("30D", nrow(Microglia_Centroid_30D)))

# Bind data tables
Microglia_Centroid <- rbind (Microglia_Centroid_5D, Microglia_Centroid_15D, Microglia_Centroid_30D)

# Create cell factor
Microglia_Centroid <- cbind(Microglia_Centroid, Cell = rep("IBA1", nrow(Microglia_Centroid)))

write.csv(Astrocytes_Centroid, "DataTables/5x_Iba1_Centroid-SD.csv") 
```

We obtain the same table for microglia.

## 7.3 Plot centroids for astrocytes and microglia

In this section, we use `ggplot` to plot all the centroids and corresponding deviation using the `stat_ellipse` function. This includes binding astrocytes and microglia data sets and calculate a mean centroid per time point.

```{r}
#| label: 5x_Astrocytes-Microglia_PlotCentroids
#| include: true
#| warning: false
#| message: false

# Bind astrocytes and microglia data sets
Scar_Centroid <- rbind (Astrocytes_Centroid, Microglia_Centroid)
Scar_Centroid$DPI <- factor(Scar_Centroid$DPI, levels = c("5D", "15D", "30D"))
Scar_Centroid$Cell <- factor(Scar_Centroid$Cell, levels = c("GFAP", "IBA1"))

# Calculate a mean centroid per DPI
Scar_Centroid_summary <- aggregate(Scar_Centroid[, c("x", "y")], by = Scar_Centroid[, c("DPI", "Cell")], mean)

# Create the ggplot figure
Scar_Centroid_fig <- ggplot(Scar_Centroid, aes (x=x, y=y, color = Cell, fill = Cell)) + 
  geom_point() +
  geom_point (data=Scar_Centroid_summary, aes(x=x, y=y, shape = Cell), size = 5, color = "black" ) +

stat_ellipse(type = "norm", level = 0.80, geom = "polygon", aes(fill = Cell), alpha = 0.1) +
 scale_fill_manual(values = c("blue", "red")) +
scale_color_manual(values = c("blue", "red")) +
  
geom_text(data=Scar_Centroid_summary, aes(label=paste0("(", round(x, 1), ", ", round(y, 1), ")")), color = "black", hjust = c(-0.2, -0.1, 1, 0.1, -0.2, 0.1), vjust = c(-0.2, -0.4, -1, 2, 1, 2) ) +
   
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.7,0.9),
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) +
      
    facet_grid(~DPI)

ggsave(plot = Scar_Centroid_fig, "Plots/ScarCompartments/Scar_Centroid_fig.png", 
       width = 12, 
       height = 9, 
       units = "cm")

Scar_Centroid_fig
```

This figure is shown in the Suppementary Figure 4B of the main research article.

## 7.4 Calculate the centroid distance

We use additional user-defined functions to caculate the distance between astrocytes and microglia centroids per brain.

```{r}
#| label: 5x_Astrocytes-Microglia_CentroidDistance
#| include: true
#| warning: false
#| message: false

# calculate the distance between the points

dist_fun <- function(x1, y1, x2, y2) {
  sqrt((x2 - x1)^2 + (y2 - y1)^2)
}

Scar_Centroid_Wide <- cbind (Astrocytes_Centroid, Microglia_Centroid)
Scar_Centroid_Wide <- Scar_Centroid_Wide[,c(1:4,6:8)]
colnames(Scar_Centroid_Wide) <- c("xA", "yA","sdA", "DPI", "xM", "yM", "sdM")
Scar_Centroid_Wide$DPI <- factor(Scar_Centroid_Wide$DPI, levels = c("5D", "15D", "30D"))

# Apply the function to each row of the data frames
Scar_Centroid_Wide$Distance_Microglia <- mapply(dist_fun, Scar_Centroid_Wide$xA, Scar_Centroid_Wide$yA, Scar_Centroid_Wide$xM, Scar_Centroid_Wide$yM)

write.csv(Scar_Centroid_Wide, "DataTables/5x_Gfap_Iba1_Distance.csv")
```

We save the file `5x_Astrocytes_Miroglia_Distance.csv` containing both the centroid coordinates for astrocytes (xA, yA) and the point patterns dispersion (sdA), as well as for microglia (xM, yM and sdM). In addition, the column "Distance_Microglia" depicts the distance between the centroids of astrocytes and microglial cell mass per brain.

### 7.4.1 Plot the centroid distance

We plot a new graph containing the centroids for astrocytes and microglia with a `geom_segment` tracing the distance between centroids in the same brain.

```{r}
#| label: 5x_Astrocytes-Microglia_PlotCentroidDistance
#| include: true
#| warning: false
#| message: false

Scar_Distance_fig <- ggplot(Scar_Centroid_Wide, aes(x = xA, y = yA)) +
  geom_point(color = "blue") +
  geom_point(data = Scar_Centroid_Wide, aes(x = xM, y = yM), color = "red" ) +
  
  geom_segment(aes(x = xA, y = yA, xend = xM, yend = yM),
               color = "black", size = 1) +
  
  scale_y_continuous(name= "x") +
  
  scale_x_continuous(name="y") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position=c(0.7,0.9),
      legend.direction="horizontal",
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=10)) +
      
    facet_grid(~DPI)

ggsave(plot = Scar_Distance_fig, 
       file = "Plots/ScarCompartments/Gfap_Iba1_IndividualDistances.png", 
       width = 12, 
       height = 9, 
       units = "cm")

Scar_Distance_fig
```

## 7.5 Modeling of astrocytes-microglia centroid distance and dispersion at the glial scar

### 7.5.1 Modeling of astrocytes-microglia centroid distance

We use the same Bayesian strategy for modeling the distance between the centroids of astrocytes and microglia using the `5x_Astrocytes_Miroglia_Distance.csv` data set or the corresponding R object. We set DPI as the inique linear predictor without the calculation of a global intercept, and include a term for heteroskedasticity (sigma) to account for non-constant variance, as the previous generated graphs show.

We use this user-defined prior to improve the exploration of the parameter space.

$$
\beta \sim Student-t(df = 3, location = 1, scale = 0.5), lb = 0
$$

All other priors are default by `brms`.

```{r}
#| label: 5x_Astrocytes-Miroglia_Distance
#| include: true
#| warning: false
#| message: false

Scar_Distance_Mdl1 <- bf(Distance_Microglia ~ 0 + DPI,
                         sigma ~ 0 + DPI) 

get_prior(Scar_Distance_Mdl1, data = Scar_Centroid_Wide) 

Scar_Distance_Prior <- prior(student_t(3, 1, 0.5), class = b, lb = 0)

Scar_Distance_Fit1 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_Distance_Mdl1,
                          prior = Scar_Distance_Prior,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/ScarDistance/Astrocytes_Microglia_Distance_Fit1.rds",
                          file_refit = "never")
```

### 7.5.2 Modeling of astrocytes - microglia dispersion

Here, we use several modeling strategies:

-   **Scar_sd_Mdl1:** We use the interaction of sdM (microglial standard deviation) and DPI as a linear predictor for astrocyte deviation.

$$
sdA_{i} = \beta_0 + \beta_1 * sdM_{i} + \beta_2 * DPI_{i} + \beta_3 * sdM_{i} * DPI_{i} + \epsilon_{i}
$$

-   **Scar_sd_Mdl2:** We use the same predictor than model Mdl1 but include sigma to account for heteroscedasticity.

$$
sdA_{i} = \beta_0 + \beta_1 * sdM_{i} + \beta_2 * DPI_{i} + \beta_3 * sdM_{i} * DPI_{i} + \epsilon_{sdA,i}$ $log_{\sigma_i} = \alpha_0 + \alpha_1 * sdM_{i} + \alpha_2 * DPI_{i} + \alpha_3 * sdM_{i} * DPI_{i} + \epsilon_{\alpha,i}
$$

-   **Scar_sd_Mdl3:** We regress `sdA` (astroyte dispersion) on `sdM` (microglia dispersion) and `DPI` (days post-ischemia) using smooth terms (splines) with 3 nodes.

$$
sdA_{i} = f_{s(sdM)}(sdM_{i}) + f_{s(DPI)}(DPI_{i}) + \epsilon_{i}
$$

All model uses the default `brms` priors.

```{r}
#| label: 5x_ScarSD_Modelig
#| include: true
#| warning: false
#| message: false

Scar_Centroid_Wide$DPI2 <- as.numeric(sub("D", "", Scar_Centroid_Wide$DPI))


# Model 1: Model with varying intercepts and slopes
Scar_sd_Mdl1 <- bf(sdA ~ sdM * DPI)

get_prior(Scar_sd_Mdl1, data = Scar_Centroid_Wide) 

ScarDistance_Prior <- c(prior( student_t(3, 30, 20), class = b, lb= 0))
                              
Scar_sd_Fit1 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_sd_Mdl1,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/ScarDistance/Scar_sd_Fit1.rds",
                          file_refit = "never")

# Add loo for model comparison
Scar_sd_Fit1 <- 
  add_criterion(Scar_sd_Fit1, c("loo", "waic", "bayes_R2"))


# Model 2: Model with varying intercepts and slopes with Heteroscedasticity 
Scar_sd_Mdl2 <- bf(sdA ~ sdM * DPI,
                   sigma ~ sdM * DPI)

get_prior(Scar_sd_Mdl2, data = Scar_Centroid_Wide) 

Scar_sd_Fit2 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_sd_Mdl2,
                          #prior = ScarDistance_Prior,
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/ScarDistance/Scar_sd_Fit2.rds",
                          file_refit = "never")

# Add loo for model comparison
Scar_sd_Fit2 <- 
  add_criterion(Scar_sd_Fit2, c("loo", "waic", "bayes_R2"))


# Model 3: Model with spline interaction between sdm and DPI 
Scar_sd_Mdl3 <- bf(sdA ~ s(sdM) + s(DPI2, k = 3))
                   
get_prior(Scar_sd_Mdl3, data = Scar_Centroid_Wide) 

Scar_sd_Fit3 <- brm(data =  Scar_Centroid_Wide,
                          family = student,
                          formula = Scar_sd_Mdl3,
                          #prior = ScarDistance_Prior,
                          knots   = list(DPI2 = c(5, 15, 30)),
                          chains = 4, 
                          warmup = 2500, 
                          iter= 5000, 
                          seed = 8807,
                          control = list(adapt_delta = 0.99, max_treedepth = 15),
                          file = "BayesianModels/ScarDistance/Scar_sd_Fit3.rds",
                          file_refit = "never")

# Add loo for model comparison
Scar_sd_Fit3 <- 
  add_criterion(Scar_sd_Fit3, c("loo", "waic", "bayes_R2"))
```

## 7.6 Model analysis

### 7.6.1 For distance measurements

#### 7.6.1.1 Posterior predictive checks for

We plot the posterior predictive checks

```{r}
#| label: 5x_ScarDistance_PPchecks
#| include: true
#| warning: false
#| message: false
#| results: false

color_scheme_set("darkgray")

# Model 1
Scar_Distance_Mdl1_ppchecks <- brms::pp_check(Scar_Distance_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "Model with a single predictor",
       caption = "Model: Distance ~ DPI") +
  
  scale_x_continuous(name="GFAP - IBA1 distance (mm)",
                     limits=c(-1, 3), 
                     breaks=seq(-1, 3,1)) +
  
  scale_y_continuous(limits=c(0, 1.6), 
                     breaks=seq(0, 1.6,0.3)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Scar_Distance_Mdl1_ppchecks, 
       file = "Plots/ScarCompartments/Scar_Distance_Mdl11_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

Scar_Distance_Mdl1_ppchecks
```

We can appreciate that they are some visible variations between the data and the predictions.

#### 7.6.1.2 Plot MCMC chains

We plot the model diagnostics using functions from `bayesplot`.

```{r}
#| label: 5x_ScarDistance_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Scar_Distance_Fit1)
color_scheme_set("viridis")

Scar_Distance_Trace <- mcmc_trace(Scar_Distance_Fit1, pars = c("b_DPI5D", "b_DPI15D", "b_DPI30D"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

# We plot the sample traces
Scar_Distance_Trace
```

#### 7.6.1.3 Model summary

As usual, we plot the summary for the model. This results are not shown in the main research article

```{r}
#| label: 5x_ScarDistance_Summary
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Scar_Distance_Fit1)

Scar_Distance_Fit1_Table <- modelsummary(Scar_Distance_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Scar_Distance_Fit1_Table , 
            filename = "Tables/Gfap_Iba1_Distance_Fit1_Table .tex")
```

### 7.6.2 For cell dispersion

#### 7.6.2.1 Posterior predictive checks

```{r}
#| label: 5x_ScarSD_PPchecks
#| include: true
#| warning: false
#| message: false
#| results: false

set.seed(8807)

color_scheme_set("darkgray")

# Model 1
Scar_sd_Mdl1_ppchecks <- brms::pp_check(Scar_sd_Fit1, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 1",
       subtitle = "IBA1 dispersion and DPI as predictors",
       caption = "Model: sdA ~  sdM * DPI") +
  
  scale_x_continuous(name="GFAP dispersion (sd) ",
                     limits=c(0, 6), 
                     breaks=seq(0,6,2)) +
  
  scale_y_continuous(limits=c(0, 1.6), 
                     breaks=seq(0,1.6,0.3)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Scar_sd_Mdl1_ppchecks, "Plots/ScarCompartments/Scar_sd_Mdl1_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 2
Scar_sd_Mdl2_ppchecks <- brms::pp_check(Scar_sd_Fit2, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 2",
       subtitle = "IBA1 dispersion and DPI as predictors with heteroskedasticity",
       caption = "Model: sdA ~  sdM * DPI \n sigma ~  sdM * DPI") +
  
  scale_x_continuous(name="GFAP dispersion (sd) ",
                     limits=c(0, 6), 
                     breaks=seq(0,6,2)) +
  
  scale_y_continuous(limits=c(0, 1.6), 
                     breaks=seq(0,1.6,0.3)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
      ) + 
    
    legend_none() 

ggsave(plot = Scar_sd_Mdl2_ppchecks, "Plots/ScarCompartments/Scar_sd_Mdl2_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")

# Model 3
Scar_sd_Mdl3_ppchecks <- brms::pp_check(Scar_sd_Fit3, ndraws = 50) +
  geom_density(lwd = 2) +
  
  labs(title = "Model 3",
       subtitle = "IBA1 dispersion and DPI as predictors with splines",
       caption = "Model: sdA ~ s(sdM) + s(DPI2, k = 3)") + 
  
  scale_x_continuous(name="GFAP dispersion (sd) ",
                     limits=c(0, 6), 
                     breaks=seq(0,6,2)) +
  
  scale_y_continuous(limits=c(0, 1.6), 
                     breaks=seq(0,1.6,0.3)) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
          
      ) + 
    
    legend_none()  

ggsave(plot = Scar_sd_Mdl3_ppchecks, "Plots/ScarCompartments/Scar_sd_Mdl3_ppchecks.png", 
       width = 9, 
       height = 9, 
       units = "cm")
```

Plot the posterior predictive checks

```{r}
#| label: 5x_ScarSD_PlotPPcheks
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

ggarrange(Scar_sd_Mdl1_ppchecks, Scar_sd_Mdl2_ppchecks, Scar_sd_Mdl3_ppchecks + rremove("x.text"), 
          labels = c("A", "B", "C"),
          ncol = 3, nrow = 1)
```

We do not see any remarkable deviations from data in all the models

#### 7.6.2.2 We compare the models

```{r}
#| label: 5x_ScarSD_WAIC
#| include: true
#| warning: false
#| message: false
#| results: false

w <- loo_compare(Scar_sd_Fit1, Scar_sd_Fit2, Scar_sd_Fit3,
                 criterion = "waic")

# Generate WAIC graph
ScarSD_WAIC <- w[, 7:8] %>% 
  data.frame() %>% 
  rownames_to_column(var = "model_name") %>% 
  
  ggplot(aes(x    = model_name, 
             y    = waic, 
             ymin = waic - se_waic, 
             ymax = waic + se_waic)) +
  geom_pointrange(shape = 21) +
  
  scale_x_discrete(breaks=c("Scar_sd_Fit1", "Scar_sd_Fit2", "Scar_sd_Fit3"),
                    labels=c("Fit1", "Fit2", "Fit3")) +
 
  coord_flip() +
  labs(x = NULL, y = NULL,
       title = "GFAP dispesion (WAIC)") +
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 12, color = "black"),
      plot.caption = element_text(size = 12, color = "black"),
      
      
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1))

# Save WAIC graph
ggsave(plot = ScarSD_WAIC, 
       "Plots/ScarCompartments/Scar_sd_WAIC.png", 
       width = 12, 
       height = 6, 
       units = "cm")

ScarSD_WAIC
```

The comparison suggest that including sigma or splines does not improve the out of sample prediction. For this reason, we will continue with model one, which includes the interaction between the microglial dispersion and DPI.

#### 7.6.2.3 Plot model MCMC chains

We plot the model diagnostics

```{r}
#| label: 5x_ScarSD_Diagnostics
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

parnames(Scar_sd_Fit1)
color_scheme_set("viridis")

Scar_sd_Trace <- mcmc_trace(Scar_sd_Fit1, pars = c("b_sdM", "b_DPI15D", "b_DPI30D", "b_sdM:DPI15D", "b_sdM:DPI30D", "sigma"), facet_args = list(nrow = 1, strip.position = "left")) +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 45, hjust = 1),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.title = element_text(colour="black", face="bold", size=16),
      legend.text = element_text(colour="black", size=16),
      
     plot.margin = margin(t = 10,  # Top margin
                             r = 10,  # Right margin
                             b = 10,  # Bottom margin
                             l = 10) # Left margin
        
      ) 

Scar_sd_Trace 
```

There are not visible issues with the chains.

#### 7.6.2.4 Model summary

As usual, we plot the summary for the model. This results are not shown in the main research article

```{r}
#| label: 5x_Scarsd_Summary
#| include: true
#| warning: false
#| message: false
#| cache: true

summary(Scar_sd_Fit1)

Scar_sd_Fit1_Table <- modelsummary(Scar_sd_Fit1, 
             shape = term ~ model + statistic,
             centrality = "mean", 
             statistic = "conf.int",
             gof_omit = 'ELPD|ELDP s.e|LOOIC|LOOIC s.e|WAIC|RMSE',
             output = "gt")
gt::gtsave (Scar_sd_Fit1_Table , 
            filename = "Tables/Scar_sd_Fit1_Table.tex")
```

## 7.7 Calculate contrast

We calculate the contrast using `emmeans`.

```{r}
#| label: 5x_ScarDistance_Contrast
#| include: true
#| warning: false
#| message: false
#| cache: true

Scar_Distance_Contrast <- Scar_Distance_Fit1 %>%
emmeans(~ DPI) %>%
contrast(method = "revpairwise") %>%
gather_emmeans_draws() %>% sample_n(1000)

hypothesis(Scar_Distance_Fit1, "DPI15D >   DPI5D", class = "b", seed = 8807)
Scar_Distance_hypothesis <- Scar_Distance_Contrast %>%
  filter(contrast == "15D - 5D")
sum(Scar_Distance_hypothesis$.value > -0.43) / 1000 
```

## 7.8 Plot the results

### 7.8.1 Visualize the estimates and uncertainty for cells distance

We use the same strategy as before to plot estimates and uncertainty. This graph is shown in supplementary figure 4D of the main research article.

```{r}
#| label: 5x_ScarDistance_Estimates
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

set.seed(8807)

Scar_Distance_Grid = Scar_Centroid_Wide %>%
  data_grid(DPI)

Scar_Distance_Means = Scar_Distance_Grid %>%
  add_epred_draws(Scar_Distance_Fit1)

Scar_Distance_Preds = Scar_Distance_Grid %>%
  add_predicted_draws(Scar_Distance_Fit1)

Scar_Distance_fig1 <- Scar_Centroid_Wide %>%
  ggplot(aes(x = Distance_Microglia, y = DPI)) +
  stat_pointinterval(aes(x = .epred), scale = 0.8, position = position_nudge(y = 0.175), data = Scar_Distance_Means) +
    stat_halfeye(aes(x = .epred), 
               scale = 0.6, position = position_nudge(y = 0.175), 
               data = Scar_Distance_Means) +
  stat_interval(aes(x = .prediction), data = Scar_Distance_Preds) +
  geom_point(data = Scar_Centroid_Wide) +
  
  scale_y_discrete(name= " DPI ",
                     labels = c("5D", "15D", "30D")) +
  
  scale_x_continuous(name="GFAP / IBA1 distance",
                     position = "top",
                     limits=c(-1, 3), 
                     breaks=seq(-1,3,1)) +
  
  
  scale_color_brewer(name = "Interval") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      plot.subtitle = element_text(size = 10, color = "black"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.7),
      legend.direction="vertical",
      #legend.box = "vertical",
      legend.margin = margin(1, 1, 1, 0),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)) 



Scar_Distance_Contrast$contrast <- factor(Scar_Distance_Contrast$contrast, 
                                          levels = c("15D - 5D", "30D - 15D", "30D - 5D")) 
              
             
Scar_Distance_Contrast_Fig1 <- Scar_Distance_Contrast %>%
  ggplot(aes(x = .value, 
             y = contrast,
             fill = stat(abs(x) < 0.43))) +
  
  stat_slab() +
  
  stat_pointinterval(point_interval = mode_hdi, 
                     position = position_dodge(width = .95, preserve = "single")) +
  
  geom_vline(xintercept = c(-0.43, 0.43), linetype = "dashed") +
  
  scale_y_discrete(name = "") +
  
  scale_x_continuous(name="DPI difference",
                     limits=c(-1.5, 1), 
                     breaks=seq(-1.5,1, 0.5)) +
  
  scale_fill_manual(name="ROPE", values = c("gray80", "skyblue"),
                    labels = c("False", "True")) +
  
theme_classic() +
theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.9, 0.5),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Scar_Distance_Patch <- Scar_Distance_fig1 +  
                           plot_spacer() + 
                           Scar_Distance_Contrast_Fig1 + 
                           plot_layout(ncol = 2, nrow = 2, widths = c(6, 2), 
                           heights = c(1, 0.5))

ggsave(plot = Scar_Distance_Patch, 
       "Plots/ScarCompartments/Scar_Distance_Patch.png", 
       width = 15, 
       height = 12, 
       units = "cm")

Scar_Distance_Patch
```

### 7.8.2 Plot conditional effects for astrocyte dispersion

We use the `conditional_effets` function from `brms` to visualize the results from the bayesian regression considering the two predictors (sdM and DPI).

```{r}
#| label: 5x_ScarSD_ConditionalEffects
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

# We convert the estimates to a data frames
ScarSD_Effects <- conditional_effects(Scar_sd_Fit1)

ScarSD_Effects_Fig  <- 
  plot(ScarSD_Effects, 
       plot = FALSE)[[3]] +
  
  scale_y_continuous(name = "GFAP dispersion (sd)") +
  scale_x_continuous(name="IBA1 dispersion (sd)") +

  theme_classic() +
  theme(
      plot.title = element_text(size=16, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 16),
      axis.text.x = element_text(colour = "black", size = 16, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 16),
      axis.text.y = element_text(colour = "black", size = 16),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= c(0.1, 0.85),
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 
  
ggsave(
  plot     = ScarSD_Effects_Fig, 
  filename = "Plots/ScarCompartments/Gfap_Iba1_ScarSD.png", 
  width    = 11, 
  height   = 9, 
  units    = "cm")

ScarSD_Effects_Fig
```

The results is shown in supplementary Figure 3G of the research article.

### 7.8.3 Plot standrat deviation for astrocyte dispersion

We can also plot the raw data as density plots. See also supplementary figure 4E in the main research article.

```{r}
#| label: 5x_ScarSD_Lines
#| include: true
#| warning: false
#| message: false
#| results: false
#| cache: true

Astrocytes_sd_dens <- ggplot(Scar_Centroid_Wide, aes(x = sdA, group = DPI, color = DPI)) +
  geom_density(size = 2) +
  
  ggtitle("GFAP") +
  scale_x_continuous(name = "Cell dispersion (sd)") +
  
  scale_y_continuous(name = "Density \n") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= "none",
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Astrocytes_sd_dens

Microglia_sd_dens <- ggplot(Scar_Centroid_Wide, aes(x = sdM, group = DPI, color = DPI)) +
  geom_density(size = 2) +
  
  ggtitle("IBA1") +
  scale_x_continuous(name = "Cell dispersion (sd)") +
  
  scale_y_continuous(name = "Density \n ") +
  
  theme_classic() +
  theme(
      plot.title = element_text(size=14, hjust = 0.5, face="bold"),
      axis.line = element_line(colour = "black", size = 1.5, linetype = "solid"),
      axis.ticks.length=unit(7,"pt"),
     
      axis.title.x = element_text(colour = "black", size = 14),
      axis.text.x = element_text(colour = "black", size = 14, angle = 0, hjust = 0.5),
      axis.ticks.x = element_line(colour = "black", size = 1),
      
      axis.title.y = element_text(colour = "black", size = 14),
      axis.text.y = element_text(colour = "black", size = 14),
      axis.ticks.y = element_line(colour = "black", size = 1),
      
      legend.position= "bottom",
      legend.margin = margin(2, 2, 2, 2),
      legend.title = element_text(colour="black", face="bold", size=12),
      legend.text = element_text(colour="black", size=12)
      ) 

Scar_sd_Patch <- Astrocytes_sd_dens +  
                           Microglia_sd_dens +
                           plot_layout(ncol = 2, nrow = 1, widths = c(3, 3), 
                           heights = c(1, 1))

ggsave(plot = Scar_sd_Patch, 
       "Plots/ScarCompartments/Gfap_Iba1_Scar_sd_Patch.png", 
       width = 18, 
       height = 9, 
       units = "cm")

Scar_sd_Patch
```

### 7.8.4 Create densities and raster layers for astrocytes

Now, we create graphs showing raster layers for astrocytes and microglia, representing the main cell mass.

```{r}
#| label: 5x_ScarSD_Astroytes_CreateRaster
#| include: true
#| warning: false
#| message: false

# Create densities
Astrocytes_Density_5D <- density(Gfap_Superimposed_5x_5D, sigma= 0.3)
Astrocytes_Density_15D <- density(Gfap_Superimposed_5x_15D, sigma= 0.3)
Astrocytes_Density_30D <- density(Gfap_Superimposed_5x_30D, sigma= 0.3)

# Create raster layers
Astrocytes_Raster_5D <- raster(Astrocytes_Density_5D)
Astrocytes_Raster_15D <- raster(Astrocytes_Density_15D)
Astrocytes_Raster_30D <- raster(Astrocytes_Density_30D)

# Convert raster to points and extract high density
Astrocytes_Scar_5D <- rasterToPoints(Astrocytes_Raster_5D, fun=function(x){x>250})
Astrocytes_Scar_5D <- Astrocytes_Scar_5D[,1:2]

Astrocytes_Scar_15D <- rasterToPoints(Astrocytes_Raster_15D, fun=function(x){x>250})
Astrocytes_Scar_15D <- Astrocytes_Scar_15D[,1:2]

Astrocytes_Scar_30D <- rasterToPoints(Astrocytes_Raster_30D, fun=function(x){x>250})
Astrocytes_Scar_30D <- Astrocytes_Scar_30D[,1:2]


#Calculate mean center of mass and standart deviation
Astrocytes_Scar_Center_5D <- apply(Astrocytes_Scar_5D, 2, mean)
# standard distance
Astrocytes_Scar_sd_5D <- sqrt(sum((Astrocytes_Scar_5D[,1] - Astrocytes_Scar_Center_5D[1])^2 + (Astrocytes_Scar_5D[,2] - Astrocytes_Scar_Center_5D[2])^2) / nrow(Astrocytes_Scar_5D))

Astrocytes_Scar_Center_15D <- apply(Astrocytes_Scar_15D, 2, mean)
# standard distance
Astrocytes_Scar_sd_15D <- sqrt(sum((Astrocytes_Scar_15D[,1] - Astrocytes_Scar_Center_15D[1])^2 + (Astrocytes_Scar_15D[,2] - Astrocytes_Scar_Center_15D[2])^2) / nrow(Astrocytes_Scar_15D))

Astrocytes_Scar_Center_30D <- apply(Astrocytes_Scar_30D, 2, mean)
# standard distance
Astrocytes_Scar_sd_30D <- sqrt(sum((Astrocytes_Scar_30D[,1] - Astrocytes_Scar_Center_30D[1])^2 + (Astrocytes_Scar_30D[,2] - Astrocytes_Scar_Center_30D[2])^2) / nrow(Astrocytes_Scar_30D))
```

### 7.8.5 Create densities and raster layers for Microglia

We do the same for microgia

```{r}
#| label: 5x_ScarSD_Microglia_CreateRaster
#| include: true
#| warning: false
#| message: false

# Create densities
Microglia_Density_5D <- density(Iba1_Superimposed_5x_5D, sigma= 0.2)
Microglia_Density_15D <- density(Iba1_Superimposed_5x_15D, sigma= 0.2)
Microglia_Density_30D <- density(Iba1_Superimposed_5x_30D, sigma= 0.2)

# Create raster layers
Microglia_Raster_5D <- raster(Microglia_Density_5D)
Microglia_Raster_15D <- raster(Microglia_Density_15D)
Microglia_Raster_30D <- raster(Microglia_Density_30D)

# Convert raster to points and extract high density
Microglia_Scar_5D <- rasterToPoints(Microglia_Raster_5D, fun=function(x){x>250})
Microglia_Scar_5D <- Microglia_Scar_5D[,1:2]

Microglia_Scar_15D <- rasterToPoints(Microglia_Raster_15D, fun=function(x){x>250})
Microglia_Scar_15D <- Microglia_Scar_15D[,1:2]

Microglia_Scar_30D <- rasterToPoints(Microglia_Raster_30D, fun=function(x){x>250})
Microglia_Scar_30D <- Microglia_Scar_30D[,1:2]


#Calculate mean center of mass and standart deviation
Microglia_Scar_Center_5D <- apply(Microglia_Scar_5D, 2, mean)
# standard distance
Microglia_Scar_sd_5D <- sqrt(sum((Microglia_Scar_5D[,1] - Microglia_Scar_Center_5D[1])^2 + (Microglia_Scar_5D[,2] - Microglia_Scar_Center_5D[2])^2) / nrow(Microglia_Scar_5D))

Microglia_Scar_Center_15D <- apply(Microglia_Scar_15D, 2, mean)
# standard distance
Microglia_Scar_sd_15D <- sqrt(sum((Microglia_Scar_15D[,1] - Microglia_Scar_Center_15D[1])^2 + (Microglia_Scar_15D[,2] - Microglia_Scar_Center_15D[2])^2) / nrow(Microglia_Scar_15D))

Microglia_Scar_Center_30D <- apply(Microglia_Scar_30D, 2, mean)
# standard distance
Microglia_Scar_sd_30D <- sqrt(sum((Microglia_Scar_30D[,1] - Microglia_Scar_Center_30D[1])^2 + (Microglia_Scar_30D[,2] - Microglia_Scar_Center_30D[2])^2) / nrow(Microglia_Scar_30D))
```

### 7.8.6 Plot raster layers

Now, we combine the raster layers in a single plot, as also shown in Figure 3E of the main research article.

```{r}
#| label: 5x_ScarSD_PlotRaster
#| include: true
#| warning: false
#| message: false

# For 5 DPI
plot(Astrocytes_Raster_5D)
points(Microglia_Scar_5D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_5D[1] + Astrocytes_Scar_sd_5D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_5D[2] + Astrocytes_Scar_sd_5D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_5D[1] + Microglia_Scar_sd_5D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_5D[2] + Microglia_Scar_sd_5D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)


# For 15 DPI
plot(Astrocytes_Raster_15D)
points(Microglia_Scar_15D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_15D[1] + Astrocytes_Scar_sd_15D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_15D[2] + Astrocytes_Scar_sd_15D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_15D[1] + Microglia_Scar_sd_15D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_15D[2] + Microglia_Scar_sd_15D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)


# For 30 DPI
plot(Astrocytes_Raster_30D)
points(Microglia_Scar_30D, cex=.01, col="red", pch=1)
points(cbind(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2]), pch=16, col='blue', cex=3)
bearing <- 1:360 * pi/180
Astrocytes_cx <- Astrocytes_Scar_Center_30D[1] + Astrocytes_Scar_sd_30D * cos(bearing)
Astrocytes_cy <- Astrocytes_Scar_Center_30D[2] + Astrocytes_Scar_sd_30D * sin(bearing)
Astrocytes_circle <- cbind(Astrocytes_cx, Astrocytes_cy)
lines(Astrocytes_circle, col='blue', lwd=2)

points(cbind(Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2]), pch=16, col='red', cex=3)
Microglia_cx <- Microglia_Scar_Center_30D[1] + Microglia_Scar_sd_30D * cos(bearing)
Microglia_cy <- Microglia_Scar_Center_30D[2] + Microglia_Scar_sd_30D * sin(bearing)
Microglia_circle <- cbind(Microglia_cx, Microglia_cy)
lines(Microglia_circle, col='red', lwd=2)

```

### 7.8.7 Plot scar distance

Here we calculate the distance between coordinates using the function `distm` for the `geosphere` package [@geosphere]. Then, we generate a graph showing the distance between cell centroids at each DPI as shown in figure 3F of the main research article.

```{r}
#| label: 5x_ScarSD_PlotDistnce
#| include: true
#| warning: false
#| message: false

# calculate the distance between the points
Scar_Distance_5D <- sqrt(sum((Astrocytes_Scar_Center_5D - Microglia_Scar_Center_5D)^2))

Scar_Distance_15D <- sqrt(sum((Astrocytes_Scar_Center_15D - Microglia_Scar_Center_15D)^2))

Scar_Distance_30D <- sqrt(sum((Astrocytes_Scar_Center_30D - Microglia_Scar_Center_30D)^2))

# plot the two points and the distance between them

png("Plots/ScarCompartments/Iba1_Gfap_CentroidDistance.png", width = 500, height = 500)
par(mar=c(6,8,2,2))
plot(0, 0, xlim = c(-6, -3),
     ylim = c(-7, -4), 
     type = "n", 
     xlab = "", 
     ylab = "", 
     lwd = 6,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(-6, -3, 1), labels = c("-6", "-5", "-4", "-3"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-7, -4, 1), labels = c("-7","-6", "-5", "-4"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x (mm)", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = "y (mm)", mgp = c(5, 1, 0), cex.lab = 3)


# Plot 5D
points(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_5D[1], Astrocytes_Scar_Center_5D[2], Microglia_Scar_Center_5D[1], Microglia_Scar_Center_5D[2], lwd = 5, col = "green")
text(-5, -4.5, cex = 2, paste0("Dist = ", round(Scar_Distance_5D, 2), " mm"))

# Plot 15D
points(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_15D[1], Astrocytes_Scar_Center_15D[2], Microglia_Scar_Center_15D[1], Microglia_Scar_Center_15D[2], lwd = 5, col = "green")
text(-5.4, -5.7, cex = 2, paste0("Dist = ", round(Scar_Distance_15D, 2), "mm"))

# Plot 30D
points(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2], pch = 19, col = "blue", cex = 2)
points(Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2], pch = 19, col = "red", cex = 2)
segments(Astrocytes_Scar_Center_30D[1], Astrocytes_Scar_Center_30D[2], Microglia_Scar_Center_30D[1], Microglia_Scar_Center_30D[2], lwd = 5, col = "green")
text(-4.5, -6.5, cex = 2, paste0("Dist = ", round(Scar_Distance_30D, 2), "mm"))

dev.off()
```

# 8. Analysis of intralesional areas

We have analyzed cell allocation assuming that their intensity is related (or is a function) of a covariate (neuronal or microglial allocation). We can perform a non-parametric estimation of a function revealing how the intensity of the point pattern of interest depends on a defined covariate. This estimation is performed using the `rhohat` function from `spatstat`. The result of `rhohat` is an object representing the estimated function ρˆ(z) against covariate values z, accompanied by 95% confidence bands [@spatstat]. We performed the same procedures described above for the covariate pairs of interest (astrocytes-neurons, microglia-neurons, astrocytes-microglia) Using the `Point_Patterns_10x` hyperframe.

## 8.1 Load and subset the 10x hyperframes

We load the `Point_Patterns_10x` object containing point patterns and density kernels of a ROI in the middle cerebral artery territory (as shown in supplementary figure 1 of the main research article).

```{r}
#| label: 10x_PointPattern_Load
#| include: true
#| warning: false
#| message: false

PointPatterns_10x <- readRDS("Hyperframes/PointPatterns_10x.rds")

# We exclude 0 DPI
PointPatterns_10x <- PointPatterns_10x[PointPatterns_10x$DPI != "0D",]

PointPatterns_10x$DPI <- factor(PointPatterns_10x$DPI , levels = c("5D", "15D", "30D")) 
```

## 8.2 Analysis of astrocytes / microglia (distance maps)

We we use the `disfun` function from `spatstat` to add two new columns to the hyperframe with the distance maps of microglia ($Microglia_Dist) and neurons ($Neurons_Dist). Then, we subset the point pattern per DPI.

```{r}
#| label: 10x_DistanceMaps
#| include: true
#| warning: false
#| message: false

# Add distance maps for microglia and neurons before subset
PointPatterns_10x$Microglia_Dist <- with(PointPatterns_10x, distfun(Microglia))
PointPatterns_10x$Neurons_Dist <- with(PointPatterns_10x, distfun(Neurons))

PointPatterns_10x_5D <- subset(PointPatterns_10x, DPI=="5D", select = 1:13) 
PointPatterns_10x_15D <- subset(PointPatterns_10x, DPI=="15D", select = 1:13) 
PointPatterns_10x_30D <- subset(PointPatterns_10x, DPI=="30D", select = 1:13)
```

### 8.2.1 Plot reference distance maps

Now, we plot representative distance maps as shown in figure 4B of the main research article. Please note that the article figures have been flipped vertically. Still, they show the same information.

```{r}
#| label: 10x_DistanceMaps_Plot
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For astrocytes
Distance_colourmap1 <- colourmap(topo.colors(256), range = c(0, 0.12))
Distance_colourmap2 <- colourmap(topo.colors(256), range = c(0, 0.025))

plot(PointPatterns_10x_5D$Microglia_Dist$`121`, main = "Microglia (distfun) 5D", col = Distance_colourmap1)
plot(PointPatterns_10x_5D$Astrocytes$`121`, add = TRUE, pch = 16, cex= 0.4, col = "white")

plot(PointPatterns_10x_15D$Microglia_Dist$`13`, main = "Microglia (distfun) 15D", col = Distance_colourmap2)
plot(PointPatterns_10x_15D$Astrocytes$`13`, add = TRUE, pch = 16, cex= 0.4, col = "white")

plot(PointPatterns_10x_30D$Microglia_Dist$`14`, main = "Microglia (distfun) 30D", col = Distance_colourmap2)
plot(PointPatterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.4, col = "white")

```

### 8.2.2 Relative distribution (rhohat) for astrocytes in microglial regions

We pass the `rhohat` function to each DPI subset having `distfun(Microglia)` as a covariant for astrocytes. We want to find out the spatial intensity of astrocytes conditional on the distance to microglia. We set up do.CI=FALSE to avoid the calculation of coefficient intervals. This metric will be obtained by pooling of all images per time point with the `pool` function.

```{r}
#| label: 10x_Astrocytes_Microglia_Distance
#| include: true
#| warning: false
#| message: false

# For 5 DPI
Astrocytes_Microglia_Dist_5D <- with(PointPatterns_10x_5D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_5D <- pool(Astrocytes_Microglia_Dist_5D)

# For 15 DPI
Astrocytes_Microglia_Dist_15D <- with(PointPatterns_10x_15D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_15D <- pool(Astrocytes_Microglia_Dist_15D)

# For 30 DPI
Astrocytes_Microglia_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, distfun(Microglia), do.CI = FALSE))

Astrocytes_Microglia_Dist_30D <- pool(Astrocytes_Microglia_Dist_30D)
```

### 8.2.3 Plot the rhohat

Now, we plot the calculated relative distribution.

```{r}
#| label: 10x_Astrocytes_Microglia_DistancePlot
#| include: true
#| warning: false
#| message: false

png("Plots/InjuredAreas/Astrocytes_Microglia_Dist_10x_5D.png", width = 500, height = 400)
par(mar=c(7,9,2,2))
plot(Astrocytes_Microglia_Dist_5D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     ylim =c(0, 15000),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.030, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0","3000", "60000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to IBA1 (mm)", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(7, 1, 0), cex.lab = 2.5) 

dev.off()


png("Plots/InjuredAreas/Astrocytes_Microglia_Dist_10x_15D.png", width = 500, height = 400)
par(mar=c(7,10,2,2))
plot(Astrocytes_Microglia_Dist_15D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     ylim =c(0, 15000),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.03, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0","3000", "60000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to IBA1 (mm)", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(8, 1, 0), cex.lab = 2.5)


dev.off()

png("Plots/InjuredAreas/Astrocytes_Microglia_Dist_10x_30D.png", width = 500, height = 400)
par(mar=c(7,10,2,2))
plot(Astrocytes_Microglia_Dist_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     ylim =c(0, 15000),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.035, 0.01), labels = c("0",  "0.01", "0.02", "0.03"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0","3000", "60000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "Distance to IBA1 (mm)", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(8, 1, 0), cex.lab = 2.5)

dev.off()

```

The graphs are shown in figure 4A of the main research article. We can appreciate that the likelihood for astrocytes increments with microglial distance.

### 8.2.4 Fit a mppm model

We fit a `mppm` model with interaction between DPI and Microglia_Dist to dissect the covariance between astrocytes and microglia at the MCA territory. This results are shown in supplementary table 11.

```{r}
#| label: 10x_Astrocytes_Microglia_mppm
#| include: true
#| warning: false
#| message: false

Astrocytes_Microglia_Dist_Fit <- mppm(Astrocytes ~ DPI * Microglia_Dist, data = PointPatterns_10x)

summary(Astrocytes_Microglia_Dist_Fit)

confint(Astrocytes_Microglia_Dist_Fit)
```

The model suggest that the spatial intensity of astrocytes increases with distance to microglia in the MCA territory, and that this effects is reduced as the injury progresses. This is consistent with the two layered glial scar suggest by precius analysis in this research.

### 8.2.5 Create stienen maps for astrocytes and microglia

Additionally, we create create stienen maps exclusively for visualization porpuses. Plots are avoided in the rendered .htlm.Representative images are dispayed in **Figure 4B** of the main research article.

```{r}
#| label: 10x_Microglia_stienen
#| include: true
#| warning: false
#| message: false

# We set the color range
Stienen_colmap <- colourmap(topo.colors(250), range=c(0,0.05))
Stienen_symap <- symbolmap(size=function(x) x/1, bg=Stienen_colmap, range=c(0,0.05))

# We create for astrocytes 
with (PointPatterns_10x_5D, stienen (Astrocytes, symap=Stienen_symap))
with (PointPatterns_10x_15D, stienen (Astrocytes, symap=Stienen_symap))
with (PointPatterns_10x_30D, stienen (Astrocytes, symap=Stienen_symap))

# We crete for microglia
with (PointPatterns_10x_5D, stienen (Microglia, symap=Stienen_symap))
with (PointPatterns_10x_15D, stienen (Microglia, symap=Stienen_symap))
with (PointPatterns_10x_30D, stienen (Microglia, symap=Stienen_symap))
```

## 8.3 Analysis of glia/neurons covariance at 30 DPI

Following with the analysis in the MCA territory, we explore the settling of the glial scar at 30 DPI conditional on the distance to neurons using the same analysis tools as in the previous section.

### 8.3.1 Plot reference distance maps

First, we plot a distance map for neurons for visualization porpuses.

```{r}
#| label: 10x_NeuronsDist_stienen
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

Neurons_Distmap <- colourmap(topo.colors(256), range = c(0, 0.35))

plot(PointPatterns_10x_30D$Neurons_Dist$`14`, main = "IBA1 (distfun) 30D", col = Neurons_Distmap)
plot(PointPatterns_10x_30D$Astrocytes$`14`, add = TRUE, pch = 16, cex= 0.4, col = "black")
plot(PointPatterns_10x_30D$Microglia$`14`, add = TRUE, pch = 16, cex= 0.4, col = "white")
```

### 8.3.2 Relative distribution (rhohat) for astrocytes conditional on x-coordinates and neuronal intensity

Next, we calculate the `rhohat` for astrocytes and microglia conditional on the x-axis and the neuronal intensity.

```{r}
#| label: 10x_Glia_rhohat
#| include: true
#| warning: false
#| message: false


## To calculate the covariance conditional on the x-axis
# For astrocytes
Astrocytes_X_10x_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, "x", do.CI = FALSE))
Astrocytes_X_10x_30D <- pool(Astrocytes_X_10x_30D)

# For microglia
Microglia_X_10x_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, "x", do.CI = FALSE))
Microglia_X_10x_30D <- pool(Microglia_X_10x_30D)


## To calculate the covariance conditional on the neuronal density
# For astrocytes
Astrocytes_Neurons_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Astrocytes, Neurons_Dens, do.CI = FALSE))
Astrocytes_Neurons_Dist_30D <- pool(Astrocytes_Neurons_Dist_30D)

# For microglia
Microglia_Neurons_Dist_30D <- with(PointPatterns_10x_30D, spatstat.explore::rhohat.ppp(Microglia, Neurons_Dens, do.CI = FALSE))
Microglia_Neurons_Dist_30D <- pool(Microglia_Neurons_Dist_30D)
```

### 8.3.3 Plot rhohat for x coordinates

We plot the rhohat for the covariance conditional on the x-axis.

```{r}
#| label: 10x_Glia_rhohatx 
#| include: true
#| warning: false
#| message: false

## For astrocytes
png("Plots/InjuredAreas/Astrocytes_X_10x_30D.png", width = 500, height = 400)
par(mar=c(6,10,2,2))
plot(Astrocytes_X_10x_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 2000), labels = c("0","2000", "4000", "6000", "8000", "10000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x coordinates (mm)", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(8, 1, 0), cex.lab = 2.5) 

dev.off()


## For microglia
png("Plots/InjuredAreas/Microglia_X_10x_30D.png", width = 500, height = 400)
par(mar=c(6,10,2,2))
plot(Microglia_X_10x_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.8, 0.2), labels = c("0", "0.2", "0.4", "0.6", "0.8"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 10000, 2000), labels = c("0","2000", "4000", "6000", "8000", "10000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "x coordinates (mm)", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(IBA1)", mgp = c(8, 1, 0), cex.lab = 2.5)

dev.off()
```

The graphs show that reactive astrocytes are likely to allocate in regions close to the ventricle (0 coordinates), while active microglia do in intra-lesional areas close the the cortital border. The graphs are shown in figure 4D of the main research article.

### 8.3.4 Plot the rhohat for distance to neurons

We plot the rhohat for the relative ditribution conditional on the neuronal intensity.

```{r}
#| label: 10x_Glia_rhohatIntensity
#| include: true
#| warning: false
#| message: false

## For astrocytes
png("Plots/InjuredAreas/Astrocytes_Neurons_Dist_10x_30D.png", width = 500, height = 400)
par(mar=c(6,10,2,2))
plot(Astrocytes_Neurons_Dist_30D, 
     shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 15000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "NeuN spatial intensity", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(GFAP)", mgp = c(8, 1, 0), cex.lab = 2.5) 

dev.off()


## For microglia
png("Plots/InjuredAreas/Microglia_Neurons_Dist_10x_30D.png", width = 500, height = 400)
par(mar=c(6,10,2,2))
plot(Microglia_Neurons_Dist_30D,
      shade = c("lorho", "hirho"),
     main=NULL, 
     las=1, 
     legendargs=list(xpd=TRUE),
     lwd = 6, 
     legend=FALSE, 
     xlab = "",
     ylab = "", 
     ylim = c(0, 10000),
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(0, 15000, 3000), labels = c("0", "3000", "6000", "9000", "12000", "15000"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "NeuN spatial intensity", mgp = c(4.5, 1, 0), cex.lab = 2.5)   
title(ylab = "p(IBA1)", mgp = c(8, 1, 0), cex.lab = 2.5)

dev.off()
```

The graphical results show that both astrocytes and microglia are more likely allocated in regions of low neuronal density. This means that in the MCA, astrocytes and microglia intermingle in the chronic phase of the injury.

### 8.3.5 Fit mppm models

We fit `mppm` models for covariance with x axis and neuronal density.

```{r}
#| label: 10x_Glia_mppm
#| include: false
#| warning: false
#| message: false


# Conditional on x-axis
Astrocytes_X_10x_Fit <- mppm(Astrocytes ~ "x", data = PointPatterns_10x_30D)
Microglia_X_10x_Fit <- mppm(Microglia ~ "x", data = PointPatterns_10x_30D)

# Conditional on neuronal density
Astrocytes_Neurons_10x_Fit <- mppm(Astrocytes ~ Neurons_Dens, data = PointPatterns_10x_30D)
Microglia_Neurons_10x_Fit <- mppm(Microglia ~ Neurons_Dens, data = PointPatterns_10x_30D)
```

# 9. Interaction/correlation within point patterns

After evaluating point pattern allocation in reference to covariants, we are interested in assessing whether each point pattern exhibit interpoint dependence. In spatial point pattern analysis this is referred as interaction or correlation [@spatstat]. We evaluated spatial correlation in point pattern using the **L-function**, a zero-centered transformation of the **K-function**, which allows to determine whether a point pattern is random, clustered, or regularly spaced. The K-function can be defined as "the cumulative average number of data points lying within a distance *r* of a typical data point, corrected for edge effects, and standardized by dividing by the intensity" [@spatstat, p. 204].

## 9.1 Interation for astrocytes

### 9.1.1 Calculate L-functions

We calculated an L-inhomogeneous function using the `linhom` from `spatstat`, assuming that our point patterns are inhomogeneous. Given that our imaging procedure comprises all cells of interest in the lesioned hemisphere, we considered the **isotropic correction** to be more useful than the border correction given that with do not expect more interacting cells outside the observation window. With the following procedure, a new *LInhom* column in generated in the `Point_Patterns_10x` hyperframe, which we pool latter to obtain estimates per time point.

```{r}
#| label: 10x_Astrocytes_Lfunction
#| include: true
#| warning: false
#| message: false

PointPatterns_10x$AstrocytesLInhom <- with (PointPatterns_10x, Linhom(Astrocytes, correction = "isotropic"))
Astrocytes_Lsplit <- split(PointPatterns_10x$AstrocytesLInhom, PointPatterns_10x$DPI)
Astrocytes_LPool <- anylapply(Astrocytes_Lsplit, pool)

```

### 9.1.2 Plot L-functions

We plot the L-functions (.fv objects) using the r-base graphic system. Lower and higher 95% CI are displayed as a shadowed region.

```{r}
#| label: 10x_Astrocytes_LfunctionPlot
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 5D
png("Plots/InjuredAreas/Astrocytes_LFunction_5D.png", width = 500, height = 400)
par(mar=c(7,10,2,2))
plot(Astrocytes_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.02, 0),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.03, 0.01, 0.01), labels = c("-0.03","-0.02", "-0.01", "0", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()

# For 15D
png("Plots/InjuredAreas/Astrocytes_LFunction_15D.png", width = 500, height = 400)
par(mar=c(7,12,2,2))
plot(Astrocytes_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
      shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()

# For 30D
png("Plots/InjuredAreas/Astrocytes_LFunction_30D.png", width = 500, height = 400)
par(mar=c(7,12,2,2))
plot(Astrocytes_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
      shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()
```

### 9.1.3 Permutation test for astrocytes

We perform a [permutation test](https://arc.lib.montana.edu/book/statistics-with-r-textbook/item/45) using the `studpermu.test` from `spatstat` [@spatstat] to test the differences between the distribution (interaction) between point patterns. Unfortunately, as implemented in `spatstat` the permutation test results offers merely a p-value that does not allow to asess the magnitude and the uncertainty of the difference. Still, we use it in the current research to a signal for evaluating if the L-function between time points are the same. We use the formula Astrocytes ~ DPI 

```{r}
#| label: 10x_Astrocytes_Permutation
#| include: true
#| warning: false
#| message: false

Astrocytes_Permutation <- studpermu.test(PointPatterns_10x, summaryfunction = Lest, use.Tbar = TRUE, Astrocytes ~ DPI)

Astrocytes_Permutation
```

The results indicate that is not the same L-function for all the time points.

## 9.2 Interation for microglia

### 9.2.1 Calculate L function for microglia

```{r}
#| label: 10x_Microglia_Lfunction
#| include: true
#| warning: false
#| message: false

PointPatterns_10x$MicrogliaLInhom <- with (PointPatterns_10x, Linhom(Microglia, correction = "isotropic"))
Microglia_Lsplit <- split(PointPatterns_10x$MicrogliaLInhom, PointPatterns_10x$DPI)
Microglia_LPool <- anylapply(Microglia_Lsplit, pool)
```

### 9.2.2 Plot L-functions

As done for astrocytes, we plot the L-function for microglia.

```{r}
#| label: 10x_Microglia_PlotLfunction
#| include: true
#| warning: false
#| message: false
#| column: screen-inset-shaded
#| layout-nrow: 1
#| fig-width: 20
#| fig-height: 5

# For 5D
png("Plots/InjuredAreas/Microglia_LFunction_5D.png", width = 500, height = 400)
par(mar=c(7,10,2,2))
plot(Microglia_LPool$`5D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.02, 0),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.03, 0.01, 0.01), labels = c("-0.03","-0.02", "-0.01", "0", "0"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(6, 1, 0), cex.lab = 3) 

dev.off()

# For 15D
png("Plots/InjuredAreas//Microglia_LFunction_15D.png", width = 500, height = 400)
par(mar=c(7,12,2,2))
plot(Microglia_LPool$`15D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()

# For 30D
png("Plots/InjuredAreas/Microglia_LFunction_30D.png", width = 500, height = 400)
par(mar=c(7,12,2,2))
plot(Microglia_LPool$`30D`, cbind(pooliso, pooltheo, loiso, hiiso) - r ~ r,
     shade = c("loiso", "hiiso"),
     main = "", 
     cex.lab = 3,
     cex.axis = 3,
     xlim=c(0, 0.06),
     ylim=c(-0.003, 0.001),
     xlab = "",
     ylab = "",
     lwd = 6,
     legend=FALSE,
     xaxt = "n",
     yaxt = "n")

axis(1, at = seq(0, 0.06, 0.02), labels = c("0", "0.02", "0.04", "0.06"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5)

axis(2, at = seq(-0.003, 0.001, 0.001), labels = c("-0.003", "-0.002", "-0.001", "0", "0.005"), cex.axis=2.5, padj = 0.5, lwd.ticks = 5, las = 2)

title(xlab = "r", mgp = c(4.5, 1, 0), cex.lab = 3)   
title(ylab = expression("L "[inhom] * "(r)-r"), mgp = c(8, 1, 0), cex.lab = 3) 

dev.off()
```

### 9.2.3 Perform permutation test for microglia

```{r}
#| label: 10x_Microglia_Permutation
#| include: true
#| warning: false
#| message: false

Microglia_Permutation <- studpermu.test(PointPatterns_10x, summaryfunction = Lest, use.Tbar = TRUE, Microglia ~ DPI)
Microglia_Permutation 
```
Microglia display weaker evidence for a difference in the L-functions. This suggest that astrocytes are more prone to change their distribution (interaction) patterns than microglia.

### References

::: {#refs}
:::


```{r}
writeLines(capture.output(sessionInfo()), "SessionInfo.txt")
sessionInfo()
```
